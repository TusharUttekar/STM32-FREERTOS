
Semaphore_Mutex_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000687c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cf8  08006cf8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006cf8  08006cf8  00016cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d00  08006d00  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d00  08006d00  00016d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d04  08006d04  00016d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00013a4c  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013aac  20013aac  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001788b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000034c8  00000000  00000000  0003795e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015d0  00000000  00000000  0003ae28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001104  00000000  00000000  0003c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000267bf  00000000  00000000  0003d4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019edd  00000000  00000000  00063cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e8039  00000000  00000000  0007db98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006144  00000000  00000000  00165bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0016bd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006a14 	.word	0x08006a14

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08006a14 	.word	0x08006a14

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Periodic_Callback>:
		}
	}
}

void Periodic_Callback(TimerHandle_t Timer)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	TickType_t Timer_Count;
	uint32_t Execution_Count;

	Execution_Count = (uint32_t)pvTimerGetTimerID(Timer);
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f003 fae3 	bl	8003b60 <pvTimerGetTimerID>
 800059a:	4603      	mov	r3, r0
 800059c:	60fb      	str	r3, [r7, #12]
	Execution_Count++;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3301      	adds	r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]

	vTimerSetTimerID(Timer, (void*)Execution_Count);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4619      	mov	r1, r3
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f003 faf9 	bl	8003ba0 <vTimerSetTimerID>

	Timer_Count = xTaskGetTickCount();
 80005ae:	f002 fb4d 	bl	8002c4c <xTaskGetTickCount>
 80005b2:	60b8      	str	r0, [r7, #8]

	if(Timer == One_Shot_Handle)
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <Periodic_Callback+0x5c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d108      	bne.n	80005d0 <Periodic_Callback+0x44>
	{
		sprintf(Buffer, "One shot timer execute at time : %ld", Timer_Count);
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	490a      	ldr	r1, [pc, #40]	; (80005ec <Periodic_Callback+0x60>)
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <Periodic_Callback+0x64>)
 80005c4:	f005 fd72 	bl	80060ac <siprintf>
		SEGGER_SYSVIEW_Print(Buffer);
 80005c8:	4809      	ldr	r0, [pc, #36]	; (80005f0 <Periodic_Callback+0x64>)
 80005ca:	f005 fba1 	bl	8005d10 <SEGGER_SYSVIEW_Print>
		/*if(Execution_Count == 50)
		{
			xTimerDelete(Timer, 0);
		}*/
	}
}
 80005ce:	e007      	b.n	80005e0 <Periodic_Callback+0x54>
		sprintf(Buffer, "Periodic timer execute at time : %ld", Timer_Count);
 80005d0:	68ba      	ldr	r2, [r7, #8]
 80005d2:	4908      	ldr	r1, [pc, #32]	; (80005f4 <Periodic_Callback+0x68>)
 80005d4:	4806      	ldr	r0, [pc, #24]	; (80005f0 <Periodic_Callback+0x64>)
 80005d6:	f005 fd69 	bl	80060ac <siprintf>
		SEGGER_SYSVIEW_Print(Buffer);
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <Periodic_Callback+0x64>)
 80005dc:	f005 fb98 	bl	8005d10 <SEGGER_SYSVIEW_Print>
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000012c 	.word	0x2000012c
 80005ec:	08006b48 	.word	0x08006b48
 80005f0:	2000007c 	.word	0x2000007c
 80005f4:	08006b70 	.word	0x08006b70

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  //HAL_Init();

  /* USER CODE BEGIN Init */
	DWT->CTRL |= (1 << 0);
 80005fe:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <main+0xa8>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <main+0xa8>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6013      	str	r3, [r2, #0]

  /* Configure the system clock */
  //SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  HAL_RCC_DeInit();
 800060a:	f000 fd23 	bl	8001054 <HAL_RCC_DeInit>
  SystemCoreClockUpdate();
 800060e:	f000 f98b 	bl	8000928 <SystemCoreClockUpdate>
  SEGGER_SYSVIEW_Conf();
 8000612:	f003 ff21 	bl	8004458 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000616:	f004 fe01 	bl	800521c <SEGGER_SYSVIEW_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f87d 	bl	8000718 <MX_GPIO_Init>
//  MX_TIM6_Init();
  MX_USART1_UART_Init();
 800061e:	f000 f851 	bl	80006c4 <MX_USART1_UART_Init>

  /*Semaphore and priority inversion example
   * Semaphore = xSemaphoreCreateBinary();
  assert_param(Semaphore != NULL);*/

  Mutex = xSemaphoreCreateMutex();
 8000622:	2001      	movs	r0, #1
 8000624:	f001 fbba 	bl	8001d9c <xQueueCreateMutex>
 8000628:	4603      	mov	r3, r0
 800062a:	4a1e      	ldr	r2, [pc, #120]	; (80006a4 <main+0xac>)
 800062c:	6013      	str	r3, [r2, #0]
  xTaskCreate(Task3_Handler, "Task-3", configMINIMAL_STACK_SIZE, NULL, 1, NULL);*/

  /*/Priority Inversion
  xSemaphoreGive(Semaphore);*/

  One_Shot_Handle = xTimerCreate("One Shot Timer", pdMS_TO_TICKS(5000), pdFAIL, 0, Periodic_Callback);
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <main+0xb0>)
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	2200      	movs	r2, #0
 8000636:	f241 3188 	movw	r1, #5000	; 0x1388
 800063a:	481c      	ldr	r0, [pc, #112]	; (80006ac <main+0xb4>)
 800063c:	f002 ffa0 	bl	8003580 <xTimerCreate>
 8000640:	4603      	mov	r3, r0
 8000642:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <main+0xb8>)
 8000644:	6013      	str	r3, [r2, #0]
  Periodic_Timer_Handle = xTimerCreate("Periodic Timer", pdMS_TO_TICKS(500), pdTRUE, 0, Periodic_Callback);
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <main+0xb0>)
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000652:	4818      	ldr	r0, [pc, #96]	; (80006b4 <main+0xbc>)
 8000654:	f002 ff94 	bl	8003580 <xTimerCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <main+0xc0>)
 800065c:	6013      	str	r3, [r2, #0]

  OneShot_Started = xTimerStart(One_Shot_Handle, 0);
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <main+0xb8>)
 8000660:	681c      	ldr	r4, [r3, #0]
 8000662:	f002 faf3 	bl	8002c4c <xTaskGetTickCount>
 8000666:	4602      	mov	r2, r0
 8000668:	2300      	movs	r3, #0
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2300      	movs	r3, #0
 800066e:	2101      	movs	r1, #1
 8000670:	4620      	mov	r0, r4
 8000672:	f002 ffd5 	bl	8003620 <xTimerGenericCommand>
 8000676:	4603      	mov	r3, r0
 8000678:	4a10      	ldr	r2, [pc, #64]	; (80006bc <main+0xc4>)
 800067a:	6013      	str	r3, [r2, #0]
  PeriodicTimer_Started = xTimerStart(Periodic_Timer_Handle, 0);
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <main+0xc0>)
 800067e:	681c      	ldr	r4, [r3, #0]
 8000680:	f002 fae4 	bl	8002c4c <xTaskGetTickCount>
 8000684:	4602      	mov	r2, r0
 8000686:	2300      	movs	r3, #0
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2300      	movs	r3, #0
 800068c:	2101      	movs	r1, #1
 800068e:	4620      	mov	r0, r4
 8000690:	f002 ffc6 	bl	8003620 <xTimerGenericCommand>
 8000694:	4603      	mov	r3, r0
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <main+0xc8>)
 8000698:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 800069a:	f002 f9db 	bl	8002a54 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069e:	e7fe      	b.n	800069e <main+0xa6>
 80006a0:	e0001000 	.word	0xe0001000
 80006a4:	2000013c 	.word	0x2000013c
 80006a8:	0800058d 	.word	0x0800058d
 80006ac:	08006b98 	.word	0x08006b98
 80006b0:	2000012c 	.word	0x2000012c
 80006b4:	08006ba8 	.word	0x08006ba8
 80006b8:	20000130 	.word	0x20000130
 80006bc:	20000134 	.word	0x20000134
 80006c0:	20000138 	.word	0x20000138

080006c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_USART1_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006fc:	f000 fef0 	bl	80014e0 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f859 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000e8 	.word	0x200000e8
 8000714:	40011000 	.word	0x40011000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_GPIO_Init+0x80>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <MX_GPIO_Init+0x80>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_GPIO_Init+0x80>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_GPIO_Init+0x80>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a11      	ldr	r2, [pc, #68]	; (8000798 <MX_GPIO_Init+0x80>)
 8000754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_GPIO_Init+0x80>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <MX_GPIO_Init+0x84>)
 800076e:	f000 fc23 	bl	8000fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000772:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_GPIO_Init+0x84>)
 800078c:	f000 fa68 	bl	8000c60 <HAL_GPIO_Init>

}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40021800 	.word	0x40021800

080007a0 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */
void vApplicationIdleHook(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
	Idle_Count++;
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <vApplicationIdleHook+0x18>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3301      	adds	r3, #1
 80007aa:	4a03      	ldr	r2, [pc, #12]	; (80007b8 <vApplicationIdleHook+0x18>)
 80007ac:	6013      	str	r3, [r2, #0]
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	20000140 	.word	0x20000140

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a19      	ldr	r2, [pc, #100]	; (800084c <HAL_UART_MspInit+0x84>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d12c      	bne.n	8000844 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <HAL_UART_MspInit+0x88>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a17      	ldr	r2, [pc, #92]	; (8000850 <HAL_UART_MspInit+0x88>)
 80007f4:	f043 0310 	orr.w	r3, r3, #16
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_UART_MspInit+0x88>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f003 0310 	and.w	r3, r3, #16
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <HAL_UART_MspInit+0x88>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <HAL_UART_MspInit+0x88>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_UART_MspInit+0x88>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000822:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000834:	2307      	movs	r3, #7
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <HAL_UART_MspInit+0x8c>)
 8000840:	f000 fa0e 	bl	8000c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40011000 	.word	0x40011000
 8000850:	40023800 	.word	0x40023800
 8000854:	40020000 	.word	0x40020000

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <TIM6_DAC_IRQHandler+0x10>)
 800088a:	f000 fcdb 	bl	8001244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000a0 	.word	0x200000a0

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f005 fc28 	bl	800611c <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20030000 	.word	0x20030000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	20000144 	.word	0x20000144
 8000900:	20013ab0 	.word	0x20013ab0

08000904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	2302      	movs	r3, #2
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	2302      	movs	r3, #2
 8000940:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000942:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <SystemCoreClockUpdate+0xec>)
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f003 030c 	and.w	r3, r3, #12
 800094a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	2b08      	cmp	r3, #8
 8000950:	d011      	beq.n	8000976 <SystemCoreClockUpdate+0x4e>
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	2b08      	cmp	r3, #8
 8000956:	d844      	bhi.n	80009e2 <SystemCoreClockUpdate+0xba>
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d003      	beq.n	8000966 <SystemCoreClockUpdate+0x3e>
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	2b04      	cmp	r3, #4
 8000962:	d004      	beq.n	800096e <SystemCoreClockUpdate+0x46>
 8000964:	e03d      	b.n	80009e2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000966:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <SystemCoreClockUpdate+0xf0>)
 8000968:	4a2c      	ldr	r2, [pc, #176]	; (8000a1c <SystemCoreClockUpdate+0xf4>)
 800096a:	601a      	str	r2, [r3, #0]
      break;
 800096c:	e03d      	b.n	80009ea <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800096e:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <SystemCoreClockUpdate+0xf0>)
 8000970:	4a2b      	ldr	r2, [pc, #172]	; (8000a20 <SystemCoreClockUpdate+0xf8>)
 8000972:	601a      	str	r2, [r3, #0]
      break;
 8000974:	e039      	b.n	80009ea <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000976:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <SystemCoreClockUpdate+0xec>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	0d9b      	lsrs	r3, r3, #22
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000982:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <SystemCoreClockUpdate+0xec>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800098a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d00c      	beq.n	80009ac <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000992:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <SystemCoreClockUpdate+0xf8>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4a1e      	ldr	r2, [pc, #120]	; (8000a14 <SystemCoreClockUpdate+0xec>)
 800099c:	6852      	ldr	r2, [r2, #4]
 800099e:	0992      	lsrs	r2, r2, #6
 80009a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	e00b      	b.n	80009c4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80009ac:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <SystemCoreClockUpdate+0xf4>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b4:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <SystemCoreClockUpdate+0xec>)
 80009b6:	6852      	ldr	r2, [r2, #4]
 80009b8:	0992      	lsrs	r2, r2, #6
 80009ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009be:	fb02 f303 	mul.w	r3, r2, r3
 80009c2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <SystemCoreClockUpdate+0xec>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	0c1b      	lsrs	r3, r3, #16
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	3301      	adds	r3, #1
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <SystemCoreClockUpdate+0xf0>)
 80009de:	6013      	str	r3, [r2, #0]
      break;
 80009e0:	e003      	b.n	80009ea <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <SystemCoreClockUpdate+0xf0>)
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <SystemCoreClockUpdate+0xf4>)
 80009e6:	601a      	str	r2, [r3, #0]
      break;
 80009e8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <SystemCoreClockUpdate+0xec>)
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	091b      	lsrs	r3, r3, #4
 80009f0:	f003 030f 	and.w	r3, r3, #15
 80009f4:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <SystemCoreClockUpdate+0xfc>)
 80009f6:	5cd3      	ldrb	r3, [r2, r3]
 80009f8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <SystemCoreClockUpdate+0xf0>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	fa22 f303 	lsr.w	r3, r2, r3
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <SystemCoreClockUpdate+0xf0>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	371c      	adds	r7, #28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	40023800 	.word	0x40023800
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	00f42400 	.word	0x00f42400
 8000a20:	007a1200 	.word	0x007a1200
 8000a24:	08006c84 	.word	0x08006c84

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a60 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2e:	490e      	ldr	r1, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a44:	4c0b      	ldr	r4, [pc, #44]	; (8000a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a52:	f7ff ff57 	bl	8000904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f005 fb67 	bl	8006128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fdcd 	bl	80005f8 <main>
  bx  lr    
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a60:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a6c:	08006d08 	.word	0x08006d08
  ldr r2, =_sbss
 8000a70:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a74:	20013aac 	.word	0x20013aac

08000a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC_IRQHandler>
	...

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x54>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x58>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f8d4 	bl	8000c48 <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00e      	b.n	8000ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d80a      	bhi.n	8000ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f000 f8aa 	bl	8000c10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_InitTick+0x5c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000148 	.word	0x20000148

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	; (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	; (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
         );
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	; 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff8e 	bl	8000b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c22:	f7ff ff67 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	68b9      	ldr	r1, [r7, #8]
 8000c2c:	6978      	ldr	r0, [r7, #20]
 8000c2e:	f7ff ff99 	bl	8000b64 <NVIC_EncodePriority>
 8000c32:	4602      	mov	r2, r0
 8000c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff68 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c40:	bf00      	nop
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ffbb 	bl	8000bcc <SysTick_Config>
 8000c56:	4603      	mov	r3, r0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	e177      	b.n	8000f6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 8166 	bne.w	8000f66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d005      	beq.n	8000cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d130      	bne.n	8000d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	f003 0201 	and.w	r2, r3, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d017      	beq.n	8000d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d123      	bne.n	8000da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	220f      	movs	r2, #15
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	08da      	lsrs	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3208      	adds	r2, #8
 8000d9e:	69b9      	ldr	r1, [r7, #24]
 8000da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0203 	and.w	r2, r3, #3
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80c0 	beq.w	8000f66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b66      	ldr	r3, [pc, #408]	; (8000f84 <HAL_GPIO_Init+0x324>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a65      	ldr	r2, [pc, #404]	; (8000f84 <HAL_GPIO_Init+0x324>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b63      	ldr	r3, [pc, #396]	; (8000f84 <HAL_GPIO_Init+0x324>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e02:	4a61      	ldr	r2, [pc, #388]	; (8000f88 <HAL_GPIO_Init+0x328>)
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a58      	ldr	r2, [pc, #352]	; (8000f8c <HAL_GPIO_Init+0x32c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d037      	beq.n	8000e9e <HAL_GPIO_Init+0x23e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a57      	ldr	r2, [pc, #348]	; (8000f90 <HAL_GPIO_Init+0x330>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d031      	beq.n	8000e9a <HAL_GPIO_Init+0x23a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a56      	ldr	r2, [pc, #344]	; (8000f94 <HAL_GPIO_Init+0x334>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d02b      	beq.n	8000e96 <HAL_GPIO_Init+0x236>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a55      	ldr	r2, [pc, #340]	; (8000f98 <HAL_GPIO_Init+0x338>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d025      	beq.n	8000e92 <HAL_GPIO_Init+0x232>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a54      	ldr	r2, [pc, #336]	; (8000f9c <HAL_GPIO_Init+0x33c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d01f      	beq.n	8000e8e <HAL_GPIO_Init+0x22e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a53      	ldr	r2, [pc, #332]	; (8000fa0 <HAL_GPIO_Init+0x340>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d019      	beq.n	8000e8a <HAL_GPIO_Init+0x22a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a52      	ldr	r2, [pc, #328]	; (8000fa4 <HAL_GPIO_Init+0x344>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d013      	beq.n	8000e86 <HAL_GPIO_Init+0x226>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a51      	ldr	r2, [pc, #324]	; (8000fa8 <HAL_GPIO_Init+0x348>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d00d      	beq.n	8000e82 <HAL_GPIO_Init+0x222>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a50      	ldr	r2, [pc, #320]	; (8000fac <HAL_GPIO_Init+0x34c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d007      	beq.n	8000e7e <HAL_GPIO_Init+0x21e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4f      	ldr	r2, [pc, #316]	; (8000fb0 <HAL_GPIO_Init+0x350>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d101      	bne.n	8000e7a <HAL_GPIO_Init+0x21a>
 8000e76:	2309      	movs	r3, #9
 8000e78:	e012      	b.n	8000ea0 <HAL_GPIO_Init+0x240>
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	e010      	b.n	8000ea0 <HAL_GPIO_Init+0x240>
 8000e7e:	2308      	movs	r3, #8
 8000e80:	e00e      	b.n	8000ea0 <HAL_GPIO_Init+0x240>
 8000e82:	2307      	movs	r3, #7
 8000e84:	e00c      	b.n	8000ea0 <HAL_GPIO_Init+0x240>
 8000e86:	2306      	movs	r3, #6
 8000e88:	e00a      	b.n	8000ea0 <HAL_GPIO_Init+0x240>
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	e008      	b.n	8000ea0 <HAL_GPIO_Init+0x240>
 8000e8e:	2304      	movs	r3, #4
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x240>
 8000e92:	2303      	movs	r3, #3
 8000e94:	e004      	b.n	8000ea0 <HAL_GPIO_Init+0x240>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_Init+0x240>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x240>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	69fa      	ldr	r2, [r7, #28]
 8000ea2:	f002 0203 	and.w	r2, r2, #3
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	4093      	lsls	r3, r2
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb0:	4935      	ldr	r1, [pc, #212]	; (8000f88 <HAL_GPIO_Init+0x328>)
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebe:	4b3d      	ldr	r3, [pc, #244]	; (8000fb4 <HAL_GPIO_Init+0x354>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ee2:	4a34      	ldr	r2, [pc, #208]	; (8000fb4 <HAL_GPIO_Init+0x354>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee8:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <HAL_GPIO_Init+0x354>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f0c:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <HAL_GPIO_Init+0x354>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f12:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <HAL_GPIO_Init+0x354>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f36:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <HAL_GPIO_Init+0x354>)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_GPIO_Init+0x354>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f60:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <HAL_GPIO_Init+0x354>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	2b0f      	cmp	r3, #15
 8000f70:	f67f ae84 	bls.w	8000c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40013800 	.word	0x40013800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40021400 	.word	0x40021400
 8000fa4:	40021800 	.word	0x40021800
 8000fa8:	40021c00 	.word	0x40021c00
 8000fac:	40022000 	.word	0x40022000
 8000fb0:	40022400 	.word	0x40022400
 8000fb4:	40013c00 	.word	0x40013c00

08000fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fd4:	e003      	b.n	8000fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	041a      	lsls	r2, r3, #16
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	619a      	str	r2, [r3, #24]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_RCC_GetHCLKFreq+0x14>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000000 	.word	0x20000000

08001004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001008:	f7ff fff0 	bl	8000fec <HAL_RCC_GetHCLKFreq>
 800100c:	4602      	mov	r2, r0
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	0a9b      	lsrs	r3, r3, #10
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	4903      	ldr	r1, [pc, #12]	; (8001028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800101a:	5ccb      	ldrb	r3, [r1, r3]
 800101c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001020:	4618      	mov	r0, r3
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	08006c94 	.word	0x08006c94

0800102c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001030:	f7ff ffdc 	bl	8000fec <HAL_RCC_GetHCLKFreq>
 8001034:	4602      	mov	r2, r0
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	0b5b      	lsrs	r3, r3, #13
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	4903      	ldr	r1, [pc, #12]	; (8001050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001042:	5ccb      	ldrb	r3, [r1, r3]
 8001044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001048:	4618      	mov	r0, r3
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	08006c94 	.word	0x08006c94

08001054 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800105a:	f7ff fd3f 	bl	8000adc <HAL_GetTick>
 800105e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001060:	4b72      	ldr	r3, [pc, #456]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a71      	ldr	r2, [pc, #452]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800106c:	e008      	b.n	8001080 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106e:	f7ff fd35 	bl	8000adc <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e0d0      	b.n	8001222 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001080:	4b6a      	ldr	r3, [pc, #424]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800108c:	4b67      	ldr	r3, [pc, #412]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a66      	ldr	r2, [pc, #408]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001096:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001098:	f7ff fd20 	bl	8000adc <HAL_GetTick>
 800109c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800109e:	4b63      	ldr	r3, [pc, #396]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80010a4:	e00a      	b.n	80010bc <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a6:	f7ff fd19 	bl	8000adc <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e0b2      	b.n	8001222 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80010bc:	4b5b      	ldr	r3, [pc, #364]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1ee      	bne.n	80010a6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80010c8:	f7ff fd08 	bl	8000adc <HAL_GetTick>
 80010cc:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80010ce:	4b57      	ldr	r3, [pc, #348]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a56      	ldr	r2, [pc, #344]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80010d4:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80010d8:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010dc:	f7ff fcfe 	bl	8000adc <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b64      	cmp	r3, #100	; 0x64
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e099      	b.n	8001222 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80010ee:	4b4f      	ldr	r3, [pc, #316]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f0      	bne.n	80010dc <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80010fa:	f7ff fcef 	bl	8000adc <HAL_GetTick>
 80010fe:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001100:	4b4a      	ldr	r3, [pc, #296]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a49      	ldr	r2, [pc, #292]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800110a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800110e:	f7ff fce5 	bl	8000adc <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e080      	b.n	8001222 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001120:	4b42      	ldr	r3, [pc, #264]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f0      	bne.n	800110e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800112c:	f7ff fcd6 	bl	8000adc <HAL_GetTick>
 8001130:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8001132:	4b3e      	ldr	r3, [pc, #248]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a3d      	ldr	r2, [pc, #244]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001138:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800113c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001140:	f7ff fccc 	bl	8000adc <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e067      	b.n	8001222 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001152:	4b36      	ldr	r3, [pc, #216]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f0      	bne.n	8001140 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800115e:	f7ff fcbd 	bl	8000adc <HAL_GetTick>
 8001162:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8001164:	4b31      	ldr	r3, [pc, #196]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a30      	ldr	r2, [pc, #192]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 800116a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800116e:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001172:	f7ff fcb3 	bl	8000adc <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e04e      	b.n	8001222 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f0      	bne.n	8001172 <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001192:	4a27      	ldr	r2, [pc, #156]	; (8001230 <HAL_RCC_DeInit+0x1dc>)
 8001194:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8001196:	4b25      	ldr	r3, [pc, #148]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001198:	4a26      	ldr	r2, [pc, #152]	; (8001234 <HAL_RCC_DeInit+0x1e0>)
 800119a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011a0:	4a24      	ldr	r2, [pc, #144]	; (8001234 <HAL_RCC_DeInit+0x1e0>)
 80011a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	4a20      	ldr	r2, [pc, #128]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011ac:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80011b0:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	4a1a      	ldr	r2, [pc, #104]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011d0:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80011d4:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 80011fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011fe:	4a0b      	ldr	r2, [pc, #44]	; (800122c <HAL_RCC_DeInit+0x1d8>)
 8001200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001204:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_RCC_DeInit+0x1e4>)
 8001208:	4a0c      	ldr	r2, [pc, #48]	; (800123c <HAL_RCC_DeInit+0x1e8>)
 800120a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_RCC_DeInit+0x1ec>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fc33 	bl	8000a7c <HAL_InitTick>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8001220:	2300      	movs	r3, #0
  }
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	04003010 	.word	0x04003010
 8001234:	24003000 	.word	0x24003000
 8001238:	20000000 	.word	0x20000000
 800123c:	00f42400 	.word	0x00f42400
 8001240:	20000004 	.word	0x20000004

08001244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b02      	cmp	r3, #2
 8001258:	d122      	bne.n	80012a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b02      	cmp	r3, #2
 8001266:	d11b      	bne.n	80012a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f06f 0202 	mvn.w	r2, #2
 8001270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f8f8 	bl	800147c <HAL_TIM_IC_CaptureCallback>
 800128c:	e005      	b.n	800129a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f8ea 	bl	8001468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f8fb 	bl	8001490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d122      	bne.n	80012f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d11b      	bne.n	80012f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f06f 0204 	mvn.w	r2, #4
 80012c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2202      	movs	r2, #2
 80012ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f8ce 	bl	800147c <HAL_TIM_IC_CaptureCallback>
 80012e0:	e005      	b.n	80012ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f8c0 	bl	8001468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f8d1 	bl	8001490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d122      	bne.n	8001348 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b08      	cmp	r3, #8
 800130e:	d11b      	bne.n	8001348 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f06f 0208 	mvn.w	r2, #8
 8001318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2204      	movs	r2, #4
 800131e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f8a4 	bl	800147c <HAL_TIM_IC_CaptureCallback>
 8001334:	e005      	b.n	8001342 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 f896 	bl	8001468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f8a7 	bl	8001490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b10      	cmp	r3, #16
 8001354:	d122      	bne.n	800139c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	2b10      	cmp	r3, #16
 8001362:	d11b      	bne.n	800139c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f06f 0210 	mvn.w	r2, #16
 800136c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2208      	movs	r2, #8
 8001372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f87a 	bl	800147c <HAL_TIM_IC_CaptureCallback>
 8001388:	e005      	b.n	8001396 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f86c 	bl	8001468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f87d 	bl	8001490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d10e      	bne.n	80013c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d107      	bne.n	80013c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f06f 0201 	mvn.w	r2, #1
 80013c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f846 	bl	8001454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	2b80      	cmp	r3, #128	; 0x80
 80013d4:	d10e      	bne.n	80013f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e0:	2b80      	cmp	r3, #128	; 0x80
 80013e2:	d107      	bne.n	80013f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80013ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f86c 	bl	80014cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fe:	2b40      	cmp	r3, #64	; 0x40
 8001400:	d10e      	bne.n	8001420 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800140c:	2b40      	cmp	r3, #64	; 0x40
 800140e:	d107      	bne.n	8001420 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f842 	bl	80014a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	2b20      	cmp	r3, #32
 800142c:	d10e      	bne.n	800144c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f003 0320 	and.w	r3, r3, #32
 8001438:	2b20      	cmp	r3, #32
 800143a:	d107      	bne.n	800144c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f06f 0220 	mvn.w	r2, #32
 8001444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f836 	bl	80014b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e03f      	b.n	8001572 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff f95e 	bl	80007c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2224      	movs	r2, #36	; 0x24
 8001510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001522:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f829 	bl	800157c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001538:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	695a      	ldr	r2, [r3, #20]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001548:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001558:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2220      	movs	r2, #32
 800156c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800157c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001580:	b0c0      	sub	sp, #256	; 0x100
 8001582:	af00      	add	r7, sp, #0
 8001584:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001598:	68d9      	ldr	r1, [r3, #12]
 800159a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	ea40 0301 	orr.w	r3, r0, r1
 80015a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80015c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80015d4:	f021 010c 	bic.w	r1, r1, #12
 80015d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80015e2:	430b      	orrs	r3, r1
 80015e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80015f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015f6:	6999      	ldr	r1, [r3, #24]
 80015f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	ea40 0301 	orr.w	r3, r0, r1
 8001602:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b8f      	ldr	r3, [pc, #572]	; (8001848 <UART_SetConfig+0x2cc>)
 800160c:	429a      	cmp	r2, r3
 800160e:	d005      	beq.n	800161c <UART_SetConfig+0xa0>
 8001610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b8d      	ldr	r3, [pc, #564]	; (800184c <UART_SetConfig+0x2d0>)
 8001618:	429a      	cmp	r2, r3
 800161a:	d104      	bne.n	8001626 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800161c:	f7ff fd06 	bl	800102c <HAL_RCC_GetPCLK2Freq>
 8001620:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001624:	e003      	b.n	800162e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001626:	f7ff fced 	bl	8001004 <HAL_RCC_GetPCLK1Freq>
 800162a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800162e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001638:	f040 810c 	bne.w	8001854 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800163c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001640:	2200      	movs	r2, #0
 8001642:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001646:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800164a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800164e:	4622      	mov	r2, r4
 8001650:	462b      	mov	r3, r5
 8001652:	1891      	adds	r1, r2, r2
 8001654:	65b9      	str	r1, [r7, #88]	; 0x58
 8001656:	415b      	adcs	r3, r3
 8001658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800165a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800165e:	4621      	mov	r1, r4
 8001660:	eb12 0801 	adds.w	r8, r2, r1
 8001664:	4629      	mov	r1, r5
 8001666:	eb43 0901 	adc.w	r9, r3, r1
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800167a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800167e:	4690      	mov	r8, r2
 8001680:	4699      	mov	r9, r3
 8001682:	4623      	mov	r3, r4
 8001684:	eb18 0303 	adds.w	r3, r8, r3
 8001688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800168c:	462b      	mov	r3, r5
 800168e:	eb49 0303 	adc.w	r3, r9, r3
 8001692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80016a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80016a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80016aa:	460b      	mov	r3, r1
 80016ac:	18db      	adds	r3, r3, r3
 80016ae:	653b      	str	r3, [r7, #80]	; 0x50
 80016b0:	4613      	mov	r3, r2
 80016b2:	eb42 0303 	adc.w	r3, r2, r3
 80016b6:	657b      	str	r3, [r7, #84]	; 0x54
 80016b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80016bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80016c0:	f7fe fde6 	bl	8000290 <__aeabi_uldivmod>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4b61      	ldr	r3, [pc, #388]	; (8001850 <UART_SetConfig+0x2d4>)
 80016ca:	fba3 2302 	umull	r2, r3, r3, r2
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	011c      	lsls	r4, r3, #4
 80016d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016d6:	2200      	movs	r2, #0
 80016d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80016dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80016e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80016e4:	4642      	mov	r2, r8
 80016e6:	464b      	mov	r3, r9
 80016e8:	1891      	adds	r1, r2, r2
 80016ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80016ec:	415b      	adcs	r3, r3
 80016ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016f4:	4641      	mov	r1, r8
 80016f6:	eb12 0a01 	adds.w	sl, r2, r1
 80016fa:	4649      	mov	r1, r9
 80016fc:	eb43 0b01 	adc.w	fp, r3, r1
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800170c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001714:	4692      	mov	sl, r2
 8001716:	469b      	mov	fp, r3
 8001718:	4643      	mov	r3, r8
 800171a:	eb1a 0303 	adds.w	r3, sl, r3
 800171e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001722:	464b      	mov	r3, r9
 8001724:	eb4b 0303 	adc.w	r3, fp, r3
 8001728:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800172c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001738:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800173c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001740:	460b      	mov	r3, r1
 8001742:	18db      	adds	r3, r3, r3
 8001744:	643b      	str	r3, [r7, #64]	; 0x40
 8001746:	4613      	mov	r3, r2
 8001748:	eb42 0303 	adc.w	r3, r2, r3
 800174c:	647b      	str	r3, [r7, #68]	; 0x44
 800174e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001752:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001756:	f7fe fd9b 	bl	8000290 <__aeabi_uldivmod>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4611      	mov	r1, r2
 8001760:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <UART_SetConfig+0x2d4>)
 8001762:	fba3 2301 	umull	r2, r3, r3, r1
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2264      	movs	r2, #100	; 0x64
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	1acb      	subs	r3, r1, r3
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001776:	4b36      	ldr	r3, [pc, #216]	; (8001850 <UART_SetConfig+0x2d4>)
 8001778:	fba3 2302 	umull	r2, r3, r3, r2
 800177c:	095b      	lsrs	r3, r3, #5
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001784:	441c      	add	r4, r3
 8001786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800178a:	2200      	movs	r2, #0
 800178c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001790:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001794:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001798:	4642      	mov	r2, r8
 800179a:	464b      	mov	r3, r9
 800179c:	1891      	adds	r1, r2, r2
 800179e:	63b9      	str	r1, [r7, #56]	; 0x38
 80017a0:	415b      	adcs	r3, r3
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017a8:	4641      	mov	r1, r8
 80017aa:	1851      	adds	r1, r2, r1
 80017ac:	6339      	str	r1, [r7, #48]	; 0x30
 80017ae:	4649      	mov	r1, r9
 80017b0:	414b      	adcs	r3, r1
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80017c0:	4659      	mov	r1, fp
 80017c2:	00cb      	lsls	r3, r1, #3
 80017c4:	4651      	mov	r1, sl
 80017c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017ca:	4651      	mov	r1, sl
 80017cc:	00ca      	lsls	r2, r1, #3
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	4603      	mov	r3, r0
 80017d4:	4642      	mov	r2, r8
 80017d6:	189b      	adds	r3, r3, r2
 80017d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80017dc:	464b      	mov	r3, r9
 80017de:	460a      	mov	r2, r1
 80017e0:	eb42 0303 	adc.w	r3, r2, r3
 80017e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80017f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80017f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80017fc:	460b      	mov	r3, r1
 80017fe:	18db      	adds	r3, r3, r3
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
 8001802:	4613      	mov	r3, r2
 8001804:	eb42 0303 	adc.w	r3, r2, r3
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800180a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800180e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001812:	f7fe fd3d 	bl	8000290 <__aeabi_uldivmod>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <UART_SetConfig+0x2d4>)
 800181c:	fba3 1302 	umull	r1, r3, r3, r2
 8001820:	095b      	lsrs	r3, r3, #5
 8001822:	2164      	movs	r1, #100	; 0x64
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	3332      	adds	r3, #50	; 0x32
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <UART_SetConfig+0x2d4>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	095b      	lsrs	r3, r3, #5
 8001836:	f003 0207 	and.w	r2, r3, #7
 800183a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4422      	add	r2, r4
 8001842:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001844:	e106      	b.n	8001a54 <UART_SetConfig+0x4d8>
 8001846:	bf00      	nop
 8001848:	40011000 	.word	0x40011000
 800184c:	40011400 	.word	0x40011400
 8001850:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001858:	2200      	movs	r2, #0
 800185a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800185e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001862:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001866:	4642      	mov	r2, r8
 8001868:	464b      	mov	r3, r9
 800186a:	1891      	adds	r1, r2, r2
 800186c:	6239      	str	r1, [r7, #32]
 800186e:	415b      	adcs	r3, r3
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
 8001872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001876:	4641      	mov	r1, r8
 8001878:	1854      	adds	r4, r2, r1
 800187a:	4649      	mov	r1, r9
 800187c:	eb43 0501 	adc.w	r5, r3, r1
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	00eb      	lsls	r3, r5, #3
 800188a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800188e:	00e2      	lsls	r2, r4, #3
 8001890:	4614      	mov	r4, r2
 8001892:	461d      	mov	r5, r3
 8001894:	4643      	mov	r3, r8
 8001896:	18e3      	adds	r3, r4, r3
 8001898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800189c:	464b      	mov	r3, r9
 800189e:	eb45 0303 	adc.w	r3, r5, r3
 80018a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80018a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80018c2:	4629      	mov	r1, r5
 80018c4:	008b      	lsls	r3, r1, #2
 80018c6:	4621      	mov	r1, r4
 80018c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018cc:	4621      	mov	r1, r4
 80018ce:	008a      	lsls	r2, r1, #2
 80018d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80018d4:	f7fe fcdc 	bl	8000290 <__aeabi_uldivmod>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4b60      	ldr	r3, [pc, #384]	; (8001a60 <UART_SetConfig+0x4e4>)
 80018de:	fba3 2302 	umull	r2, r3, r3, r2
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	011c      	lsls	r4, r3, #4
 80018e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80018ea:	2200      	movs	r2, #0
 80018ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80018f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80018f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80018f8:	4642      	mov	r2, r8
 80018fa:	464b      	mov	r3, r9
 80018fc:	1891      	adds	r1, r2, r2
 80018fe:	61b9      	str	r1, [r7, #24]
 8001900:	415b      	adcs	r3, r3
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001908:	4641      	mov	r1, r8
 800190a:	1851      	adds	r1, r2, r1
 800190c:	6139      	str	r1, [r7, #16]
 800190e:	4649      	mov	r1, r9
 8001910:	414b      	adcs	r3, r1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001920:	4659      	mov	r1, fp
 8001922:	00cb      	lsls	r3, r1, #3
 8001924:	4651      	mov	r1, sl
 8001926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800192a:	4651      	mov	r1, sl
 800192c:	00ca      	lsls	r2, r1, #3
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	4603      	mov	r3, r0
 8001934:	4642      	mov	r2, r8
 8001936:	189b      	adds	r3, r3, r2
 8001938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800193c:	464b      	mov	r3, r9
 800193e:	460a      	mov	r2, r1
 8001940:	eb42 0303 	adc.w	r3, r2, r3
 8001944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	67bb      	str	r3, [r7, #120]	; 0x78
 8001952:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001960:	4649      	mov	r1, r9
 8001962:	008b      	lsls	r3, r1, #2
 8001964:	4641      	mov	r1, r8
 8001966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800196a:	4641      	mov	r1, r8
 800196c:	008a      	lsls	r2, r1, #2
 800196e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001972:	f7fe fc8d 	bl	8000290 <__aeabi_uldivmod>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4611      	mov	r1, r2
 800197c:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <UART_SetConfig+0x4e4>)
 800197e:	fba3 2301 	umull	r2, r3, r3, r1
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2264      	movs	r2, #100	; 0x64
 8001986:	fb02 f303 	mul.w	r3, r2, r3
 800198a:	1acb      	subs	r3, r1, r3
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	3332      	adds	r3, #50	; 0x32
 8001990:	4a33      	ldr	r2, [pc, #204]	; (8001a60 <UART_SetConfig+0x4e4>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199c:	441c      	add	r4, r3
 800199e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019a2:	2200      	movs	r2, #0
 80019a4:	673b      	str	r3, [r7, #112]	; 0x70
 80019a6:	677a      	str	r2, [r7, #116]	; 0x74
 80019a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80019ac:	4642      	mov	r2, r8
 80019ae:	464b      	mov	r3, r9
 80019b0:	1891      	adds	r1, r2, r2
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	415b      	adcs	r3, r3
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019bc:	4641      	mov	r1, r8
 80019be:	1851      	adds	r1, r2, r1
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	4649      	mov	r1, r9
 80019c4:	414b      	adcs	r3, r1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80019d4:	4659      	mov	r1, fp
 80019d6:	00cb      	lsls	r3, r1, #3
 80019d8:	4651      	mov	r1, sl
 80019da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019de:	4651      	mov	r1, sl
 80019e0:	00ca      	lsls	r2, r1, #3
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	4603      	mov	r3, r0
 80019e8:	4642      	mov	r2, r8
 80019ea:	189b      	adds	r3, r3, r2
 80019ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80019ee:	464b      	mov	r3, r9
 80019f0:	460a      	mov	r2, r1
 80019f2:	eb42 0303 	adc.w	r3, r2, r3
 80019f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80019f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	663b      	str	r3, [r7, #96]	; 0x60
 8001a02:	667a      	str	r2, [r7, #100]	; 0x64
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001a10:	4649      	mov	r1, r9
 8001a12:	008b      	lsls	r3, r1, #2
 8001a14:	4641      	mov	r1, r8
 8001a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a1a:	4641      	mov	r1, r8
 8001a1c:	008a      	lsls	r2, r1, #2
 8001a1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001a22:	f7fe fc35 	bl	8000290 <__aeabi_uldivmod>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <UART_SetConfig+0x4e4>)
 8001a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a30:	095b      	lsrs	r3, r3, #5
 8001a32:	2164      	movs	r1, #100	; 0x64
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	3332      	adds	r3, #50	; 0x32
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <UART_SetConfig+0x4e4>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	095b      	lsrs	r3, r3, #5
 8001a46:	f003 020f 	and.w	r2, r3, #15
 8001a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4422      	add	r2, r4
 8001a52:	609a      	str	r2, [r3, #8]
}
 8001a54:	bf00      	nop
 8001a56:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a60:	51eb851f 	.word	0x51eb851f

08001a64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f103 0208 	add.w	r2, r3, #8
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f103 0208 	add.w	r2, r3, #8
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f103 0208 	add.w	r2, r3, #8
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	601a      	str	r2, [r3, #0]
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d103      	bne.n	8001b26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e00c      	b.n	8001b40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3308      	adds	r3, #8
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e002      	b.n	8001b34 <vListInsert+0x2e>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d2f6      	bcs.n	8001b2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	601a      	str	r2, [r3, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6892      	ldr	r2, [r2, #8]
 8001b8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6852      	ldr	r2, [r2, #4]
 8001b98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d103      	bne.n	8001bac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	1e5a      	subs	r2, r3, #1
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10a      	bne.n	8001bf6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be4:	f383 8811 	msr	BASEPRI, r3
 8001be8:	f3bf 8f6f 	isb	sy
 8001bec:	f3bf 8f4f 	dsb	sy
 8001bf0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001bf2:	bf00      	nop
 8001bf4:	e7fe      	b.n	8001bf4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001bf6:	f002 f91d 	bl	8003e34 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c02:	68f9      	ldr	r1, [r7, #12]
 8001c04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	441a      	add	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c26:	3b01      	subs	r3, #1
 8001c28:	68f9      	ldr	r1, [r7, #12]
 8001c2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	441a      	add	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	22ff      	movs	r2, #255	; 0xff
 8001c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	22ff      	movs	r2, #255	; 0xff
 8001c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d114      	bne.n	8001c76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01a      	beq.n	8001c8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3310      	adds	r3, #16
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f001 f997 	bl	8002f8c <xTaskRemoveFromEventList>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d012      	beq.n	8001c8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <xQueueGenericReset+0xcc>)
 8001c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	f3bf 8f4f 	dsb	sy
 8001c70:	f3bf 8f6f 	isb	sy
 8001c74:	e009      	b.n	8001c8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3310      	adds	r3, #16
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fef2 	bl	8001a64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3324      	adds	r3, #36	; 0x24
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff feed 	bl	8001a64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001c8a:	f002 f903 	bl	8003e94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	e000ed04 	.word	0xe000ed04

08001c9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10a      	bne.n	8001cc6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb4:	f383 8811 	msr	BASEPRI, r3
 8001cb8:	f3bf 8f6f 	isb	sy
 8001cbc:	f3bf 8f4f 	dsb	sy
 8001cc0:	613b      	str	r3, [r7, #16]
}
 8001cc2:	bf00      	nop
 8001cc4:	e7fe      	b.n	8001cc4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	e004      	b.n	8001cdc <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	3354      	adds	r3, #84	; 0x54
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 f9d1 	bl	8004088 <pvPortMalloc>
 8001ce6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	3354      	adds	r3, #84	; 0x54
 8001cf2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001cf4:	79fa      	ldrb	r2, [r7, #7]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 f805 	bl	8001d10 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001d06:	69bb      	ldr	r3, [r7, #24]
	}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e002      	b.n	8001d32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d3e:	2101      	movs	r1, #1
 8001d40:	69b8      	ldr	r0, [r7, #24]
 8001d42:	f7ff ff43 	bl	8001bcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2200      	movs	r2, #0
 8001d52:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	68f9      	ldr	r1, [r7, #12]
 8001d5a:	2073      	movs	r0, #115	; 0x73
 8001d5c:	f003 f956 	bl	800500c <SEGGER_SYSVIEW_RecordU32x3>
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00e      	beq.n	8001d94 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f81c 	bl	8001dcc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001da6:	2301      	movs	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	461a      	mov	r2, r3
 8001db2:	6939      	ldr	r1, [r7, #16]
 8001db4:	6978      	ldr	r0, [r7, #20]
 8001db6:	f7ff ff71 	bl	8001c9c <xQueueGenericCreate>
 8001dba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff ffd3 	bl	8001d68 <prvInitialiseMutex>

		return pxNewQueue;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
	}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b090      	sub	sp, #64	; 0x40
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10a      	bne.n	8001dfe <xQueueGenericSend+0x32>
	__asm volatile
 8001de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dec:	f383 8811 	msr	BASEPRI, r3
 8001df0:	f3bf 8f6f 	isb	sy
 8001df4:	f3bf 8f4f 	dsb	sy
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001dfa:	bf00      	nop
 8001dfc:	e7fe      	b.n	8001dfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d103      	bne.n	8001e0c <xQueueGenericSend+0x40>
 8001e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <xQueueGenericSend+0x44>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <xQueueGenericSend+0x46>
 8001e10:	2300      	movs	r3, #0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10a      	bne.n	8001e2c <xQueueGenericSend+0x60>
	__asm volatile
 8001e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e1a:	f383 8811 	msr	BASEPRI, r3
 8001e1e:	f3bf 8f6f 	isb	sy
 8001e22:	f3bf 8f4f 	dsb	sy
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001e28:	bf00      	nop
 8001e2a:	e7fe      	b.n	8001e2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d103      	bne.n	8001e3a <xQueueGenericSend+0x6e>
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <xQueueGenericSend+0x72>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <xQueueGenericSend+0x74>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10a      	bne.n	8001e5a <xQueueGenericSend+0x8e>
	__asm volatile
 8001e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e48:	f383 8811 	msr	BASEPRI, r3
 8001e4c:	f3bf 8f6f 	isb	sy
 8001e50:	f3bf 8f4f 	dsb	sy
 8001e54:	623b      	str	r3, [r7, #32]
}
 8001e56:	bf00      	nop
 8001e58:	e7fe      	b.n	8001e58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e5a:	f001 fa3f 	bl	80032dc <xTaskGetSchedulerState>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <xQueueGenericSend+0x9e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <xQueueGenericSend+0xa2>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <xQueueGenericSend+0xa4>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10a      	bne.n	8001e8a <xQueueGenericSend+0xbe>
	__asm volatile
 8001e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e78:	f383 8811 	msr	BASEPRI, r3
 8001e7c:	f3bf 8f6f 	isb	sy
 8001e80:	f3bf 8f4f 	dsb	sy
 8001e84:	61fb      	str	r3, [r7, #28]
}
 8001e86:	bf00      	nop
 8001e88:	e7fe      	b.n	8001e88 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e8a:	f001 ffd3 	bl	8003e34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d302      	bcc.n	8001ea0 <xQueueGenericSend+0xd4>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d149      	bne.n	8001f34 <xQueueGenericSend+0x168>
			{
				traceQUEUE_SEND( pxQueue );
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fe3e 	bl	8005b24 <SEGGER_SYSVIEW_ShrinkId>
 8001ea8:	4601      	mov	r1, r0
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	205a      	movs	r0, #90	; 0x5a
 8001eb4:	f003 f920 	bl	80050f8 <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	68b9      	ldr	r1, [r7, #8]
 8001ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ebe:	f000 fa8b 	bl	80023d8 <prvCopyDataToQueue>
 8001ec2:	62f8      	str	r0, [r7, #44]	; 0x2c

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8001ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00f      	beq.n	8001eec <xQueueGenericSend+0x120>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8001ecc:	6839      	ldr	r1, [r7, #0]
 8001ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ed0:	f000 fc06 	bl	80026e0 <prvNotifyQueueSetContainer>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d028      	beq.n	8001f2c <xQueueGenericSend+0x160>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8001eda:	4b57      	ldr	r3, [pc, #348]	; (8002038 <xQueueGenericSend+0x26c>)
 8001edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	f3bf 8f4f 	dsb	sy
 8001ee6:	f3bf 8f6f 	isb	sy
 8001eea:	e01f      	b.n	8001f2c <xQueueGenericSend+0x160>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d010      	beq.n	8001f16 <xQueueGenericSend+0x14a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef6:	3324      	adds	r3, #36	; 0x24
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f001 f847 	bl	8002f8c <xTaskRemoveFromEventList>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <xQueueGenericSend+0x160>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8001f04:	4b4c      	ldr	r3, [pc, #304]	; (8002038 <xQueueGenericSend+0x26c>)
 8001f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	f3bf 8f4f 	dsb	sy
 8001f10:	f3bf 8f6f 	isb	sy
 8001f14:	e00a      	b.n	8001f2c <xQueueGenericSend+0x160>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8001f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <xQueueGenericSend+0x160>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8001f1c:	4b46      	ldr	r3, [pc, #280]	; (8002038 <xQueueGenericSend+0x26c>)
 8001f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f3bf 8f4f 	dsb	sy
 8001f28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001f2c:	f001 ffb2 	bl	8003e94 <vPortExitCritical>
				return pdPASS;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e07d      	b.n	8002030 <xQueueGenericSend+0x264>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d110      	bne.n	8001f5c <xQueueGenericSend+0x190>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f3a:	f001 ffab 	bl	8003e94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8001f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f40:	4618      	mov	r0, r3
 8001f42:	f003 fdef 	bl	8005b24 <SEGGER_SYSVIEW_ShrinkId>
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4601      	mov	r1, r0
 8001f52:	205a      	movs	r0, #90	; 0x5a
 8001f54:	f003 f8d0 	bl	80050f8 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e069      	b.n	8002030 <xQueueGenericSend+0x264>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <xQueueGenericSend+0x1a4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4618      	mov	r0, r3
 8001f68:	f001 f876 	bl	8003058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f70:	f001 ff90 	bl	8003e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f74:	f000 fdbc 	bl	8002af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f78:	f001 ff5c 	bl	8003e34 <vPortEnterCritical>
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f82:	b25b      	sxtb	r3, r3
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d103      	bne.n	8001f92 <xQueueGenericSend+0x1c6>
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9e:	d103      	bne.n	8001fa8 <xQueueGenericSend+0x1dc>
 8001fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fa8:	f001 ff74 	bl	8003e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fac:	1d3a      	adds	r2, r7, #4
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f001 f865 	bl	8003084 <xTaskCheckForTimeOut>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d124      	bne.n	800200a <xQueueGenericSend+0x23e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fc2:	f000 fb0f 	bl	80025e4 <prvIsQueueFull>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d018      	beq.n	8001ffe <xQueueGenericSend+0x232>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fce:	3310      	adds	r3, #16
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 ff87 	bl	8002ee8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fdc:	f000 fa8c 	bl	80024f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001fe0:	f000 fd94 	bl	8002b0c <xTaskResumeAll>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f47f af4f 	bne.w	8001e8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <xQueueGenericSend+0x26c>)
 8001fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f3bf 8f4f 	dsb	sy
 8001ff8:	f3bf 8f6f 	isb	sy
 8001ffc:	e745      	b.n	8001e8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002000:	f000 fa7a 	bl	80024f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002004:	f000 fd82 	bl	8002b0c <xTaskResumeAll>
 8002008:	e73f      	b.n	8001e8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800200a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800200c:	f000 fa74 	bl	80024f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002010:	f000 fd7c 	bl	8002b0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8002014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002016:	4618      	mov	r0, r3
 8002018:	f003 fd84 	bl	8005b24 <SEGGER_SYSVIEW_ShrinkId>
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	460b      	mov	r3, r1
 8002026:	4601      	mov	r1, r0
 8002028:	205a      	movs	r0, #90	; 0x5a
 800202a:	f003 f865 	bl	80050f8 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800202e:	2300      	movs	r3, #0
		}
	}
}
 8002030:	4618      	mov	r0, r3
 8002032:	3738      	adds	r7, #56	; 0x38
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	e000ed04 	.word	0xe000ed04

0800203c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08e      	sub	sp, #56	; 0x38
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800204e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10a      	bne.n	800206a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002058:	f383 8811 	msr	BASEPRI, r3
 800205c:	f3bf 8f6f 	isb	sy
 8002060:	f3bf 8f4f 	dsb	sy
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002066:	bf00      	nop
 8002068:	e7fe      	b.n	8002068 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d103      	bne.n	8002078 <xQueueGenericSendFromISR+0x3c>
 8002070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <xQueueGenericSendFromISR+0x40>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <xQueueGenericSendFromISR+0x42>
 800207c:	2300      	movs	r3, #0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10a      	bne.n	8002098 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002086:	f383 8811 	msr	BASEPRI, r3
 800208a:	f3bf 8f6f 	isb	sy
 800208e:	f3bf 8f4f 	dsb	sy
 8002092:	623b      	str	r3, [r7, #32]
}
 8002094:	bf00      	nop
 8002096:	e7fe      	b.n	8002096 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d103      	bne.n	80020a6 <xQueueGenericSendFromISR+0x6a>
 800209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <xQueueGenericSendFromISR+0x6e>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <xQueueGenericSendFromISR+0x70>
 80020aa:	2300      	movs	r3, #0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10a      	bne.n	80020c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80020b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b4:	f383 8811 	msr	BASEPRI, r3
 80020b8:	f3bf 8f6f 	isb	sy
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	61fb      	str	r3, [r7, #28]
}
 80020c2:	bf00      	nop
 80020c4:	e7fe      	b.n	80020c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020c6:	f001 ff9f 	bl	8004008 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80020ca:	f3ef 8211 	mrs	r2, BASEPRI
 80020ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d2:	f383 8811 	msr	BASEPRI, r3
 80020d6:	f3bf 8f6f 	isb	sy
 80020da:	f3bf 8f4f 	dsb	sy
 80020de:	61ba      	str	r2, [r7, #24]
 80020e0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80020e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d302      	bcc.n	80020f8 <xQueueGenericSendFromISR+0xbc>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d148      	bne.n	800218a <xQueueGenericSendFromISR+0x14e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	4618      	mov	r0, r3
 8002106:	f003 fd0d 	bl	8005b24 <SEGGER_SYSVIEW_ShrinkId>
 800210a:	4601      	mov	r1, r0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	461a      	mov	r2, r3
 8002110:	2060      	movs	r0, #96	; 0x60
 8002112:	f002 ff21 	bl	8004f58 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800211c:	f000 f95c 	bl	80023d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002120:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d124      	bne.n	8002174 <xQueueGenericSendFromISR+0x138>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 800212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00d      	beq.n	800214e <xQueueGenericSendFromISR+0x112>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8002132:	6839      	ldr	r1, [r7, #0]
 8002134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002136:	f000 fad3 	bl	80026e0 <prvNotifyQueueSetContainer>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d021      	beq.n	8002184 <xQueueGenericSendFromISR+0x148>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01e      	beq.n	8002184 <xQueueGenericSendFromISR+0x148>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e01a      	b.n	8002184 <xQueueGenericSendFromISR+0x148>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	2b00      	cmp	r3, #0
 8002154:	d016      	beq.n	8002184 <xQueueGenericSendFromISR+0x148>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002158:	3324      	adds	r3, #36	; 0x24
 800215a:	4618      	mov	r0, r3
 800215c:	f000 ff16 	bl	8002f8c <xTaskRemoveFromEventList>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00e      	beq.n	8002184 <xQueueGenericSendFromISR+0x148>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00b      	beq.n	8002184 <xQueueGenericSendFromISR+0x148>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	e007      	b.n	8002184 <xQueueGenericSendFromISR+0x148>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002174:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002178:	3301      	adds	r3, #1
 800217a:	b2db      	uxtb	r3, r3
 800217c:	b25a      	sxtb	r2, r3
 800217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002184:	2301      	movs	r3, #1
 8002186:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002188:	e00b      	b.n	80021a2 <xQueueGenericSendFromISR+0x166>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	4618      	mov	r0, r3
 800218e:	f003 fcc9 	bl	8005b24 <SEGGER_SYSVIEW_ShrinkId>
 8002192:	4601      	mov	r1, r0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	461a      	mov	r2, r3
 8002198:	2060      	movs	r0, #96	; 0x60
 800219a:	f002 fedd 	bl	8004f58 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	637b      	str	r3, [r7, #52]	; 0x34
 80021a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80021ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80021ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3738      	adds	r7, #56	; 0x38
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b08f      	sub	sp, #60	; 0x3c
 80021bc:	af02      	add	r7, sp, #8
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10a      	bne.n	80021e8 <xQueueReceive+0x30>
	__asm volatile
 80021d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	623b      	str	r3, [r7, #32]
}
 80021e4:	bf00      	nop
 80021e6:	e7fe      	b.n	80021e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d103      	bne.n	80021f6 <xQueueReceive+0x3e>
 80021ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <xQueueReceive+0x42>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <xQueueReceive+0x44>
 80021fa:	2300      	movs	r3, #0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <xQueueReceive+0x5e>
	__asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	61fb      	str	r3, [r7, #28]
}
 8002212:	bf00      	nop
 8002214:	e7fe      	b.n	8002214 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002216:	f001 f861 	bl	80032dc <xTaskGetSchedulerState>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <xQueueReceive+0x6e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <xQueueReceive+0x72>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <xQueueReceive+0x74>
 800222a:	2300      	movs	r3, #0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <xQueueReceive+0x8e>
	__asm volatile
 8002230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002234:	f383 8811 	msr	BASEPRI, r3
 8002238:	f3bf 8f6f 	isb	sy
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	61bb      	str	r3, [r7, #24]
}
 8002242:	bf00      	nop
 8002244:	e7fe      	b.n	8002244 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002246:	f001 fdf5 	bl	8003e34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	2b00      	cmp	r3, #0
 8002254:	d02f      	beq.n	80022b6 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800225a:	f000 f927 	bl	80024ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002260:	4618      	mov	r0, r3
 8002262:	f003 fc5f 	bl	8005b24 <SEGGER_SYSVIEW_ShrinkId>
 8002266:	4604      	mov	r4, r0
 8002268:	2000      	movs	r0, #0
 800226a:	f003 fc5b 	bl	8005b24 <SEGGER_SYSVIEW_ShrinkId>
 800226e:	4602      	mov	r2, r0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2101      	movs	r1, #1
 8002274:	9100      	str	r1, [sp, #0]
 8002276:	4621      	mov	r1, r4
 8002278:	205c      	movs	r0, #92	; 0x5c
 800227a:	f002 ff3d 	bl	80050f8 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	1e5a      	subs	r2, r3, #1
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00f      	beq.n	80022ae <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002290:	3310      	adds	r3, #16
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fe7a 	bl	8002f8c <xTaskRemoveFromEventList>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800229e:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <xQueueReceive+0x21c>)
 80022a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f3bf 8f4f 	dsb	sy
 80022aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80022ae:	f001 fdf1 	bl	8003e94 <vPortExitCritical>
				return pdPASS;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e08a      	b.n	80023cc <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d113      	bne.n	80022e4 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80022bc:	f001 fdea 	bl	8003e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80022c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 fc2e 	bl	8005b24 <SEGGER_SYSVIEW_ShrinkId>
 80022c8:	4604      	mov	r4, r0
 80022ca:	2000      	movs	r0, #0
 80022cc:	f003 fc2a 	bl	8005b24 <SEGGER_SYSVIEW_ShrinkId>
 80022d0:	4602      	mov	r2, r0
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2101      	movs	r1, #1
 80022d6:	9100      	str	r1, [sp, #0]
 80022d8:	4621      	mov	r1, r4
 80022da:	205c      	movs	r0, #92	; 0x5c
 80022dc:	f002 ff0c 	bl	80050f8 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e073      	b.n	80023cc <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80022ea:	f107 0310 	add.w	r3, r7, #16
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 feb2 	bl	8003058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80022f8:	f001 fdcc 	bl	8003e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022fc:	f000 fbf8 	bl	8002af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002300:	f001 fd98 	bl	8003e34 <vPortEnterCritical>
 8002304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800230a:	b25b      	sxtb	r3, r3
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d103      	bne.n	800231a <xQueueReceive+0x162>
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002320:	b25b      	sxtb	r3, r3
 8002322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002326:	d103      	bne.n	8002330 <xQueueReceive+0x178>
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002330:	f001 fdb0 	bl	8003e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002334:	1d3a      	adds	r2, r7, #4
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fea1 	bl	8003084 <xTaskCheckForTimeOut>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d124      	bne.n	8002392 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800234a:	f000 f935 	bl	80025b8 <prvIsQueueEmpty>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d018      	beq.n	8002386 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002356:	3324      	adds	r3, #36	; 0x24
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fdc3 	bl	8002ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002364:	f000 f8c8 	bl	80024f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002368:	f000 fbd0 	bl	8002b0c <xTaskResumeAll>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	f47f af69 	bne.w	8002246 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <xQueueReceive+0x21c>)
 8002376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	e75f      	b.n	8002246 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002388:	f000 f8b6 	bl	80024f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800238c:	f000 fbbe 	bl	8002b0c <xTaskResumeAll>
 8002390:	e759      	b.n	8002246 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002394:	f000 f8b0 	bl	80024f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002398:	f000 fbb8 	bl	8002b0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800239c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800239e:	f000 f90b 	bl	80025b8 <prvIsQueueEmpty>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f43f af4e 	beq.w	8002246 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80023aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 fbb9 	bl	8005b24 <SEGGER_SYSVIEW_ShrinkId>
 80023b2:	4604      	mov	r4, r0
 80023b4:	2000      	movs	r0, #0
 80023b6:	f003 fbb5 	bl	8005b24 <SEGGER_SYSVIEW_ShrinkId>
 80023ba:	4602      	mov	r2, r0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2101      	movs	r1, #1
 80023c0:	9100      	str	r1, [sp, #0]
 80023c2:	4621      	mov	r1, r4
 80023c4:	205c      	movs	r0, #92	; 0x5c
 80023c6:	f002 fe97 	bl	80050f8 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80023ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3734      	adds	r7, #52	; 0x34
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd90      	pop	{r4, r7, pc}
 80023d4:	e000ed04 	.word	0xe000ed04

080023d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d14d      	bne.n	800249a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 ff88 	bl	8003318 <xTaskPriorityDisinherit>
 8002408:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	e043      	b.n	800249a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d119      	bne.n	800244c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6898      	ldr	r0, [r3, #8]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	461a      	mov	r2, r3
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	f003 fea6 	bl	8006174 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	441a      	add	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	429a      	cmp	r2, r3
 8002440:	d32b      	bcc.n	800249a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	e026      	b.n	800249a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	68d8      	ldr	r0, [r3, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	461a      	mov	r2, r3
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	f003 fe8c 	bl	8006174 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	425b      	negs	r3, r3
 8002466:	441a      	add	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d207      	bcs.n	8002488 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	425b      	negs	r3, r3
 8002482:	441a      	add	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d105      	bne.n	800249a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	3b01      	subs	r3, #1
 8002498:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80024a2:	697b      	ldr	r3, [r7, #20]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d018      	beq.n	80024f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	441a      	add	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d303      	bcc.n	80024e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68d9      	ldr	r1, [r3, #12]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	461a      	mov	r2, r3
 80024ea:	6838      	ldr	r0, [r7, #0]
 80024ec:	f003 fe42 	bl	8006174 <memcpy>
	}
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002500:	f001 fc98 	bl	8003e34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800250a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800250c:	e01f      	b.n	800254e <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 8002516:	2100      	movs	r1, #0
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f8e1 	bl	80026e0 <prvNotifyQueueSetContainer>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d010      	beq.n	8002546 <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8002524:	f000 fe10 	bl	8003148 <vTaskMissedYield>
 8002528:	e00d      	b.n	8002546 <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d012      	beq.n	8002558 <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3324      	adds	r3, #36	; 0x24
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fd28 	bl	8002f8c <xTaskRemoveFromEventList>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8002542:	f000 fe01 	bl	8003148 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	3b01      	subs	r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800254e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002552:	2b00      	cmp	r3, #0
 8002554:	dcdb      	bgt.n	800250e <prvUnlockQueue+0x16>
 8002556:	e000      	b.n	800255a <prvUnlockQueue+0x62>
						break;
 8002558:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	22ff      	movs	r2, #255	; 0xff
 800255e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002562:	f001 fc97 	bl	8003e94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002566:	f001 fc65 	bl	8003e34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002570:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002572:	e011      	b.n	8002598 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d012      	beq.n	80025a2 <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3310      	adds	r3, #16
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fd03 	bl	8002f8c <xTaskRemoveFromEventList>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 800258c:	f000 fddc 	bl	8003148 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002590:	7bbb      	ldrb	r3, [r7, #14]
 8002592:	3b01      	subs	r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002598:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800259c:	2b00      	cmp	r3, #0
 800259e:	dce9      	bgt.n	8002574 <prvUnlockQueue+0x7c>
 80025a0:	e000      	b.n	80025a4 <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 80025a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	22ff      	movs	r2, #255	; 0xff
 80025a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80025ac:	f001 fc72 	bl	8003e94 <vPortExitCritical>
}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025c0:	f001 fc38 	bl	8003e34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80025cc:	2301      	movs	r3, #1
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	e001      	b.n	80025d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80025d6:	f001 fc5d 	bl	8003e94 <vPortExitCritical>

	return xReturn;
 80025da:	68fb      	ldr	r3, [r7, #12]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025ec:	f001 fc22 	bl	8003e34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d102      	bne.n	8002602 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80025fc:	2301      	movs	r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	e001      	b.n	8002606 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002606:	f001 fc45 	bl	8003e94 <vPortExitCritical>

	return xReturn;
 800260a:	68fb      	ldr	r3, [r7, #12]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	e01e      	b.n	8002662 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002624:	4a13      	ldr	r2, [pc, #76]	; (8002674 <vQueueAddToRegistry+0x60>)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d115      	bne.n	800265c <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002630:	4910      	ldr	r1, [pc, #64]	; (8002674 <vQueueAddToRegistry+0x60>)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800263a:	4a0e      	ldr	r2, [pc, #56]	; (8002674 <vQueueAddToRegistry+0x60>)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4618      	mov	r0, r3
 800264a:	f003 fa6b 	bl	8005b24 <SEGGER_SYSVIEW_ShrinkId>
 800264e:	4601      	mov	r1, r0
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	2071      	movs	r0, #113	; 0x71
 8002656:	f002 fc7f 	bl	8004f58 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800265a:	e006      	b.n	800266a <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3301      	adds	r3, #1
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b07      	cmp	r3, #7
 8002666:	d9dd      	bls.n	8002624 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000014c 	.word	0x2000014c

08002678 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002688:	f001 fbd4 	bl	8003e34 <vPortEnterCritical>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002692:	b25b      	sxtb	r3, r3
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d103      	bne.n	80026a2 <vQueueWaitForMessageRestricted+0x2a>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026a8:	b25b      	sxtb	r3, r3
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ae:	d103      	bne.n	80026b8 <vQueueWaitForMessageRestricted+0x40>
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026b8:	f001 fbec 	bl	8003e94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3324      	adds	r3, #36	; 0x24
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fc2f 	bl	8002f30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80026d2:	6978      	ldr	r0, [r7, #20]
 80026d4:	f7ff ff10 	bl	80024f8 <prvUnlockQueue>
	}
 80026d8:	bf00      	nop
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ee:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10a      	bne.n	8002710 <prvNotifyQueueSetContainer+0x30>
	__asm volatile
 80026fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fe:	f383 8811 	msr	BASEPRI, r3
 8002702:	f3bf 8f6f 	isb	sy
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	613b      	str	r3, [r7, #16]
}
 800270c:	bf00      	nop
 800270e:	e7fe      	b.n	800270e <prvNotifyQueueSetContainer+0x2e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002718:	429a      	cmp	r2, r3
 800271a:	d30a      	bcc.n	8002732 <prvNotifyQueueSetContainer+0x52>
	__asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	60fb      	str	r3, [r7, #12]
}
 800272e:	bf00      	nop
 8002730:	e7fe      	b.n	8002730 <prvNotifyQueueSetContainer+0x50>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	429a      	cmp	r2, r3
 800273c:	d231      	bcs.n	80027a2 <prvNotifyQueueSetContainer+0xc2>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002744:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4618      	mov	r0, r3
 800274a:	f003 f9eb 	bl	8005b24 <SEGGER_SYSVIEW_ShrinkId>
 800274e:	4601      	mov	r1, r0
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2300      	movs	r3, #0
 8002756:	2200      	movs	r2, #0
 8002758:	205a      	movs	r0, #90	; 0x5a
 800275a:	f002 fccd 	bl	80050f8 <SEGGER_SYSVIEW_RecordU32x4>

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 800275e:	1d3b      	adds	r3, r7, #4
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	69b8      	ldr	r0, [r7, #24]
 8002766:	f7ff fe37 	bl	80023d8 <prvCopyDataToQueue>
 800276a:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 800276c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d10e      	bne.n	8002794 <prvNotifyQueueSetContainer+0xb4>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	2b00      	cmp	r3, #0
 800277c:	d011      	beq.n	80027a2 <prvNotifyQueueSetContainer+0xc2>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	3324      	adds	r3, #36	; 0x24
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fc02 	bl	8002f8c <xTaskRemoveFromEventList>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <prvNotifyQueueSetContainer+0xc2>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 800278e:	2301      	movs	r3, #1
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	e006      	b.n	80027a2 <prvNotifyQueueSetContainer+0xc2>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	3301      	adds	r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	b25a      	sxtb	r2, r3
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80027a2:	69fb      	ldr	r3, [r7, #28]
	}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08c      	sub	sp, #48	; 0x30
 80027b0:	af04      	add	r7, sp, #16
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 fc61 	bl	8004088 <pvPortMalloc>
 80027c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00e      	beq.n	80027ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80027ce:	2058      	movs	r0, #88	; 0x58
 80027d0:	f001 fc5a 	bl	8004088 <pvPortMalloc>
 80027d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
 80027e2:	e005      	b.n	80027f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027e4:	6978      	ldr	r0, [r7, #20]
 80027e6:	f001 fd13 	bl	8004210 <vPortFree>
 80027ea:	e001      	b.n	80027f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d013      	beq.n	800281e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027f6:	88fa      	ldrh	r2, [r7, #6]
 80027f8:	2300      	movs	r3, #0
 80027fa:	9303      	str	r3, [sp, #12]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f80e 	bl	800282e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002812:	69f8      	ldr	r0, [r7, #28]
 8002814:	f000 f892 	bl	800293c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002818:	2301      	movs	r3, #1
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	e002      	b.n	8002824 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002824:	69bb      	ldr	r3, [r7, #24]
	}
 8002826:	4618      	mov	r0, r3
 8002828:	3720      	adds	r7, #32
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b088      	sub	sp, #32
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	461a      	mov	r2, r3
 8002846:	21a5      	movs	r1, #165	; 0xa5
 8002848:	f003 fc60 	bl	800610c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002856:	3b01      	subs	r3, #1
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	f023 0307 	bic.w	r3, r3, #7
 8002864:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	617b      	str	r3, [r7, #20]
}
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	e012      	b.n	80028b2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	4413      	add	r3, r2
 8002892:	7819      	ldrb	r1, [r3, #0]
 8002894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	3334      	adds	r3, #52	; 0x34
 800289c:	460a      	mov	r2, r1
 800289e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	4413      	add	r3, r2
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d006      	beq.n	80028ba <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	3301      	adds	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	2b09      	cmp	r3, #9
 80028b6:	d9e9      	bls.n	800288c <prvInitialiseNewTask+0x5e>
 80028b8:	e000      	b.n	80028bc <prvInitialiseNewTask+0x8e>
		{
			break;
 80028ba:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d901      	bls.n	80028ce <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028ca:	2304      	movs	r3, #4
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d8:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	2200      	movs	r2, #0
 80028de:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e2:	3304      	adds	r3, #4
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff f8dd 	bl	8001aa4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	3318      	adds	r3, #24
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff f8d8 	bl	8001aa4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	f1c3 0205 	rsb	r2, r3, #5
 8002900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002902:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002908:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	2200      	movs	r2, #0
 800290e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	68f9      	ldr	r1, [r7, #12]
 800291c:	69b8      	ldr	r0, [r7, #24]
 800291e:	f001 f95f 	bl	8003be0 <pxPortInitialiseStack>
 8002922:	4602      	mov	r2, r0
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002932:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002934:	bf00      	nop
 8002936:	3720      	adds	r7, #32
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800293c:	b5b0      	push	{r4, r5, r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af02      	add	r7, sp, #8
 8002942:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002944:	f001 fa76 	bl	8003e34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002948:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <prvAddNewTaskToReadyList+0xfc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3301      	adds	r3, #1
 800294e:	4a3a      	ldr	r2, [pc, #232]	; (8002a38 <prvAddNewTaskToReadyList+0xfc>)
 8002950:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002952:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <prvAddNewTaskToReadyList+0x100>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800295a:	4a38      	ldr	r2, [pc, #224]	; (8002a3c <prvAddNewTaskToReadyList+0x100>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002960:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <prvAddNewTaskToReadyList+0xfc>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d110      	bne.n	800298a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002968:	f000 fc14 	bl	8003194 <prvInitialiseTaskLists>
 800296c:	e00d      	b.n	800298a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800296e:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <prvAddNewTaskToReadyList+0x104>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002976:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <prvAddNewTaskToReadyList+0x100>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	429a      	cmp	r2, r3
 8002982:	d802      	bhi.n	800298a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002984:	4a2d      	ldr	r2, [pc, #180]	; (8002a3c <prvAddNewTaskToReadyList+0x100>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800298a:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <prvAddNewTaskToReadyList+0x108>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3301      	adds	r3, #1
 8002990:	4a2c      	ldr	r2, [pc, #176]	; (8002a44 <prvAddNewTaskToReadyList+0x108>)
 8002992:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <prvAddNewTaskToReadyList+0x108>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d016      	beq.n	80029d0 <prvAddNewTaskToReadyList+0x94>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f002 ff97 	bl	80058d8 <SEGGER_SYSVIEW_OnTaskCreate>
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	461d      	mov	r5, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	461c      	mov	r4, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	1ae3      	subs	r3, r4, r3
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	462b      	mov	r3, r5
 80029cc:	f003 fae4 	bl	8005f98 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 f804 	bl	80059e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	2201      	movs	r2, #1
 80029de:	409a      	lsls	r2, r3
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <prvAddNewTaskToReadyList+0x10c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	4a18      	ldr	r2, [pc, #96]	; (8002a48 <prvAddNewTaskToReadyList+0x10c>)
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <prvAddNewTaskToReadyList+0x110>)
 80029f8:	441a      	add	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3304      	adds	r3, #4
 80029fe:	4619      	mov	r1, r3
 8002a00:	4610      	mov	r0, r2
 8002a02:	f7ff f85c 	bl	8001abe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a06:	f001 fa45 	bl	8003e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <prvAddNewTaskToReadyList+0x104>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00e      	beq.n	8002a30 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <prvAddNewTaskToReadyList+0x100>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d207      	bcs.n	8002a30 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <prvAddNewTaskToReadyList+0x114>)
 8002a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bdb0      	pop	{r4, r5, r7, pc}
 8002a38:	20000264 	.word	0x20000264
 8002a3c:	2000018c 	.word	0x2000018c
 8002a40:	20000270 	.word	0x20000270
 8002a44:	20000280 	.word	0x20000280
 8002a48:	2000026c 	.word	0x2000026c
 8002a4c:	20000190 	.word	0x20000190
 8002a50:	e000ed04 	.word	0xe000ed04

08002a54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <vTaskStartScheduler+0x84>)
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2300      	movs	r3, #0
 8002a64:	2282      	movs	r2, #130	; 0x82
 8002a66:	491d      	ldr	r1, [pc, #116]	; (8002adc <vTaskStartScheduler+0x88>)
 8002a68:	481d      	ldr	r0, [pc, #116]	; (8002ae0 <vTaskStartScheduler+0x8c>)
 8002a6a:	f7ff fe9f 	bl	80027ac <xTaskCreate>
 8002a6e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d102      	bne.n	8002a7c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8002a76:	f000 fd51 	bl	800351c <xTimerCreateTimerTask>
 8002a7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d116      	bne.n	8002ab0 <vTaskStartScheduler+0x5c>
	__asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	60bb      	str	r3, [r7, #8]
}
 8002a94:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a96:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <vTaskStartScheduler+0x90>)
 8002a98:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <vTaskStartScheduler+0x94>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <vTaskStartScheduler+0x98>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002aaa:	f001 f921 	bl	8003cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002aae:	e00e      	b.n	8002ace <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	d10a      	bne.n	8002ace <vTaskStartScheduler+0x7a>
	__asm volatile
 8002ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	607b      	str	r3, [r7, #4]
}
 8002aca:	bf00      	nop
 8002acc:	e7fe      	b.n	8002acc <vTaskStartScheduler+0x78>
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000288 	.word	0x20000288
 8002adc:	08006bb8 	.word	0x08006bb8
 8002ae0:	08003161 	.word	0x08003161
 8002ae4:	20000284 	.word	0x20000284
 8002ae8:	20000270 	.word	0x20000270
 8002aec:	20000268 	.word	0x20000268

08002af0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <vTaskSuspendAll+0x18>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	4a03      	ldr	r2, [pc, #12]	; (8002b08 <vTaskSuspendAll+0x18>)
 8002afc:	6013      	str	r3, [r2, #0]
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	2000028c 	.word	0x2000028c

08002b0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b1a:	4b43      	ldr	r3, [pc, #268]	; (8002c28 <xTaskResumeAll+0x11c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <xTaskResumeAll+0x2c>
	__asm volatile
 8002b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	603b      	str	r3, [r7, #0]
}
 8002b34:	bf00      	nop
 8002b36:	e7fe      	b.n	8002b36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b38:	f001 f97c 	bl	8003e34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002b3c:	4b3a      	ldr	r3, [pc, #232]	; (8002c28 <xTaskResumeAll+0x11c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	4a39      	ldr	r2, [pc, #228]	; (8002c28 <xTaskResumeAll+0x11c>)
 8002b44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b46:	4b38      	ldr	r3, [pc, #224]	; (8002c28 <xTaskResumeAll+0x11c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d165      	bne.n	8002c1a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b4e:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <xTaskResumeAll+0x120>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d061      	beq.n	8002c1a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b56:	e032      	b.n	8002bbe <xTaskResumeAll+0xb2>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b58:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <xTaskResumeAll+0x124>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3318      	adds	r3, #24
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff f807 	bl	8001b78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff f802 	bl	8001b78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 ff32 	bl	80059e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	2201      	movs	r2, #1
 8002b82:	409a      	lsls	r2, r3
 8002b84:	4b2b      	ldr	r3, [pc, #172]	; (8002c34 <xTaskResumeAll+0x128>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	4a2a      	ldr	r2, [pc, #168]	; (8002c34 <xTaskResumeAll+0x128>)
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4a27      	ldr	r2, [pc, #156]	; (8002c38 <xTaskResumeAll+0x12c>)
 8002b9c:	441a      	add	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	f7fe ff8a 	bl	8001abe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bae:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <xTaskResumeAll+0x130>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d302      	bcc.n	8002bbe <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <xTaskResumeAll+0x134>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <xTaskResumeAll+0x124>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1c8      	bne.n	8002b58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002bcc:	f000 fb60 	bl	8003290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <xTaskResumeAll+0x138>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d010      	beq.n	8002bfe <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002bdc:	f000 f858 	bl	8002c90 <xTaskIncrementTick>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <xTaskResumeAll+0x134>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1f1      	bne.n	8002bdc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <xTaskResumeAll+0x138>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <xTaskResumeAll+0x134>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c06:	2301      	movs	r3, #1
 8002c08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <xTaskResumeAll+0x13c>)
 8002c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c1a:	f001 f93b 	bl	8003e94 <vPortExitCritical>

	return xAlreadyYielded;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	2000028c 	.word	0x2000028c
 8002c2c:	20000264 	.word	0x20000264
 8002c30:	20000224 	.word	0x20000224
 8002c34:	2000026c 	.word	0x2000026c
 8002c38:	20000190 	.word	0x20000190
 8002c3c:	2000018c 	.word	0x2000018c
 8002c40:	20000278 	.word	0x20000278
 8002c44:	20000274 	.word	0x20000274
 8002c48:	e000ed04 	.word	0xe000ed04

08002c4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <xTaskGetTickCount+0x1c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002c58:	687b      	ldr	r3, [r7, #4]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000268 	.word	0x20000268

08002c6c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c72:	f001 f9c9 	bl	8004008 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <xTaskGetTickCountFromISR+0x20>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c80:	683b      	ldr	r3, [r7, #0]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000268 	.word	0x20000268

08002c90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c9a:	4b53      	ldr	r3, [pc, #332]	; (8002de8 <xTaskIncrementTick+0x158>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 8091 	bne.w	8002dc6 <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ca4:	4b51      	ldr	r3, [pc, #324]	; (8002dec <xTaskIncrementTick+0x15c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002cac:	4a4f      	ldr	r2, [pc, #316]	; (8002dec <xTaskIncrementTick+0x15c>)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d120      	bne.n	8002cfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002cb8:	4b4d      	ldr	r3, [pc, #308]	; (8002df0 <xTaskIncrementTick+0x160>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8002cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	603b      	str	r3, [r7, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	e7fe      	b.n	8002cd6 <xTaskIncrementTick+0x46>
 8002cd8:	4b45      	ldr	r3, [pc, #276]	; (8002df0 <xTaskIncrementTick+0x160>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b45      	ldr	r3, [pc, #276]	; (8002df4 <xTaskIncrementTick+0x164>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a43      	ldr	r2, [pc, #268]	; (8002df0 <xTaskIncrementTick+0x160>)
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	4a43      	ldr	r2, [pc, #268]	; (8002df4 <xTaskIncrementTick+0x164>)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b42      	ldr	r3, [pc, #264]	; (8002df8 <xTaskIncrementTick+0x168>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	4a41      	ldr	r2, [pc, #260]	; (8002df8 <xTaskIncrementTick+0x168>)
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	f000 facb 	bl	8003290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002cfa:	4b40      	ldr	r3, [pc, #256]	; (8002dfc <xTaskIncrementTick+0x16c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d351      	bcc.n	8002da8 <xTaskIncrementTick+0x118>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d04:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <xTaskIncrementTick+0x160>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <xTaskIncrementTick+0x82>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <xTaskIncrementTick+0x84>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d18:	4b38      	ldr	r3, [pc, #224]	; (8002dfc <xTaskIncrementTick+0x16c>)
 8002d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1e:	601a      	str	r2, [r3, #0]
					break;
 8002d20:	e042      	b.n	8002da8 <xTaskIncrementTick+0x118>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d22:	4b33      	ldr	r3, [pc, #204]	; (8002df0 <xTaskIncrementTick+0x160>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d203      	bcs.n	8002d42 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d3a:	4a30      	ldr	r2, [pc, #192]	; (8002dfc <xTaskIncrementTick+0x16c>)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6013      	str	r3, [r2, #0]
						break;
 8002d40:	e032      	b.n	8002da8 <xTaskIncrementTick+0x118>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	3304      	adds	r3, #4
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe ff16 	bl	8001b78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d004      	beq.n	8002d5e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	3318      	adds	r3, #24
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe ff0d 	bl	8001b78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 fe3d 	bl	80059e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <xTaskIncrementTick+0x170>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <xTaskIncrementTick+0x170>)
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4a1f      	ldr	r2, [pc, #124]	; (8002e04 <xTaskIncrementTick+0x174>)
 8002d86:	441a      	add	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f7fe fe95 	bl	8001abe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <xTaskIncrementTick+0x178>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d3b0      	bcc.n	8002d04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002da2:	2301      	movs	r3, #1
 8002da4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002da6:	e7ad      	b.n	8002d04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <xTaskIncrementTick+0x178>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dae:	4915      	ldr	r1, [pc, #84]	; (8002e04 <xTaskIncrementTick+0x174>)
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d907      	bls.n	8002dd0 <xTaskIncrementTick+0x140>
			{
				xSwitchRequired = pdTRUE;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e004      	b.n	8002dd0 <xTaskIncrementTick+0x140>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <xTaskIncrementTick+0x17c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	4a0f      	ldr	r2, [pc, #60]	; (8002e0c <xTaskIncrementTick+0x17c>)
 8002dce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <xTaskIncrementTick+0x180>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <xTaskIncrementTick+0x14c>
		{
			xSwitchRequired = pdTRUE;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002ddc:	697b      	ldr	r3, [r7, #20]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	2000028c 	.word	0x2000028c
 8002dec:	20000268 	.word	0x20000268
 8002df0:	2000021c 	.word	0x2000021c
 8002df4:	20000220 	.word	0x20000220
 8002df8:	2000027c 	.word	0x2000027c
 8002dfc:	20000284 	.word	0x20000284
 8002e00:	2000026c 	.word	0x2000026c
 8002e04:	20000190 	.word	0x20000190
 8002e08:	2000018c 	.word	0x2000018c
 8002e0c:	20000274 	.word	0x20000274
 8002e10:	20000278 	.word	0x20000278

08002e14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <vTaskSwitchContext+0xbc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e22:	4b2c      	ldr	r3, [pc, #176]	; (8002ed4 <vTaskSwitchContext+0xc0>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e28:	e04d      	b.n	8002ec6 <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 8002e2a:	4b2a      	ldr	r3, [pc, #168]	; (8002ed4 <vTaskSwitchContext+0xc0>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002e30:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <vTaskSwitchContext+0xc4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e3e:	7afb      	ldrb	r3, [r7, #11]
 8002e40:	f1c3 031f 	rsb	r3, r3, #31
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	4925      	ldr	r1, [pc, #148]	; (8002edc <vTaskSwitchContext+0xc8>)
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	607b      	str	r3, [r7, #4]
}
 8002e6c:	bf00      	nop
 8002e6e:	e7fe      	b.n	8002e6e <vTaskSwitchContext+0x5a>
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4a18      	ldr	r2, [pc, #96]	; (8002edc <vTaskSwitchContext+0xc8>)
 8002e7c:	4413      	add	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	3308      	adds	r3, #8
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d104      	bne.n	8002ea0 <vTaskSwitchContext+0x8c>
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <vTaskSwitchContext+0xcc>)
 8002ea8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <vTaskSwitchContext+0xcc>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <vTaskSwitchContext+0xd0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d102      	bne.n	8002ebc <vTaskSwitchContext+0xa8>
 8002eb6:	f002 fcf3 	bl	80058a0 <SEGGER_SYSVIEW_OnIdle>
}
 8002eba:	e004      	b.n	8002ec6 <vTaskSwitchContext+0xb2>
		traceTASK_SWITCHED_IN();
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <vTaskSwitchContext+0xcc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f002 fd4b 	bl	800595c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002ec6:	bf00      	nop
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	2000028c 	.word	0x2000028c
 8002ed4:	20000278 	.word	0x20000278
 8002ed8:	2000026c 	.word	0x2000026c
 8002edc:	20000190 	.word	0x20000190
 8002ee0:	2000018c 	.word	0x2000018c
 8002ee4:	20000288 	.word	0x20000288

08002ee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efc:	f383 8811 	msr	BASEPRI, r3
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	60fb      	str	r3, [r7, #12]
}
 8002f0a:	bf00      	nop
 8002f0c:	e7fe      	b.n	8002f0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f0e:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <vTaskPlaceOnEventList+0x44>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3318      	adds	r3, #24
 8002f14:	4619      	mov	r1, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fe fdf5 	bl	8001b06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	6838      	ldr	r0, [r7, #0]
 8002f20:	f000 fa84 	bl	800342c <prvAddCurrentTaskToDelayedList>
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	2000018c 	.word	0x2000018c

08002f30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10a      	bne.n	8002f58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	617b      	str	r3, [r7, #20]
}
 8002f54:	bf00      	nop
 8002f56:	e7fe      	b.n	8002f56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <vTaskPlaceOnEventListRestricted+0x58>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3318      	adds	r3, #24
 8002f5e:	4619      	mov	r1, r3
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f7fe fdac 	bl	8001abe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002f72:	2024      	movs	r0, #36	; 0x24
 8002f74:	f001 ff96 	bl	8004ea4 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	68b8      	ldr	r0, [r7, #8]
 8002f7c:	f000 fa56 	bl	800342c <prvAddCurrentTaskToDelayedList>
	}
 8002f80:	bf00      	nop
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	2000018c 	.word	0x2000018c

08002f8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	60fb      	str	r3, [r7, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	e7fe      	b.n	8002fb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	3318      	adds	r3, #24
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe fddb 	bl	8001b78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <xTaskRemoveFromEventList+0xb4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d120      	bne.n	800300c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fdd2 	bl	8001b78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f002 fd02 	bl	80059e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	4b17      	ldr	r3, [pc, #92]	; (8003044 <xTaskRemoveFromEventList+0xb8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	4a16      	ldr	r2, [pc, #88]	; (8003044 <xTaskRemoveFromEventList+0xb8>)
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4a13      	ldr	r2, [pc, #76]	; (8003048 <xTaskRemoveFromEventList+0xbc>)
 8002ffc:	441a      	add	r2, r3
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	3304      	adds	r3, #4
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f7fe fd5a 	bl	8001abe <vListInsertEnd>
 800300a:	e005      	b.n	8003018 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	3318      	adds	r3, #24
 8003010:	4619      	mov	r1, r3
 8003012:	480e      	ldr	r0, [pc, #56]	; (800304c <xTaskRemoveFromEventList+0xc0>)
 8003014:	f7fe fd53 	bl	8001abe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <xTaskRemoveFromEventList+0xc4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	429a      	cmp	r2, r3
 8003024:	d905      	bls.n	8003032 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003026:	2301      	movs	r3, #1
 8003028:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <xTaskRemoveFromEventList+0xc8>)
 800302c:	2201      	movs	r2, #1
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e001      	b.n	8003036 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003036:	697b      	ldr	r3, [r7, #20]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	2000028c 	.word	0x2000028c
 8003044:	2000026c 	.word	0x2000026c
 8003048:	20000190 	.word	0x20000190
 800304c:	20000224 	.word	0x20000224
 8003050:	2000018c 	.word	0x2000018c
 8003054:	20000278 	.word	0x20000278

08003058 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <vTaskInternalSetTimeOutState+0x24>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <vTaskInternalSetTimeOutState+0x28>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	605a      	str	r2, [r3, #4]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	2000027c 	.word	0x2000027c
 8003080:	20000268 	.word	0x20000268

08003084 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	613b      	str	r3, [r7, #16]
}
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10a      	bne.n	80030c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	60fb      	str	r3, [r7, #12]
}
 80030c2:	bf00      	nop
 80030c4:	e7fe      	b.n	80030c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80030c6:	f000 feb5 	bl	8003e34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80030ca:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <xTaskCheckForTimeOut+0xbc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e2:	d102      	bne.n	80030ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	e023      	b.n	8003132 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <xTaskCheckForTimeOut+0xc0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d007      	beq.n	8003106 <xTaskCheckForTimeOut+0x82>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d302      	bcc.n	8003106 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003100:	2301      	movs	r3, #1
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	e015      	b.n	8003132 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	429a      	cmp	r2, r3
 800310e:	d20b      	bcs.n	8003128 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad2      	subs	r2, r2, r3
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff9b 	bl	8003058 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	e004      	b.n	8003132 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800312e:	2301      	movs	r3, #1
 8003130:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003132:	f000 feaf 	bl	8003e94 <vPortExitCritical>

	return xReturn;
 8003136:	69fb      	ldr	r3, [r7, #28]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3720      	adds	r7, #32
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000268 	.word	0x20000268
 8003144:	2000027c 	.word	0x2000027c

08003148 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <vTaskMissedYield+0x14>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]
}
 8003152:	bf00      	nop
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	20000278 	.word	0x20000278

08003160 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003168:	f000 f854 	bl	8003214 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <prvIdleTask+0x2c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d907      	bls.n	8003184 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <prvIdleTask+0x30>)
 8003176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003184:	f7fd fb0c 	bl	80007a0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003188:	e7ee      	b.n	8003168 <prvIdleTask+0x8>
 800318a:	bf00      	nop
 800318c:	20000190 	.word	0x20000190
 8003190:	e000ed04 	.word	0xe000ed04

08003194 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	e00c      	b.n	80031ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <prvInitialiseTaskLists+0x60>)
 80031ac:	4413      	add	r3, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fc58 	bl	8001a64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3301      	adds	r3, #1
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d9ef      	bls.n	80031a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031c0:	480d      	ldr	r0, [pc, #52]	; (80031f8 <prvInitialiseTaskLists+0x64>)
 80031c2:	f7fe fc4f 	bl	8001a64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031c6:	480d      	ldr	r0, [pc, #52]	; (80031fc <prvInitialiseTaskLists+0x68>)
 80031c8:	f7fe fc4c 	bl	8001a64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80031cc:	480c      	ldr	r0, [pc, #48]	; (8003200 <prvInitialiseTaskLists+0x6c>)
 80031ce:	f7fe fc49 	bl	8001a64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80031d2:	480c      	ldr	r0, [pc, #48]	; (8003204 <prvInitialiseTaskLists+0x70>)
 80031d4:	f7fe fc46 	bl	8001a64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80031d8:	480b      	ldr	r0, [pc, #44]	; (8003208 <prvInitialiseTaskLists+0x74>)
 80031da:	f7fe fc43 	bl	8001a64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80031de:	4b0b      	ldr	r3, [pc, #44]	; (800320c <prvInitialiseTaskLists+0x78>)
 80031e0:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <prvInitialiseTaskLists+0x64>)
 80031e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031e4:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <prvInitialiseTaskLists+0x7c>)
 80031e6:	4a05      	ldr	r2, [pc, #20]	; (80031fc <prvInitialiseTaskLists+0x68>)
 80031e8:	601a      	str	r2, [r3, #0]
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000190 	.word	0x20000190
 80031f8:	200001f4 	.word	0x200001f4
 80031fc:	20000208 	.word	0x20000208
 8003200:	20000224 	.word	0x20000224
 8003204:	20000238 	.word	0x20000238
 8003208:	20000250 	.word	0x20000250
 800320c:	2000021c 	.word	0x2000021c
 8003210:	20000220 	.word	0x20000220

08003214 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800321a:	e019      	b.n	8003250 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800321c:	f000 fe0a 	bl	8003e34 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <prvCheckTasksWaitingTermination+0x50>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
 800322c:	4618      	mov	r0, r3
 800322e:	f7fe fca3 	bl	8001b78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <prvCheckTasksWaitingTermination+0x54>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3b01      	subs	r3, #1
 8003238:	4a0b      	ldr	r2, [pc, #44]	; (8003268 <prvCheckTasksWaitingTermination+0x54>)
 800323a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <prvCheckTasksWaitingTermination+0x58>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3b01      	subs	r3, #1
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <prvCheckTasksWaitingTermination+0x58>)
 8003244:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003246:	f000 fe25 	bl	8003e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f810 	bl	8003270 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <prvCheckTasksWaitingTermination+0x58>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e1      	bne.n	800321c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000238 	.word	0x20000238
 8003268:	20000264 	.word	0x20000264
 800326c:	2000024c 	.word	0x2000024c

08003270 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	4618      	mov	r0, r3
 800327e:	f000 ffc7 	bl	8004210 <vPortFree>
			vPortFree( pxTCB );
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 ffc4 	bl	8004210 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <prvResetNextTaskUnblockTime+0x44>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <prvResetNextTaskUnblockTime+0x14>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <prvResetNextTaskUnblockTime+0x16>
 80032a4:	2300      	movs	r3, #0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d004      	beq.n	80032b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <prvResetNextTaskUnblockTime+0x48>)
 80032ac:	f04f 32ff 	mov.w	r2, #4294967295
 80032b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032b2:	e008      	b.n	80032c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032b4:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <prvResetNextTaskUnblockTime+0x44>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4a05      	ldr	r2, [pc, #20]	; (80032d8 <prvResetNextTaskUnblockTime+0x48>)
 80032c4:	6013      	str	r3, [r2, #0]
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	2000021c 	.word	0x2000021c
 80032d8:	20000284 	.word	0x20000284

080032dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80032e2:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <xTaskGetSchedulerState+0x34>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032ea:	2301      	movs	r3, #1
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	e008      	b.n	8003302 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <xTaskGetSchedulerState+0x38>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80032f8:	2302      	movs	r3, #2
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	e001      	b.n	8003302 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003302:	687b      	ldr	r3, [r7, #4]
	}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	20000270 	.word	0x20000270
 8003314:	2000028c 	.word	0x2000028c

08003318 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d073      	beq.n	8003416 <xTaskPriorityDisinherit+0xfe>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800332e:	4b3c      	ldr	r3, [pc, #240]	; (8003420 <xTaskPriorityDisinherit+0x108>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	429a      	cmp	r2, r3
 8003336:	d00a      	beq.n	800334e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	60fb      	str	r3, [r7, #12]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10a      	bne.n	800336c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	60bb      	str	r3, [r7, #8]
}
 8003368:	bf00      	nop
 800336a:	e7fe      	b.n	800336a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003370:	1e5a      	subs	r2, r3, #1
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800337e:	429a      	cmp	r2, r3
 8003380:	d049      	beq.n	8003416 <xTaskPriorityDisinherit+0xfe>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d145      	bne.n	8003416 <xTaskPriorityDisinherit+0xfe>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	3304      	adds	r3, #4
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe fbf2 	bl	8001b78 <uxListRemove>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d115      	bne.n	80033c6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339e:	4921      	ldr	r1, [pc, #132]	; (8003424 <xTaskPriorityDisinherit+0x10c>)
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <xTaskPriorityDisinherit+0xae>
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	2201      	movs	r2, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43da      	mvns	r2, r3
 80033bc:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <xTaskPriorityDisinherit+0x110>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4013      	ands	r3, r2
 80033c2:	4a19      	ldr	r2, [pc, #100]	; (8003428 <xTaskPriorityDisinherit+0x110>)
 80033c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4619      	mov	r1, r3
 80033ca:	204a      	movs	r0, #74	; 0x4a
 80033cc:	f001 fd88 	bl	8004ee0 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	f1c3 0205 	rsb	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	2201      	movs	r2, #1
 80033ea:	409a      	lsls	r2, r3
 80033ec:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <xTaskPriorityDisinherit+0x110>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	4a0d      	ldr	r2, [pc, #52]	; (8003428 <xTaskPriorityDisinherit+0x110>)
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4a08      	ldr	r2, [pc, #32]	; (8003424 <xTaskPriorityDisinherit+0x10c>)
 8003404:	441a      	add	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	3304      	adds	r3, #4
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f7fe fb56 	bl	8001abe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003412:	2301      	movs	r3, #1
 8003414:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003416:	697b      	ldr	r3, [r7, #20]
	}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	2000018c 	.word	0x2000018c
 8003424:	20000190 	.word	0x20000190
 8003428:	2000026c 	.word	0x2000026c

0800342c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003436:	4b32      	ldr	r3, [pc, #200]	; (8003500 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800343c:	4b31      	ldr	r3, [pc, #196]	; (8003504 <prvAddCurrentTaskToDelayedList+0xd8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3304      	adds	r3, #4
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fb98 	bl	8001b78 <uxListRemove>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10b      	bne.n	8003466 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800344e:	4b2d      	ldr	r3, [pc, #180]	; (8003504 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	2201      	movs	r2, #1
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43da      	mvns	r2, r3
 800345c:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <prvAddCurrentTaskToDelayedList+0xdc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4013      	ands	r3, r2
 8003462:	4a29      	ldr	r2, [pc, #164]	; (8003508 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003464:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d110      	bne.n	8003490 <prvAddCurrentTaskToDelayedList+0x64>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003474:	4b23      	ldr	r3, [pc, #140]	; (8003504 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	211b      	movs	r1, #27
 800347a:	4618      	mov	r0, r3
 800347c:	f002 faf2 	bl	8005a64 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003480:	4b20      	ldr	r3, [pc, #128]	; (8003504 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3304      	adds	r3, #4
 8003486:	4619      	mov	r1, r3
 8003488:	4820      	ldr	r0, [pc, #128]	; (800350c <prvAddCurrentTaskToDelayedList+0xe0>)
 800348a:	f7fe fb18 	bl	8001abe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800348e:	e032      	b.n	80034f6 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003498:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <prvAddCurrentTaskToDelayedList+0xd8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d20f      	bcs.n	80034c8 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80034a8:	4b16      	ldr	r3, [pc, #88]	; (8003504 <prvAddCurrentTaskToDelayedList+0xd8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2104      	movs	r1, #4
 80034ae:	4618      	mov	r0, r3
 80034b0:	f002 fad8 	bl	8005a64 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034b4:	4b16      	ldr	r3, [pc, #88]	; (8003510 <prvAddCurrentTaskToDelayedList+0xe4>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <prvAddCurrentTaskToDelayedList+0xd8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3304      	adds	r3, #4
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f7fe fb20 	bl	8001b06 <vListInsert>
}
 80034c6:	e016      	b.n	80034f6 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 80034c8:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <prvAddCurrentTaskToDelayedList+0xd8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2104      	movs	r1, #4
 80034ce:	4618      	mov	r0, r3
 80034d0:	f002 fac8 	bl	8005a64 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034d4:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <prvAddCurrentTaskToDelayedList+0xd8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3304      	adds	r3, #4
 80034de:	4619      	mov	r1, r3
 80034e0:	4610      	mov	r0, r2
 80034e2:	f7fe fb10 	bl	8001b06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <prvAddCurrentTaskToDelayedList+0xec>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d202      	bcs.n	80034f6 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80034f0:	4a09      	ldr	r2, [pc, #36]	; (8003518 <prvAddCurrentTaskToDelayedList+0xec>)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	6013      	str	r3, [r2, #0]
}
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000268 	.word	0x20000268
 8003504:	2000018c 	.word	0x2000018c
 8003508:	2000026c 	.word	0x2000026c
 800350c:	20000250 	.word	0x20000250
 8003510:	20000220 	.word	0x20000220
 8003514:	2000021c 	.word	0x2000021c
 8003518:	20000284 	.word	0x20000284

0800351c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003526:	f000 fae5 	bl	8003af4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800352a:	4b11      	ldr	r3, [pc, #68]	; (8003570 <xTimerCreateTimerTask+0x54>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <xTimerCreateTimerTask+0x58>)
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	2302      	movs	r3, #2
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2300      	movs	r3, #0
 800353c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003540:	490d      	ldr	r1, [pc, #52]	; (8003578 <xTimerCreateTimerTask+0x5c>)
 8003542:	480e      	ldr	r0, [pc, #56]	; (800357c <xTimerCreateTimerTask+0x60>)
 8003544:	f7ff f932 	bl	80027ac <xTaskCreate>
 8003548:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10a      	bne.n	8003566 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	603b      	str	r3, [r7, #0]
}
 8003562:	bf00      	nop
 8003564:	e7fe      	b.n	8003564 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8003566:	687b      	ldr	r3, [r7, #4]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	200002c0 	.word	0x200002c0
 8003574:	200002c4 	.word	0x200002c4
 8003578:	08006bc0 	.word	0x08006bc0
 800357c:	0800373d 	.word	0x0800373d

08003580 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800358e:	202c      	movs	r0, #44	; 0x2c
 8003590:	f000 fd7a 	bl	8004088 <pvPortMalloc>
 8003594:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f805 	bl	80035ba <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80035b0:	697b      	ldr	r3, [r7, #20]
	}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10a      	bne.n	80035e4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80035ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	617b      	str	r3, [r7, #20]
}
 80035e0:	bf00      	nop
 80035e2:	e7fe      	b.n	80035e2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d015      	beq.n	8003616 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80035ea:	f000 fa83 	bl	8003af4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	6a3a      	ldr	r2, [r7, #32]
 800360a:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	3304      	adds	r3, #4
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe fa47 	bl	8001aa4 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003616:	bf00      	nop
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	; 0x28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800362e:	2300      	movs	r3, #0
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	623b      	str	r3, [r7, #32]
}
 800364a:	bf00      	nop
 800364c:	e7fe      	b.n	800364c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <xTimerGenericCommand+0x98>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d02a      	beq.n	80036ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b05      	cmp	r3, #5
 8003666:	dc18      	bgt.n	800369a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003668:	f7ff fe38 	bl	80032dc <xTaskGetSchedulerState>
 800366c:	4603      	mov	r3, r0
 800366e:	2b02      	cmp	r3, #2
 8003670:	d109      	bne.n	8003686 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003672:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <xTimerGenericCommand+0x98>)
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	f107 0114 	add.w	r1, r7, #20
 800367a:	2300      	movs	r3, #0
 800367c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800367e:	f7fe fba5 	bl	8001dcc <xQueueGenericSend>
 8003682:	6278      	str	r0, [r7, #36]	; 0x24
 8003684:	e012      	b.n	80036ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <xTimerGenericCommand+0x98>)
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	f107 0114 	add.w	r1, r7, #20
 800368e:	2300      	movs	r3, #0
 8003690:	2200      	movs	r2, #0
 8003692:	f7fe fb9b 	bl	8001dcc <xQueueGenericSend>
 8003696:	6278      	str	r0, [r7, #36]	; 0x24
 8003698:	e008      	b.n	80036ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800369a:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <xTimerGenericCommand+0x98>)
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	f107 0114 	add.w	r1, r7, #20
 80036a2:	2300      	movs	r3, #0
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	f7fe fcc9 	bl	800203c <xQueueGenericSendFromISR>
 80036aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	200002c0 	.word	0x200002c0

080036bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036c6:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <prvProcessExpiredTimer+0x7c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe fa4f 	bl	8001b78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d122      	bne.n	8003728 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	18d1      	adds	r1, r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	6978      	ldr	r0, [r7, #20]
 80036f0:	f000 f8c8 	bl	8003884 <prvInsertTimerInActiveList>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d016      	beq.n	8003728 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80036fa:	2300      	movs	r3, #0
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	2300      	movs	r3, #0
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	2100      	movs	r1, #0
 8003704:	6978      	ldr	r0, [r7, #20]
 8003706:	f7ff ff8b 	bl	8003620 <xTimerGenericCommand>
 800370a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	60fb      	str	r3, [r7, #12]
}
 8003724:	bf00      	nop
 8003726:	e7fe      	b.n	8003726 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	6978      	ldr	r0, [r7, #20]
 800372e:	4798      	blx	r3
}
 8003730:	bf00      	nop
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200002b8 	.word	0x200002b8

0800373c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003744:	f107 0308 	add.w	r3, r7, #8
 8003748:	4618      	mov	r0, r3
 800374a:	f000 f857 	bl	80037fc <prvGetNextExpireTime>
 800374e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4619      	mov	r1, r3
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f803 	bl	8003760 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800375a:	f000 f8d5 	bl	8003908 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800375e:	e7f1      	b.n	8003744 <prvTimerTask+0x8>

08003760 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800376a:	f7ff f9c1 	bl	8002af0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800376e:	f107 0308 	add.w	r3, r7, #8
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f866 	bl	8003844 <prvSampleTimeNow>
 8003778:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d130      	bne.n	80037e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <prvProcessTimerOrBlockTask+0x3c>
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	429a      	cmp	r2, r3
 800378c:	d806      	bhi.n	800379c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800378e:	f7ff f9bd 	bl	8002b0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003792:	68f9      	ldr	r1, [r7, #12]
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ff91 	bl	80036bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800379a:	e024      	b.n	80037e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <prvProcessTimerOrBlockTask+0x90>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <prvProcessTimerOrBlockTask+0x94>)
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	4619      	mov	r1, r3
 80037c2:	f7fe ff59 	bl	8002678 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80037c6:	f7ff f9a1 	bl	8002b0c <xTaskResumeAll>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <prvProcessTimerOrBlockTask+0x98>)
 80037d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	f3bf 8f6f 	isb	sy
}
 80037e0:	e001      	b.n	80037e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80037e2:	f7ff f993 	bl	8002b0c <xTaskResumeAll>
}
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	200002bc 	.word	0x200002bc
 80037f4:	200002c0 	.word	0x200002c0
 80037f8:	e000ed04 	.word	0xe000ed04

080037fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003804:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <prvGetNextExpireTime+0x44>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d105      	bne.n	800382e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003822:	4b07      	ldr	r3, [pc, #28]	; (8003840 <prvGetNextExpireTime+0x44>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e001      	b.n	8003832 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003832:	68fb      	ldr	r3, [r7, #12]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	200002b8 	.word	0x200002b8

08003844 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800384c:	f7ff f9fe 	bl	8002c4c <xTaskGetTickCount>
 8003850:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003852:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <prvSampleTimeNow+0x3c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	429a      	cmp	r2, r3
 800385a:	d205      	bcs.n	8003868 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800385c:	f000 f8e8 	bl	8003a30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e002      	b.n	800386e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800386e:	4a04      	ldr	r2, [pc, #16]	; (8003880 <prvSampleTimeNow+0x3c>)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003874:	68fb      	ldr	r3, [r7, #12]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	200002c8 	.word	0x200002c8

08003884 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d812      	bhi.n	80038d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	1ad2      	subs	r2, r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d302      	bcc.n	80038be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80038b8:	2301      	movs	r3, #1
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	e01b      	b.n	80038f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <prvInsertTimerInActiveList+0x7c>)
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3304      	adds	r3, #4
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f7fe f91c 	bl	8001b06 <vListInsert>
 80038ce:	e012      	b.n	80038f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d206      	bcs.n	80038e6 <prvInsertTimerInActiveList+0x62>
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d302      	bcc.n	80038e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e007      	b.n	80038f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <prvInsertTimerInActiveList+0x80>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3304      	adds	r3, #4
 80038ee:	4619      	mov	r1, r3
 80038f0:	4610      	mov	r0, r2
 80038f2:	f7fe f908 	bl	8001b06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80038f6:	697b      	ldr	r3, [r7, #20]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	200002bc 	.word	0x200002bc
 8003904:	200002b8 	.word	0x200002b8

08003908 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08c      	sub	sp, #48	; 0x30
 800390c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800390e:	e07c      	b.n	8003a0a <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	db79      	blt.n	8003a0a <prvProcessReceivedCommands+0x102>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d004      	beq.n	800392c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	3304      	adds	r3, #4
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe f926 	bl	8001b78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800392c:	1d3b      	adds	r3, r7, #4
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff ff88 	bl	8003844 <prvSampleTimeNow>
 8003934:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b09      	cmp	r3, #9
 800393a:	d865      	bhi.n	8003a08 <prvProcessReceivedCommands+0x100>
 800393c:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <prvProcessReceivedCommands+0x3c>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	0800396d 	.word	0x0800396d
 8003948:	0800396d 	.word	0x0800396d
 800394c:	0800396d 	.word	0x0800396d
 8003950:	08003a0b 	.word	0x08003a0b
 8003954:	080039c9 	.word	0x080039c9
 8003958:	08003a01 	.word	0x08003a01
 800395c:	0800396d 	.word	0x0800396d
 8003960:	0800396d 	.word	0x0800396d
 8003964:	08003a0b 	.word	0x08003a0b
 8003968:	080039c9 	.word	0x080039c9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	18d1      	adds	r1, r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a3a      	ldr	r2, [r7, #32]
 8003978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800397a:	f7ff ff83 	bl	8003884 <prvInsertTimerInActiveList>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d042      	beq.n	8003a0a <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800398a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d13a      	bne.n	8003a0a <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	441a      	add	r2, r3
 800399c:	2300      	movs	r3, #0
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	2300      	movs	r3, #0
 80039a2:	2100      	movs	r1, #0
 80039a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039a6:	f7ff fe3b 	bl	8003620 <xTimerGenericCommand>
 80039aa:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d12b      	bne.n	8003a0a <prvProcessReceivedCommands+0x102>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	61bb      	str	r3, [r7, #24]
}
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <prvProcessReceivedCommands+0xe4>
	__asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	617b      	str	r3, [r7, #20]
}
 80039e8:	bf00      	nop
 80039ea:	e7fe      	b.n	80039ea <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	18d1      	adds	r1, r2, r3
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	6a3a      	ldr	r2, [r7, #32]
 80039f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039fa:	f7ff ff43 	bl	8003884 <prvInsertTimerInActiveList>
					break;
 80039fe:	e004      	b.n	8003a0a <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8003a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a02:	f000 fc05 	bl	8004210 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003a06:	e000      	b.n	8003a0a <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
 8003a08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <prvProcessReceivedCommands+0x124>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f107 0108 	add.w	r1, r7, #8
 8003a12:	2200      	movs	r2, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe fbcf 	bl	80021b8 <xQueueReceive>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f47f af77 	bne.w	8003910 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003a22:	bf00      	nop
 8003a24:	bf00      	nop
 8003a26:	3728      	adds	r7, #40	; 0x28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	200002c0 	.word	0x200002c0

08003a30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a36:	e045      	b.n	8003ac4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a38:	4b2c      	ldr	r3, [pc, #176]	; (8003aec <prvSwitchTimerLists+0xbc>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a42:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <prvSwitchTimerLists+0xbc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe f891 	bl	8001b78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d12e      	bne.n	8003ac4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d90e      	bls.n	8003a96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <prvSwitchTimerLists+0xbc>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f7fe f839 	bl	8001b06 <vListInsert>
 8003a94:	e016      	b.n	8003ac4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a96:	2300      	movs	r3, #0
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f7ff fdbd 	bl	8003620 <xTimerGenericCommand>
 8003aa6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	603b      	str	r3, [r7, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	e7fe      	b.n	8003ac2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ac4:	4b09      	ldr	r3, [pc, #36]	; (8003aec <prvSwitchTimerLists+0xbc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1b4      	bne.n	8003a38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ace:	4b07      	ldr	r3, [pc, #28]	; (8003aec <prvSwitchTimerLists+0xbc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ad4:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <prvSwitchTimerLists+0xc0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a04      	ldr	r2, [pc, #16]	; (8003aec <prvSwitchTimerLists+0xbc>)
 8003ada:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003adc:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <prvSwitchTimerLists+0xc0>)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	6013      	str	r3, [r2, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	200002b8 	.word	0x200002b8
 8003af0:	200002bc 	.word	0x200002bc

08003af4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003af8:	f000 f99c 	bl	8003e34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003afc:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <prvCheckForValidListAndQueue+0x54>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d11d      	bne.n	8003b40 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003b04:	4811      	ldr	r0, [pc, #68]	; (8003b4c <prvCheckForValidListAndQueue+0x58>)
 8003b06:	f7fd ffad 	bl	8001a64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003b0a:	4811      	ldr	r0, [pc, #68]	; (8003b50 <prvCheckForValidListAndQueue+0x5c>)
 8003b0c:	f7fd ffaa 	bl	8001a64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003b10:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <prvCheckForValidListAndQueue+0x60>)
 8003b12:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <prvCheckForValidListAndQueue+0x58>)
 8003b14:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <prvCheckForValidListAndQueue+0x64>)
 8003b18:	4a0d      	ldr	r2, [pc, #52]	; (8003b50 <prvCheckForValidListAndQueue+0x5c>)
 8003b1a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	210c      	movs	r1, #12
 8003b20:	200a      	movs	r0, #10
 8003b22:	f7fe f8bb 	bl	8001c9c <xQueueGenericCreate>
 8003b26:	4603      	mov	r3, r0
 8003b28:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <prvCheckForValidListAndQueue+0x54>)
 8003b2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <prvCheckForValidListAndQueue+0x54>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <prvCheckForValidListAndQueue+0x54>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4908      	ldr	r1, [pc, #32]	; (8003b5c <prvCheckForValidListAndQueue+0x68>)
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fd6a 	bl	8002614 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b40:	f000 f9a8 	bl	8003e94 <vPortExitCritical>
}
 8003b44:	bf00      	nop
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	200002c0 	.word	0x200002c0
 8003b4c:	20000290 	.word	0x20000290
 8003b50:	200002a4 	.word	0x200002a4
 8003b54:	200002b8 	.word	0x200002b8
 8003b58:	200002bc 	.word	0x200002bc
 8003b5c:	08006bc8 	.word	0x08006bc8

08003b60 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10a      	bne.n	8003b88 <pvTimerGetTimerID+0x28>
	__asm volatile
 8003b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	60fb      	str	r3, [r7, #12]
}
 8003b84:	bf00      	nop
 8003b86:	e7fe      	b.n	8003b86 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8003b88:	f000 f954 	bl	8003e34 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8003b92:	f000 f97f 	bl	8003e94 <vPortExitCritical>

	return pvReturn;
 8003b96:	693b      	ldr	r3, [r7, #16]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <vTimerSetTimerID+0x2a>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	60bb      	str	r3, [r7, #8]
}
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 8003bca:	f000 f933 	bl	8003e34 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	621a      	str	r2, [r3, #32]
	}
	taskEXIT_CRITICAL();
 8003bd4:	f000 f95e 	bl	8003e94 <vPortExitCritical>
}
 8003bd8:	bf00      	nop
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3b04      	subs	r3, #4
 8003bf0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3b04      	subs	r3, #4
 8003bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f023 0201 	bic.w	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3b04      	subs	r3, #4
 8003c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c10:	4a0c      	ldr	r2, [pc, #48]	; (8003c44 <pxPortInitialiseStack+0x64>)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3b14      	subs	r3, #20
 8003c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3b04      	subs	r3, #4
 8003c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f06f 0202 	mvn.w	r2, #2
 8003c2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3b20      	subs	r3, #32
 8003c34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c36:	68fb      	ldr	r3, [r7, #12]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	08003c49 	.word	0x08003c49

08003c48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <prvTaskExitError+0x54>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	d00a      	beq.n	8003c72 <prvTaskExitError+0x2a>
	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	60fb      	str	r3, [r7, #12]
}
 8003c6e:	bf00      	nop
 8003c70:	e7fe      	b.n	8003c70 <prvTaskExitError+0x28>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	60bb      	str	r3, [r7, #8]
}
 8003c84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c86:	bf00      	nop
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0fc      	beq.n	8003c88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c8e:	bf00      	nop
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	2000000c 	.word	0x2000000c

08003ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ca0:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <pxCurrentTCBConst2>)
 8003ca2:	6819      	ldr	r1, [r3, #0]
 8003ca4:	6808      	ldr	r0, [r1, #0]
 8003ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003caa:	f380 8809 	msr	PSP, r0
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f04f 0000 	mov.w	r0, #0
 8003cb6:	f380 8811 	msr	BASEPRI, r0
 8003cba:	4770      	bx	lr
 8003cbc:	f3af 8000 	nop.w

08003cc0 <pxCurrentTCBConst2>:
 8003cc0:	2000018c 	.word	0x2000018c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop

08003cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003cc8:	4808      	ldr	r0, [pc, #32]	; (8003cec <prvPortStartFirstTask+0x24>)
 8003cca:	6800      	ldr	r0, [r0, #0]
 8003ccc:	6800      	ldr	r0, [r0, #0]
 8003cce:	f380 8808 	msr	MSP, r0
 8003cd2:	f04f 0000 	mov.w	r0, #0
 8003cd6:	f380 8814 	msr	CONTROL, r0
 8003cda:	b662      	cpsie	i
 8003cdc:	b661      	cpsie	f
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	df00      	svc	0
 8003ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003cea:	bf00      	nop
 8003cec:	e000ed08 	.word	0xe000ed08

08003cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003cf6:	4b46      	ldr	r3, [pc, #280]	; (8003e10 <xPortStartScheduler+0x120>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a46      	ldr	r2, [pc, #280]	; (8003e14 <xPortStartScheduler+0x124>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10a      	bne.n	8003d16 <xPortStartScheduler+0x26>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	613b      	str	r3, [r7, #16]
}
 8003d12:	bf00      	nop
 8003d14:	e7fe      	b.n	8003d14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d16:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <xPortStartScheduler+0x120>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a3f      	ldr	r2, [pc, #252]	; (8003e18 <xPortStartScheduler+0x128>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d10a      	bne.n	8003d36 <xPortStartScheduler+0x46>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	60fb      	str	r3, [r7, #12]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d36:	4b39      	ldr	r3, [pc, #228]	; (8003e1c <xPortStartScheduler+0x12c>)
 8003d38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	22ff      	movs	r2, #255	; 0xff
 8003d46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <xPortStartScheduler+0x130>)
 8003d5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d5e:	4b31      	ldr	r3, [pc, #196]	; (8003e24 <xPortStartScheduler+0x134>)
 8003d60:	2207      	movs	r2, #7
 8003d62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d64:	e009      	b.n	8003d7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003d66:	4b2f      	ldr	r3, [pc, #188]	; (8003e24 <xPortStartScheduler+0x134>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	4a2d      	ldr	r2, [pc, #180]	; (8003e24 <xPortStartScheduler+0x134>)
 8003d6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d7a:	78fb      	ldrb	r3, [r7, #3]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d82:	2b80      	cmp	r3, #128	; 0x80
 8003d84:	d0ef      	beq.n	8003d66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d86:	4b27      	ldr	r3, [pc, #156]	; (8003e24 <xPortStartScheduler+0x134>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f1c3 0307 	rsb	r3, r3, #7
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d00a      	beq.n	8003da8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	60bb      	str	r3, [r7, #8]
}
 8003da4:	bf00      	nop
 8003da6:	e7fe      	b.n	8003da6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003da8:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <xPortStartScheduler+0x134>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <xPortStartScheduler+0x134>)
 8003db0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003db2:	4b1c      	ldr	r3, [pc, #112]	; (8003e24 <xPortStartScheduler+0x134>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dba:	4a1a      	ldr	r2, [pc, #104]	; (8003e24 <xPortStartScheduler+0x134>)
 8003dbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003dc6:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <xPortStartScheduler+0x138>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <xPortStartScheduler+0x138>)
 8003dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003dd2:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <xPortStartScheduler+0x138>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a14      	ldr	r2, [pc, #80]	; (8003e28 <xPortStartScheduler+0x138>)
 8003dd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ddc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003dde:	f000 f8e5 	bl	8003fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <xPortStartScheduler+0x13c>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003de8:	f000 f904 	bl	8003ff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003dec:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <xPortStartScheduler+0x140>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a0f      	ldr	r2, [pc, #60]	; (8003e30 <xPortStartScheduler+0x140>)
 8003df2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003df6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003df8:	f7ff ff66 	bl	8003cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003dfc:	f7ff f80a 	bl	8002e14 <vTaskSwitchContext>
	prvTaskExitError();
 8003e00:	f7ff ff22 	bl	8003c48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	e000ed00 	.word	0xe000ed00
 8003e14:	410fc271 	.word	0x410fc271
 8003e18:	410fc270 	.word	0x410fc270
 8003e1c:	e000e400 	.word	0xe000e400
 8003e20:	200002cc 	.word	0x200002cc
 8003e24:	200002d0 	.word	0x200002d0
 8003e28:	e000ed20 	.word	0xe000ed20
 8003e2c:	2000000c 	.word	0x2000000c
 8003e30:	e000ef34 	.word	0xe000ef34

08003e34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	607b      	str	r3, [r7, #4]
}
 8003e4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <vPortEnterCritical+0x58>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3301      	adds	r3, #1
 8003e54:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <vPortEnterCritical+0x58>)
 8003e56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e58:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <vPortEnterCritical+0x58>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d10f      	bne.n	8003e80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <vPortEnterCritical+0x5c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <vPortEnterCritical+0x4c>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	603b      	str	r3, [r7, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	e7fe      	b.n	8003e7e <vPortEnterCritical+0x4a>
	}
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	2000000c 	.word	0x2000000c
 8003e90:	e000ed04 	.word	0xe000ed04

08003e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <vPortExitCritical+0x50>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <vPortExitCritical+0x24>
	__asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	607b      	str	r3, [r7, #4]
}
 8003eb4:	bf00      	nop
 8003eb6:	e7fe      	b.n	8003eb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <vPortExitCritical+0x50>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <vPortExitCritical+0x50>)
 8003ec0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <vPortExitCritical+0x50>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <vPortExitCritical+0x42>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	f383 8811 	msr	BASEPRI, r3
}
 8003ed4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	2000000c 	.word	0x2000000c
	...

08003ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ef0:	f3ef 8009 	mrs	r0, PSP
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <pxCurrentTCBConst>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	f01e 0f10 	tst.w	lr, #16
 8003f00:	bf08      	it	eq
 8003f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0a:	6010      	str	r0, [r2, #0]
 8003f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f14:	f380 8811 	msr	BASEPRI, r0
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f7fe ff78 	bl	8002e14 <vTaskSwitchContext>
 8003f24:	f04f 0000 	mov.w	r0, #0
 8003f28:	f380 8811 	msr	BASEPRI, r0
 8003f2c:	bc09      	pop	{r0, r3}
 8003f2e:	6819      	ldr	r1, [r3, #0]
 8003f30:	6808      	ldr	r0, [r1, #0]
 8003f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f36:	f01e 0f10 	tst.w	lr, #16
 8003f3a:	bf08      	it	eq
 8003f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f40:	f380 8809 	msr	PSP, r0
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	f3af 8000 	nop.w

08003f50 <pxCurrentTCBConst>:
 8003f50:	2000018c 	.word	0x2000018c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop

08003f58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	607b      	str	r3, [r7, #4]
}
 8003f70:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8003f72:	f001 fc1b 	bl	80057ac <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f76:	f7fe fe8b 	bl	8002c90 <xTaskIncrementTick>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d006      	beq.n	8003f8e <SysTick_Handler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8003f80:	f001 fc72 	bl	8005868 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f84:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <SysTick_Handler+0x50>)
 8003f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e001      	b.n	8003f92 <SysTick_Handler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 8003f8e:	f001 fc4f 	bl	8005830 <SEGGER_SYSVIEW_RecordExitISR>
 8003f92:	2300      	movs	r3, #0
 8003f94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f383 8811 	msr	BASEPRI, r3
}
 8003f9c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <vPortSetupTimerInterrupt+0x34>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <vPortSetupTimerInterrupt+0x38>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <vPortSetupTimerInterrupt+0x3c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <vPortSetupTimerInterrupt+0x40>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	099b      	lsrs	r3, r3, #6
 8003fc8:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <vPortSetupTimerInterrupt+0x44>)
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fce:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <vPortSetupTimerInterrupt+0x34>)
 8003fd0:	2207      	movs	r2, #7
 8003fd2:	601a      	str	r2, [r3, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	e000e010 	.word	0xe000e010
 8003fe4:	e000e018 	.word	0xe000e018
 8003fe8:	20000000 	.word	0x20000000
 8003fec:	10624dd3 	.word	0x10624dd3
 8003ff0:	e000e014 	.word	0xe000e014

08003ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004004 <vPortEnableVFP+0x10>
 8003ff8:	6801      	ldr	r1, [r0, #0]
 8003ffa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ffe:	6001      	str	r1, [r0, #0]
 8004000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004002:	bf00      	nop
 8004004:	e000ed88 	.word	0xe000ed88

08004008 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800400e:	f3ef 8305 	mrs	r3, IPSR
 8004012:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b0f      	cmp	r3, #15
 8004018:	d914      	bls.n	8004044 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800401a:	4a17      	ldr	r2, [pc, #92]	; (8004078 <vPortValidateInterruptPriority+0x70>)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004024:	4b15      	ldr	r3, [pc, #84]	; (800407c <vPortValidateInterruptPriority+0x74>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	7afa      	ldrb	r2, [r7, #11]
 800402a:	429a      	cmp	r2, r3
 800402c:	d20a      	bcs.n	8004044 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	607b      	str	r3, [r7, #4]
}
 8004040:	bf00      	nop
 8004042:	e7fe      	b.n	8004042 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004044:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <vPortValidateInterruptPriority+0x78>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <vPortValidateInterruptPriority+0x7c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d90a      	bls.n	800406a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	603b      	str	r3, [r7, #0]
}
 8004066:	bf00      	nop
 8004068:	e7fe      	b.n	8004068 <vPortValidateInterruptPriority+0x60>
	}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	e000e3f0 	.word	0xe000e3f0
 800407c:	200002cc 	.word	0x200002cc
 8004080:	e000ed0c 	.word	0xe000ed0c
 8004084:	200002d0 	.word	0x200002d0

08004088 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	; 0x28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004090:	2300      	movs	r3, #0
 8004092:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004094:	f7fe fd2c 	bl	8002af0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004098:	4b58      	ldr	r3, [pc, #352]	; (80041fc <pvPortMalloc+0x174>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80040a0:	f000 f910 	bl	80042c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040a4:	4b56      	ldr	r3, [pc, #344]	; (8004200 <pvPortMalloc+0x178>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f040 808e 	bne.w	80041ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01d      	beq.n	80040f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80040b8:	2208      	movs	r2, #8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4413      	add	r3, r2
 80040be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d014      	beq.n	80040f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f023 0307 	bic.w	r3, r3, #7
 80040d0:	3308      	adds	r3, #8
 80040d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <pvPortMalloc+0x6c>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	617b      	str	r3, [r7, #20]
}
 80040f0:	bf00      	nop
 80040f2:	e7fe      	b.n	80040f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d069      	beq.n	80041ce <pvPortMalloc+0x146>
 80040fa:	4b42      	ldr	r3, [pc, #264]	; (8004204 <pvPortMalloc+0x17c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	429a      	cmp	r2, r3
 8004102:	d864      	bhi.n	80041ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004104:	4b40      	ldr	r3, [pc, #256]	; (8004208 <pvPortMalloc+0x180>)
 8004106:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004108:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <pvPortMalloc+0x180>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800410e:	e004      	b.n	800411a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	429a      	cmp	r2, r3
 8004122:	d903      	bls.n	800412c <pvPortMalloc+0xa4>
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f1      	bne.n	8004110 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800412c:	4b33      	ldr	r3, [pc, #204]	; (80041fc <pvPortMalloc+0x174>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004132:	429a      	cmp	r2, r3
 8004134:	d04b      	beq.n	80041ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2208      	movs	r2, #8
 800413c:	4413      	add	r3, r2
 800413e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	1ad2      	subs	r2, r2, r3
 8004150:	2308      	movs	r3, #8
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	429a      	cmp	r2, r3
 8004156:	d91f      	bls.n	8004198 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4413      	add	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <pvPortMalloc+0xf8>
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	613b      	str	r3, [r7, #16]
}
 800417c:	bf00      	nop
 800417e:	e7fe      	b.n	800417e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	1ad2      	subs	r2, r2, r3
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004192:	69b8      	ldr	r0, [r7, #24]
 8004194:	f000 f8f8 	bl	8004388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004198:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <pvPortMalloc+0x17c>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	4a18      	ldr	r2, [pc, #96]	; (8004204 <pvPortMalloc+0x17c>)
 80041a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041a6:	4b17      	ldr	r3, [pc, #92]	; (8004204 <pvPortMalloc+0x17c>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4b18      	ldr	r3, [pc, #96]	; (800420c <pvPortMalloc+0x184>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d203      	bcs.n	80041ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <pvPortMalloc+0x17c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a15      	ldr	r2, [pc, #84]	; (800420c <pvPortMalloc+0x184>)
 80041b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	4b10      	ldr	r3, [pc, #64]	; (8004200 <pvPortMalloc+0x178>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80041ce:	f7fe fc9d 	bl	8002b0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <pvPortMalloc+0x16a>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60fb      	str	r3, [r7, #12]
}
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <pvPortMalloc+0x168>
	return pvReturn;
 80041f2:	69fb      	ldr	r3, [r7, #28]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3728      	adds	r7, #40	; 0x28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20012edc 	.word	0x20012edc
 8004200:	20012ee8 	.word	0x20012ee8
 8004204:	20012ee0 	.word	0x20012ee0
 8004208:	20012ed4 	.word	0x20012ed4
 800420c:	20012ee4 	.word	0x20012ee4

08004210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d048      	beq.n	80042b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004222:	2308      	movs	r3, #8
 8004224:	425b      	negs	r3, r3
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4413      	add	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	4b21      	ldr	r3, [pc, #132]	; (80042bc <vPortFree+0xac>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <vPortFree+0x44>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	60fb      	str	r3, [r7, #12]
}
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <vPortFree+0x62>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	60bb      	str	r3, [r7, #8]
}
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <vPortFree+0xac>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d019      	beq.n	80042b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d115      	bne.n	80042b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <vPortFree+0xac>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	43db      	mvns	r3, r3
 8004292:	401a      	ands	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004298:	f7fe fc2a 	bl	8002af0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <vPortFree+0xb0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4413      	add	r3, r2
 80042a6:	4a06      	ldr	r2, [pc, #24]	; (80042c0 <vPortFree+0xb0>)
 80042a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042aa:	6938      	ldr	r0, [r7, #16]
 80042ac:	f000 f86c 	bl	8004388 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80042b0:	f7fe fc2c 	bl	8002b0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80042b4:	bf00      	nop
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20012ee8 	.word	0x20012ee8
 80042c0:	20012ee0 	.word	0x20012ee0

080042c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042ca:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80042ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042d0:	4b27      	ldr	r3, [pc, #156]	; (8004370 <prvHeapInit+0xac>)
 80042d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00c      	beq.n	80042f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3307      	adds	r3, #7
 80042e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0307 	bic.w	r3, r3, #7
 80042ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	4a1f      	ldr	r2, [pc, #124]	; (8004370 <prvHeapInit+0xac>)
 80042f4:	4413      	add	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042fc:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <prvHeapInit+0xb0>)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004302:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <prvHeapInit+0xb0>)
 8004304:	2200      	movs	r2, #0
 8004306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	4413      	add	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004310:	2208      	movs	r2, #8
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0307 	bic.w	r3, r3, #7
 800431e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4a15      	ldr	r2, [pc, #84]	; (8004378 <prvHeapInit+0xb4>)
 8004324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004326:	4b14      	ldr	r3, [pc, #80]	; (8004378 <prvHeapInit+0xb4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2200      	movs	r2, #0
 800432c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <prvHeapInit+0xb4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	1ad2      	subs	r2, r2, r3
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <prvHeapInit+0xb4>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	4a0a      	ldr	r2, [pc, #40]	; (800437c <prvHeapInit+0xb8>)
 8004352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a09      	ldr	r2, [pc, #36]	; (8004380 <prvHeapInit+0xbc>)
 800435a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <prvHeapInit+0xc0>)
 800435e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004362:	601a      	str	r2, [r3, #0]
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	200002d4 	.word	0x200002d4
 8004374:	20012ed4 	.word	0x20012ed4
 8004378:	20012edc 	.word	0x20012edc
 800437c:	20012ee4 	.word	0x20012ee4
 8004380:	20012ee0 	.word	0x20012ee0
 8004384:	20012ee8 	.word	0x20012ee8

08004388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004390:	4b28      	ldr	r3, [pc, #160]	; (8004434 <prvInsertBlockIntoFreeList+0xac>)
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	e002      	b.n	800439c <prvInsertBlockIntoFreeList+0x14>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d8f7      	bhi.n	8004396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	4413      	add	r3, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d108      	bne.n	80043ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	441a      	add	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	441a      	add	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d118      	bne.n	8004410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4b15      	ldr	r3, [pc, #84]	; (8004438 <prvInsertBlockIntoFreeList+0xb0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d00d      	beq.n	8004406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	441a      	add	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	e008      	b.n	8004418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004406:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <prvInsertBlockIntoFreeList+0xb0>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	e003      	b.n	8004418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	429a      	cmp	r2, r3
 800441e:	d002      	beq.n	8004426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20012ed4 	.word	0x20012ed4
 8004438:	20012edc 	.word	0x20012edc

0800443c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004440:	4803      	ldr	r0, [pc, #12]	; (8004450 <_cbSendSystemDesc+0x14>)
 8004442:	f001 f95d 	bl	8005700 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004446:	4803      	ldr	r0, [pc, #12]	; (8004454 <_cbSendSystemDesc+0x18>)
 8004448:	f001 f95a 	bl	8005700 <SEGGER_SYSVIEW_SendSysDesc>
}
 800444c:	bf00      	nop
 800444e:	bd80      	pop	{r7, pc}
 8004450:	08006bd0 	.word	0x08006bd0
 8004454:	08006c00 	.word	0x08006c00

08004458 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <SEGGER_SYSVIEW_Conf+0x20>)
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <SEGGER_SYSVIEW_Conf+0x20>)
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <SEGGER_SYSVIEW_Conf+0x24>)
 8004466:	4a06      	ldr	r2, [pc, #24]	; (8004480 <SEGGER_SYSVIEW_Conf+0x28>)
 8004468:	f000 fcc8 	bl	8004dfc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800446c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004470:	f000 fd08 	bl	8004e84 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004474:	bf00      	nop
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20000000 	.word	0x20000000
 800447c:	0800443d 	.word	0x0800443d
 8004480:	08006cbc 	.word	0x08006cbc

08004484 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800448a:	4b26      	ldr	r3, [pc, #152]	; (8004524 <_DoInit+0xa0>)
 800448c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800448e:	22a8      	movs	r2, #168	; 0xa8
 8004490:	2100      	movs	r1, #0
 8004492:	6838      	ldr	r0, [r7, #0]
 8004494:	f001 fe3a 	bl	800610c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2203      	movs	r2, #3
 800449c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2203      	movs	r2, #3
 80044a2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	4a20      	ldr	r2, [pc, #128]	; (8004528 <_DoInit+0xa4>)
 80044a8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	4a1f      	ldr	r2, [pc, #124]	; (800452c <_DoInit+0xa8>)
 80044ae:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044b6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2200      	movs	r2, #0
 80044bc:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2200      	movs	r2, #0
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2200      	movs	r2, #0
 80044c8:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	4a16      	ldr	r2, [pc, #88]	; (8004528 <_DoInit+0xa4>)
 80044ce:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4a17      	ldr	r2, [pc, #92]	; (8004530 <_DoInit+0xac>)
 80044d4:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2210      	movs	r2, #16
 80044da:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2200      	movs	r2, #0
 80044e0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2200      	movs	r2, #0
 80044e6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2200      	movs	r2, #0
 80044ec:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80044ee:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80044f2:	2300      	movs	r3, #0
 80044f4:	607b      	str	r3, [r7, #4]
 80044f6:	e00c      	b.n	8004512 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1c3 030f 	rsb	r3, r3, #15
 80044fe:	4a0d      	ldr	r2, [pc, #52]	; (8004534 <_DoInit+0xb0>)
 8004500:	5cd1      	ldrb	r1, [r2, r3]
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4413      	add	r3, r2
 8004508:	460a      	mov	r2, r1
 800450a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3301      	adds	r3, #1
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b0f      	cmp	r3, #15
 8004516:	d9ef      	bls.n	80044f8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004518:	f3bf 8f5f 	dmb	sy
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20012eec 	.word	0x20012eec
 8004528:	08006c10 	.word	0x08006c10
 800452c:	20012f94 	.word	0x20012f94
 8004530:	20013394 	.word	0x20013394
 8004534:	08006c9c 	.word	0x08006c9c

08004538 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004538:	b580      	push	{r7, lr}
 800453a:	b08c      	sub	sp, #48	; 0x30
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004544:	4b3e      	ldr	r3, [pc, #248]	; (8004640 <SEGGER_RTT_ReadNoLock+0x108>)
 8004546:	623b      	str	r3, [r7, #32]
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <SEGGER_RTT_ReadNoLock+0x1e>
 8004552:	f7ff ff97 	bl	8004484 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4613      	mov	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4413      	add	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	3360      	adds	r3, #96	; 0x60
 8004562:	4a37      	ldr	r2, [pc, #220]	; (8004640 <SEGGER_RTT_ReadNoLock+0x108>)
 8004564:	4413      	add	r3, r2
 8004566:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004578:	2300      	movs	r3, #0
 800457a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800457c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	429a      	cmp	r2, r3
 8004582:	d92b      	bls.n	80045dc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4293      	cmp	r3, r2
 8004594:	bf28      	it	cs
 8004596:	4613      	movcs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	4413      	add	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	6939      	ldr	r1, [r7, #16]
 80045a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045aa:	f001 fde3 	bl	8006174 <memcpy>
    NumBytesRead += NumBytesRem;
 80045ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	4413      	add	r3, r2
 80045b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80045b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	4413      	add	r3, r2
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80045c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	4413      	add	r3, r2
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d101      	bne.n	80045dc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80045d8:	2300      	movs	r3, #0
 80045da:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4293      	cmp	r3, r2
 80045ea:	bf28      	it	cs
 80045ec:	4613      	movcs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d019      	beq.n	800462a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	4413      	add	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	6939      	ldr	r1, [r7, #16]
 8004604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004606:	f001 fdb5 	bl	8006174 <memcpy>
    NumBytesRead += NumBytesRem;
 800460a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	4413      	add	r3, r2
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	4413      	add	r3, r2
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	4413      	add	r3, r2
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004634:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004638:	4618      	mov	r0, r3
 800463a:	3730      	adds	r7, #48	; 0x30
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20012eec 	.word	0x20012eec

08004644 <SEGGER_RTT_ASM_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
//#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004644:	b580      	push	{r7, lr}
 8004646:	b08c      	sub	sp, #48	; 0x30
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  //   4) RdOff >  WrOff => Space is sufficient
  //   5) RdOff >  WrOff => No space in buf
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	4613      	mov	r3, r2
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	4413      	add	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4a38      	ldr	r2, [pc, #224]	; (8004744 <SEGGER_RTT_ASM_WriteSkipNoLock+0x100>)
 8004662:	4413      	add	r3, r2
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
  RdOff = pRing->RdOff;
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
  WrOff = pRing->WrOff;
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	623b      	str	r3, [r7, #32]
  pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	4413      	add	r3, r2
 800467a:	61fb      	str	r3, [r7, #28]
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 800467c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	429a      	cmp	r2, r3
 8004682:	d842      	bhi.n	800470a <SEGGER_RTT_ASM_WriteSkipNoLock+0xc6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 1)?
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d30d      	bcc.n	80046b4 <SEGGER_RTT_ASM_WriteSkipNoLock+0x70>
      memcpy((void*)pDst, pData, NumBytes);
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800469c:	69f8      	ldr	r0, [r7, #28]
 800469e:	f001 fd69 	bl	8006174 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046a2:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = WrOff + NumBytes;
 80046a6:	6a3a      	ldr	r2, [r7, #32]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	441a      	add	r2, r3
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	60da      	str	r2, [r3, #12]
      return 1;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e042      	b.n	800473a <SEGGER_RTT_ASM_WriteSkipNoLock+0xf6>
    }
    Avail += RdOff;                                     // Space incl. wrap-around
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	4413      	add	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d339      	bcc.n	8004738 <SEGGER_RTT_ASM_WriteSkipNoLock+0xf4>
      Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	617b      	str	r3, [r7, #20]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046d2:	69f8      	ldr	r0, [r7, #28]
 80046d4:	f001 fd4e 	bl	8006174 <memcpy>
      NumBytes -= Rem;
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	607b      	str	r3, [r7, #4]
      // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
      // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
      // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <SEGGER_RTT_ASM_WriteSkipNoLock+0xb8>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	61fb      	str	r3, [r7, #28]
        memcpy((void*)pDst, pData + Rem, NumBytes);
 80046ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	4413      	add	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4619      	mov	r1, r3
 80046f6:	69f8      	ldr	r0, [r7, #28]
 80046f8:	f001 fd3c 	bl	8006174 <memcpy>
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046fc:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = NumBytes;
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	60da      	str	r2, [r3, #12]
      return 1;
 8004706:	2301      	movs	r3, #1
 8004708:	e017      	b.n	800473a <SEGGER_RTT_ASM_WriteSkipNoLock+0xf6>
    }
  } else {                                             // Potential case 4)
    Avail = RdOff - WrOff - 1u;
 800470a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	429a      	cmp	r2, r3
 800471a:	d30d      	bcc.n	8004738 <SEGGER_RTT_ASM_WriteSkipNoLock+0xf4>
      memcpy((void*)pDst, pData, NumBytes);
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004720:	69f8      	ldr	r0, [r7, #28]
 8004722:	f001 fd27 	bl	8006174 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004726:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = WrOff + NumBytes;
 800472a:	6a3a      	ldr	r2, [r7, #32]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	441a      	add	r2, r3
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	60da      	str	r2, [r3, #12]
      return 1;
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <SEGGER_RTT_ASM_WriteSkipNoLock+0xf6>
    }
  }
  return 0;     // No space in buffer
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3730      	adds	r7, #48	; 0x30
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20012eec 	.word	0x20012eec

08004748 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004756:	4b3d      	ldr	r3, [pc, #244]	; (800484c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004764:	f7ff fe8e 	bl	8004484 <_DoInit>
  SEGGER_RTT_LOCK();
 8004768:	f3ef 8311 	mrs	r3, BASEPRI
 800476c:	f04f 0120 	mov.w	r1, #32
 8004770:	f381 8811 	msr	BASEPRI, r1
 8004774:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004776:	4b35      	ldr	r3, [pc, #212]	; (800484c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004778:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800477e:	6939      	ldr	r1, [r7, #16]
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	4613      	mov	r3, r2
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	4413      	add	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	440b      	add	r3, r1
 800478e:	3304      	adds	r3, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	3301      	adds	r3, #1
 800479a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	dbeb      	blt.n	800477e <SEGGER_RTT_AllocUpBuffer+0x36>
 80047a6:	e000      	b.n	80047aa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80047a8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	da3f      	bge.n	8004834 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80047b4:	6939      	ldr	r1, [r7, #16]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	4613      	mov	r3, r2
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	4413      	add	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	440b      	add	r3, r1
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80047c8:	6939      	ldr	r1, [r7, #16]
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	4613      	mov	r3, r2
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	4413      	add	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	440b      	add	r3, r1
 80047d8:	3304      	adds	r3, #4
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80047de:	6939      	ldr	r1, [r7, #16]
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	4613      	mov	r3, r2
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	4413      	add	r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	440b      	add	r3, r1
 80047ec:	3320      	adds	r3, #32
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80047f2:	6939      	ldr	r1, [r7, #16]
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	4613      	mov	r3, r2
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	4413      	add	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	440b      	add	r3, r1
 8004800:	3328      	adds	r3, #40	; 0x28
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004806:	6939      	ldr	r1, [r7, #16]
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	4613      	mov	r3, r2
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	4413      	add	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	440b      	add	r3, r1
 8004814:	3324      	adds	r3, #36	; 0x24
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800481a:	6939      	ldr	r1, [r7, #16]
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	4613      	mov	r3, r2
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	4413      	add	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	440b      	add	r3, r1
 8004828:	332c      	adds	r3, #44	; 0x2c
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800482e:	f3bf 8f5f 	dmb	sy
 8004832:	e002      	b.n	800483a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004834:	f04f 33ff 	mov.w	r3, #4294967295
 8004838:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004840:	69fb      	ldr	r3, [r7, #28]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20012eec 	.word	0x20012eec

08004850 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004850:	b580      	push	{r7, lr}
 8004852:	b08a      	sub	sp, #40	; 0x28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800485e:	4b21      	ldr	r3, [pc, #132]	; (80048e4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004860:	623b      	str	r3, [r7, #32]
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800486c:	f7ff fe0a 	bl	8004484 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004870:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004872:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d82c      	bhi.n	80048d4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800487a:	f3ef 8311 	mrs	r3, BASEPRI
 800487e:	f04f 0120 	mov.w	r1, #32
 8004882:	f381 8811 	msr	BASEPRI, r1
 8004886:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4613      	mov	r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	4413      	add	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	3360      	adds	r3, #96	; 0x60
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	4413      	add	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00e      	beq.n	80048be <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2200      	movs	r2, #0
 80048b6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2200      	movs	r2, #0
 80048bc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80048c4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
 80048d2:	e002      	b.n	80048da <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80048d4:	f04f 33ff 	mov.w	r3, #4294967295
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3728      	adds	r7, #40	; 0x28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20012eec 	.word	0x20012eec

080048e8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	60fa      	str	r2, [r7, #12]
 80048fe:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d90a      	bls.n	800491c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004906:	2380      	movs	r3, #128	; 0x80
 8004908:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800490a:	e007      	b.n	800491c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	1c53      	adds	r3, r2, #1
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1c59      	adds	r1, r3, #1
 8004916:	60f9      	str	r1, [r7, #12]
 8004918:	7812      	ldrb	r2, [r2, #0]
 800491a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1e5a      	subs	r2, r3, #1
 8004920:	607a      	str	r2, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <_EncodeStr+0x46>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1ee      	bne.n	800490c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	b2da      	uxtb	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800493a:	68fb      	ldr	r3, [r7, #12]
}
 800493c:	4618      	mov	r0, r3
 800493e:	371c      	adds	r7, #28
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3307      	adds	r3, #7
}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004966:	4b34      	ldr	r3, [pc, #208]	; (8004a38 <_HandleIncomingPacket+0xd8>)
 8004968:	7e1b      	ldrb	r3, [r3, #24]
 800496a:	4618      	mov	r0, r3
 800496c:	1cfb      	adds	r3, r7, #3
 800496e:	2201      	movs	r2, #1
 8004970:	4619      	mov	r1, r3
 8004972:	f7ff fde1 	bl	8004538 <SEGGER_RTT_ReadNoLock>
 8004976:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d057      	beq.n	8004a2e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	2b80      	cmp	r3, #128	; 0x80
 8004982:	d031      	beq.n	80049e8 <_HandleIncomingPacket+0x88>
 8004984:	2b80      	cmp	r3, #128	; 0x80
 8004986:	dc40      	bgt.n	8004a0a <_HandleIncomingPacket+0xaa>
 8004988:	2b07      	cmp	r3, #7
 800498a:	dc15      	bgt.n	80049b8 <_HandleIncomingPacket+0x58>
 800498c:	2b00      	cmp	r3, #0
 800498e:	dd3c      	ble.n	8004a0a <_HandleIncomingPacket+0xaa>
 8004990:	3b01      	subs	r3, #1
 8004992:	2b06      	cmp	r3, #6
 8004994:	d839      	bhi.n	8004a0a <_HandleIncomingPacket+0xaa>
 8004996:	a201      	add	r2, pc, #4	; (adr r2, 800499c <_HandleIncomingPacket+0x3c>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049bf 	.word	0x080049bf
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049cb 	.word	0x080049cb
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049d7 	.word	0x080049d7
 80049b0:	080049dd 	.word	0x080049dd
 80049b4:	080049e3 	.word	0x080049e3
 80049b8:	2b7f      	cmp	r3, #127	; 0x7f
 80049ba:	d033      	beq.n	8004a24 <_HandleIncomingPacket+0xc4>
 80049bc:	e025      	b.n	8004a0a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80049be:	f000 fc2d 	bl	800521c <SEGGER_SYSVIEW_Start>
      break;
 80049c2:	e034      	b.n	8004a2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80049c4:	f000 fce4 	bl	8005390 <SEGGER_SYSVIEW_Stop>
      break;
 80049c8:	e031      	b.n	8004a2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80049ca:	f000 febd 	bl	8005748 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80049ce:	e02e      	b.n	8004a2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80049d0:	f000 fe82 	bl	80056d8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80049d4:	e02b      	b.n	8004a2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80049d6:	f000 fd01 	bl	80053dc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80049da:	e028      	b.n	8004a2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80049dc:	f001 f95a 	bl	8005c94 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80049e0:	e025      	b.n	8004a2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80049e2:	f001 f939 	bl	8005c58 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80049e6:	e022      	b.n	8004a2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80049e8:	4b13      	ldr	r3, [pc, #76]	; (8004a38 <_HandleIncomingPacket+0xd8>)
 80049ea:	7e1b      	ldrb	r3, [r3, #24]
 80049ec:	4618      	mov	r0, r3
 80049ee:	1cfb      	adds	r3, r7, #3
 80049f0:	2201      	movs	r2, #1
 80049f2:	4619      	mov	r1, r3
 80049f4:	f7ff fda0 	bl	8004538 <SEGGER_RTT_ReadNoLock>
 80049f8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d013      	beq.n	8004a28 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f001 f89e 	bl	8005b44 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004a08:	e00e      	b.n	8004a28 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004a0a:	78fb      	ldrb	r3, [r7, #3]
 8004a0c:	b25b      	sxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	da0c      	bge.n	8004a2c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a12:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <_HandleIncomingPacket+0xd8>)
 8004a14:	7e1b      	ldrb	r3, [r3, #24]
 8004a16:	4618      	mov	r0, r3
 8004a18:	1cfb      	adds	r3, r7, #3
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f7ff fd8b 	bl	8004538 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004a22:	e003      	b.n	8004a2c <_HandleIncomingPacket+0xcc>
      break;
 8004a24:	bf00      	nop
 8004a26:	e002      	b.n	8004a2e <_HandleIncomingPacket+0xce>
      break;
 8004a28:	bf00      	nop
 8004a2a:	e000      	b.n	8004a2e <_HandleIncomingPacket+0xce>
      break;
 8004a2c:	bf00      	nop
    }
  }
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	200137ac 	.word	0x200137ac

08004a3c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08c      	sub	sp, #48	; 0x30
 8004a40:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004a42:	2301      	movs	r3, #1
 8004a44:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004a46:	1d3b      	adds	r3, r7, #4
 8004a48:	3301      	adds	r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a50:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <_TrySendOverflowPacket+0xdc>)
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a56:	e00b      	b.n	8004a70 <_TrySendOverflowPacket+0x34>
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5e:	1c59      	adds	r1, r3, #1
 8004a60:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	09db      	lsrs	r3, r3, #7
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	2b7f      	cmp	r3, #127	; 0x7f
 8004a74:	d8f0      	bhi.n	8004a58 <_TrySendOverflowPacket+0x1c>
 8004a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a86:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <_TrySendOverflowPacket+0xe0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004a8c:	4b22      	ldr	r3, [pc, #136]	; (8004b18 <_TrySendOverflowPacket+0xdc>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	623b      	str	r3, [r7, #32]
 8004a9e:	e00b      	b.n	8004ab8 <_TrySendOverflowPacket+0x7c>
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	1c59      	adds	r1, r3, #1
 8004aa8:	6279      	str	r1, [r7, #36]	; 0x24
 8004aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	09db      	lsrs	r3, r3, #7
 8004ab6:	623b      	str	r3, [r7, #32]
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	2b7f      	cmp	r3, #127	; 0x7f
 8004abc:	d8f0      	bhi.n	8004aa0 <_TrySendOverflowPacket+0x64>
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	627a      	str	r2, [r7, #36]	; 0x24
 8004ac4:	6a3a      	ldr	r2, [r7, #32]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004ace:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <_TrySendOverflowPacket+0xdc>)
 8004ad0:	785b      	ldrb	r3, [r3, #1]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	1d3b      	adds	r3, r7, #4
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	4619      	mov	r1, r3
 8004ae0:	f7ff fdb0 	bl	8004644 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004aee:	4a0a      	ldr	r2, [pc, #40]	; (8004b18 <_TrySendOverflowPacket+0xdc>)
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004af4:	4b08      	ldr	r3, [pc, #32]	; (8004b18 <_TrySendOverflowPacket+0xdc>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <_TrySendOverflowPacket+0xdc>)
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e004      	b.n	8004b0c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004b02:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <_TrySendOverflowPacket+0xdc>)
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	3301      	adds	r3, #1
 8004b08:	4a03      	ldr	r2, [pc, #12]	; (8004b18 <_TrySendOverflowPacket+0xdc>)
 8004b0a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004b0c:	693b      	ldr	r3, [r7, #16]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3730      	adds	r7, #48	; 0x30
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	200137ac 	.word	0x200137ac
 8004b1c:	e0001004 	.word	0xe0001004

08004b20 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	; 0x28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004b2c:	4b98      	ldr	r3, [pc, #608]	; (8004d90 <_SendPacket+0x270>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d010      	beq.n	8004b56 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004b34:	4b96      	ldr	r3, [pc, #600]	; (8004d90 <_SendPacket+0x270>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 812d 	beq.w	8004d98 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004b3e:	4b94      	ldr	r3, [pc, #592]	; (8004d90 <_SendPacket+0x270>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d109      	bne.n	8004b5a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004b46:	f7ff ff79 	bl	8004a3c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004b4a:	4b91      	ldr	r3, [pc, #580]	; (8004d90 <_SendPacket+0x270>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	f040 8124 	bne.w	8004d9c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004b54:	e001      	b.n	8004b5a <_SendPacket+0x3a>
    goto Send;
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <_SendPacket+0x3c>
Send:
 8004b5a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b1f      	cmp	r3, #31
 8004b60:	d809      	bhi.n	8004b76 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004b62:	4b8b      	ldr	r3, [pc, #556]	; (8004d90 <_SendPacket+0x270>)
 8004b64:	69da      	ldr	r2, [r3, #28]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f040 8115 	bne.w	8004da0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b17      	cmp	r3, #23
 8004b7a:	d807      	bhi.n	8004b8c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e0c4      	b.n	8004d16 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b7f      	cmp	r3, #127	; 0x7f
 8004b98:	d912      	bls.n	8004bc0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	09da      	lsrs	r2, r3, #7
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	3a01      	subs	r2, #1
 8004bb2:	60fa      	str	r2, [r7, #12]
 8004bb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	e006      	b.n	8004bce <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b7e      	cmp	r3, #126	; 0x7e
 8004bd2:	d807      	bhi.n	8004be4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	e098      	b.n	8004d16 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bea:	d212      	bcs.n	8004c12 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	09da      	lsrs	r2, r3, #7
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	3a01      	subs	r2, #1
 8004c04:	60fa      	str	r2, [r7, #12]
 8004c06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	701a      	strb	r2, [r3, #0]
 8004c10:	e081      	b.n	8004d16 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c18:	d21d      	bcs.n	8004c56 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	0b9a      	lsrs	r2, r3, #14
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	09db      	lsrs	r3, r3, #7
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	3a01      	subs	r2, #1
 8004c34:	60fa      	str	r2, [r7, #12]
 8004c36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	3a01      	subs	r2, #1
 8004c48:	60fa      	str	r2, [r7, #12]
 8004c4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	701a      	strb	r2, [r3, #0]
 8004c54:	e05f      	b.n	8004d16 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c5c:	d228      	bcs.n	8004cb0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	0d5a      	lsrs	r2, r3, #21
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	0b9b      	lsrs	r3, r3, #14
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	3a01      	subs	r2, #1
 8004c78:	60fa      	str	r2, [r7, #12]
 8004c7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	09db      	lsrs	r3, r3, #7
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	3a01      	subs	r2, #1
 8004c8e:	60fa      	str	r2, [r7, #12]
 8004c90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	3a01      	subs	r2, #1
 8004ca2:	60fa      	str	r2, [r7, #12]
 8004ca4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e032      	b.n	8004d16 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	0f1a      	lsrs	r2, r3, #28
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	0d5b      	lsrs	r3, r3, #21
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	60fa      	str	r2, [r7, #12]
 8004ccc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	0b9b      	lsrs	r3, r3, #14
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	3a01      	subs	r2, #1
 8004ce0:	60fa      	str	r2, [r7, #12]
 8004ce2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	09db      	lsrs	r3, r3, #7
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	3a01      	subs	r2, #1
 8004cf6:	60fa      	str	r2, [r7, #12]
 8004cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	3a01      	subs	r2, #1
 8004d0a:	60fa      	str	r2, [r7, #12]
 8004d0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d16:	4b1f      	ldr	r3, [pc, #124]	; (8004d94 <_SendPacket+0x274>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004d1c:	4b1c      	ldr	r3, [pc, #112]	; (8004d90 <_SendPacket+0x270>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	623b      	str	r3, [r7, #32]
 8004d2e:	e00b      	b.n	8004d48 <_SendPacket+0x228>
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	1c59      	adds	r1, r3, #1
 8004d38:	6279      	str	r1, [r7, #36]	; 0x24
 8004d3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	09db      	lsrs	r3, r3, #7
 8004d46:	623b      	str	r3, [r7, #32]
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d4c:	d8f0      	bhi.n	8004d30 <_SendPacket+0x210>
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	627a      	str	r2, [r7, #36]	; 0x24
 8004d54:	6a3a      	ldr	r2, [r7, #32]
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <_SendPacket+0x270>)
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	4618      	mov	r0, r3
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68f9      	ldr	r1, [r7, #12]
 8004d6e:	f7ff fc69 	bl	8004644 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004d72:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004d7a:	4a05      	ldr	r2, [pc, #20]	; (8004d90 <_SendPacket+0x270>)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	60d3      	str	r3, [r2, #12]
 8004d80:	e00f      	b.n	8004da2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004d82:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <_SendPacket+0x270>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	3301      	adds	r3, #1
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	4b01      	ldr	r3, [pc, #4]	; (8004d90 <_SendPacket+0x270>)
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e008      	b.n	8004da2 <_SendPacket+0x282>
 8004d90:	200137ac 	.word	0x200137ac
 8004d94:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004d98:	bf00      	nop
 8004d9a:	e002      	b.n	8004da2 <_SendPacket+0x282>
      goto SendDone;
 8004d9c:	bf00      	nop
 8004d9e:	e000      	b.n	8004da2 <_SendPacket+0x282>
      goto SendDone;
 8004da0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004da2:	4b14      	ldr	r3, [pc, #80]	; (8004df4 <_SendPacket+0x2d4>)
 8004da4:	7e1b      	ldrb	r3, [r3, #24]
 8004da6:	4619      	mov	r1, r3
 8004da8:	4a13      	ldr	r2, [pc, #76]	; (8004df8 <_SendPacket+0x2d8>)
 8004daa:	460b      	mov	r3, r1
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	440b      	add	r3, r1
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4413      	add	r3, r2
 8004db4:	336c      	adds	r3, #108	; 0x6c
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	4b0e      	ldr	r3, [pc, #56]	; (8004df4 <_SendPacket+0x2d4>)
 8004dba:	7e1b      	ldrb	r3, [r3, #24]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	490e      	ldr	r1, [pc, #56]	; (8004df8 <_SendPacket+0x2d8>)
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	4403      	add	r3, r0
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	440b      	add	r3, r1
 8004dca:	3370      	adds	r3, #112	; 0x70
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d00b      	beq.n	8004dea <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004dd2:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <_SendPacket+0x2d4>)
 8004dd4:	789b      	ldrb	r3, [r3, #2]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d107      	bne.n	8004dea <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <_SendPacket+0x2d4>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004de0:	f7ff fdbe 	bl	8004960 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004de4:	4b03      	ldr	r3, [pc, #12]	; (8004df4 <_SendPacket+0x2d4>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004dea:	bf00      	nop
 8004dec:	3728      	adds	r7, #40	; 0x28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	200137ac 	.word	0x200137ac
 8004df8:	20012eec 	.word	0x20012eec

08004dfc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e10:	4917      	ldr	r1, [pc, #92]	; (8004e70 <SEGGER_SYSVIEW_Init+0x74>)
 8004e12:	4818      	ldr	r0, [pc, #96]	; (8004e74 <SEGGER_SYSVIEW_Init+0x78>)
 8004e14:	f7ff fc98 	bl	8004748 <SEGGER_RTT_AllocUpBuffer>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	4b16      	ldr	r3, [pc, #88]	; (8004e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e1e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004e20:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e22:	785a      	ldrb	r2, [r3, #1]
 8004e24:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e26:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e28:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e2a:	7e1b      	ldrb	r3, [r3, #24]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	2308      	movs	r3, #8
 8004e34:	4a11      	ldr	r2, [pc, #68]	; (8004e7c <SEGGER_SYSVIEW_Init+0x80>)
 8004e36:	490f      	ldr	r1, [pc, #60]	; (8004e74 <SEGGER_SYSVIEW_Init+0x78>)
 8004e38:	f7ff fd0a 	bl	8004850 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e42:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <SEGGER_SYSVIEW_Init+0x84>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a0c      	ldr	r2, [pc, #48]	; (8004e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e48:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004e4a:	4a0b      	ldr	r2, [pc, #44]	; (8004e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004e50:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004e56:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004e5c:	4a06      	ldr	r2, [pc, #24]	; (8004e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	200133a4 	.word	0x200133a4
 8004e74:	08006c24 	.word	0x08006c24
 8004e78:	200137ac 	.word	0x200137ac
 8004e7c:	200137a4 	.word	0x200137a4
 8004e80:	e0001004 	.word	0xe0001004

08004e84 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004e8c:	4a04      	ldr	r2, [pc, #16]	; (8004ea0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6113      	str	r3, [r2, #16]
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	200137ac 	.word	0x200137ac

08004ea4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004eac:	f3ef 8311 	mrs	r3, BASEPRI
 8004eb0:	f04f 0120 	mov.w	r1, #32
 8004eb4:	f381 8811 	msr	BASEPRI, r1
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	4808      	ldr	r0, [pc, #32]	; (8004edc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004ebc:	f7ff fd44 	bl	8004948 <_PreparePacket>
 8004ec0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	68b8      	ldr	r0, [r7, #8]
 8004ec8:	f7ff fe2a 	bl	8004b20 <_SendPacket>
  RECORD_END();
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f383 8811 	msr	BASEPRI, r3
}
 8004ed2:	bf00      	nop
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	200137dc 	.word	0x200137dc

08004ee0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004eea:	f3ef 8311 	mrs	r3, BASEPRI
 8004eee:	f04f 0120 	mov.w	r1, #32
 8004ef2:	f381 8811 	msr	BASEPRI, r1
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	4816      	ldr	r0, [pc, #88]	; (8004f54 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004efa:	f7ff fd25 	bl	8004948 <_PreparePacket>
 8004efe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	61fb      	str	r3, [r7, #28]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	e00b      	b.n	8004f26 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	1c59      	adds	r1, r3, #1
 8004f16:	61f9      	str	r1, [r7, #28]
 8004f18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	09db      	lsrs	r3, r3, #7
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b7f      	cmp	r3, #127	; 0x7f
 8004f2a:	d8f0      	bhi.n	8004f0e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	61fa      	str	r2, [r7, #28]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	6938      	ldr	r0, [r7, #16]
 8004f42:	f7ff fded 	bl	8004b20 <_SendPacket>
  RECORD_END();
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f383 8811 	msr	BASEPRI, r3
}
 8004f4c:	bf00      	nop
 8004f4e:	3720      	adds	r7, #32
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	200137dc 	.word	0x200137dc

08004f58 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08c      	sub	sp, #48	; 0x30
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f64:	f3ef 8311 	mrs	r3, BASEPRI
 8004f68:	f04f 0120 	mov.w	r1, #32
 8004f6c:	f381 8811 	msr	BASEPRI, r1
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	4825      	ldr	r0, [pc, #148]	; (8005008 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004f74:	f7ff fce8 	bl	8004948 <_PreparePacket>
 8004f78:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f86:	e00b      	b.n	8004fa0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8e:	1c59      	adds	r1, r3, #1
 8004f90:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	09db      	lsrs	r3, r3, #7
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa4:	d8f0      	bhi.n	8004f88 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	623b      	str	r3, [r7, #32]
 8004fbe:	e00b      	b.n	8004fd8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	1c59      	adds	r1, r3, #1
 8004fc8:	6279      	str	r1, [r7, #36]	; 0x24
 8004fca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	09db      	lsrs	r3, r3, #7
 8004fd6:	623b      	str	r3, [r7, #32]
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	2b7f      	cmp	r3, #127	; 0x7f
 8004fdc:	d8f0      	bhi.n	8004fc0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	627a      	str	r2, [r7, #36]	; 0x24
 8004fe4:	6a3a      	ldr	r2, [r7, #32]
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	6979      	ldr	r1, [r7, #20]
 8004ff2:	69b8      	ldr	r0, [r7, #24]
 8004ff4:	f7ff fd94 	bl	8004b20 <_SendPacket>
  RECORD_END();
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f383 8811 	msr	BASEPRI, r3
}
 8004ffe:	bf00      	nop
 8005000:	3730      	adds	r7, #48	; 0x30
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	200137dc 	.word	0x200137dc

0800500c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b08e      	sub	sp, #56	; 0x38
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800501a:	f3ef 8311 	mrs	r3, BASEPRI
 800501e:	f04f 0120 	mov.w	r1, #32
 8005022:	f381 8811 	msr	BASEPRI, r1
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	4832      	ldr	r0, [pc, #200]	; (80050f4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800502a:	f7ff fc8d 	bl	8004948 <_PreparePacket>
 800502e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	637b      	str	r3, [r7, #52]	; 0x34
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	633b      	str	r3, [r7, #48]	; 0x30
 800503c:	e00b      	b.n	8005056 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	b2da      	uxtb	r2, r3
 8005042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005044:	1c59      	adds	r1, r3, #1
 8005046:	6379      	str	r1, [r7, #52]	; 0x34
 8005048:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	09db      	lsrs	r3, r3, #7
 8005054:	633b      	str	r3, [r7, #48]	; 0x30
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	2b7f      	cmp	r3, #127	; 0x7f
 800505a:	d8f0      	bhi.n	800503e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800505c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	637a      	str	r2, [r7, #52]	; 0x34
 8005062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28
 8005074:	e00b      	b.n	800508e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	b2da      	uxtb	r2, r3
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	1c59      	adds	r1, r3, #1
 800507e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005080:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	09db      	lsrs	r3, r3, #7
 800508c:	62bb      	str	r3, [r7, #40]	; 0x28
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	2b7f      	cmp	r3, #127	; 0x7f
 8005092:	d8f0      	bhi.n	8005076 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	62fa      	str	r2, [r7, #44]	; 0x2c
 800509a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	623b      	str	r3, [r7, #32]
 80050ac:	e00b      	b.n	80050c6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	1c59      	adds	r1, r3, #1
 80050b6:	6279      	str	r1, [r7, #36]	; 0x24
 80050b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	09db      	lsrs	r3, r3, #7
 80050c4:	623b      	str	r3, [r7, #32]
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	2b7f      	cmp	r3, #127	; 0x7f
 80050ca:	d8f0      	bhi.n	80050ae <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	627a      	str	r2, [r7, #36]	; 0x24
 80050d2:	6a3a      	ldr	r2, [r7, #32]
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	6979      	ldr	r1, [r7, #20]
 80050e0:	69b8      	ldr	r0, [r7, #24]
 80050e2:	f7ff fd1d 	bl	8004b20 <_SendPacket>
  RECORD_END();
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f383 8811 	msr	BASEPRI, r3
}
 80050ec:	bf00      	nop
 80050ee:	3738      	adds	r7, #56	; 0x38
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	200137dc 	.word	0x200137dc

080050f8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b090      	sub	sp, #64	; 0x40
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005106:	f3ef 8311 	mrs	r3, BASEPRI
 800510a:	f04f 0120 	mov.w	r1, #32
 800510e:	f381 8811 	msr	BASEPRI, r1
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	4840      	ldr	r0, [pc, #256]	; (8005218 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005116:	f7ff fc17 	bl	8004948 <_PreparePacket>
 800511a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	63bb      	str	r3, [r7, #56]	; 0x38
 8005128:	e00b      	b.n	8005142 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	b2da      	uxtb	r2, r3
 800512e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005130:	1c59      	adds	r1, r3, #1
 8005132:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005134:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	09db      	lsrs	r3, r3, #7
 8005140:	63bb      	str	r3, [r7, #56]	; 0x38
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	2b7f      	cmp	r3, #127	; 0x7f
 8005146:	d8f0      	bhi.n	800512a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800514e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005156:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	637b      	str	r3, [r7, #52]	; 0x34
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	633b      	str	r3, [r7, #48]	; 0x30
 8005160:	e00b      	b.n	800517a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	b2da      	uxtb	r2, r3
 8005166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005168:	1c59      	adds	r1, r3, #1
 800516a:	6379      	str	r1, [r7, #52]	; 0x34
 800516c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	09db      	lsrs	r3, r3, #7
 8005178:	633b      	str	r3, [r7, #48]	; 0x30
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	2b7f      	cmp	r3, #127	; 0x7f
 800517e:	d8f0      	bhi.n	8005162 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	637a      	str	r2, [r7, #52]	; 0x34
 8005186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28
 8005198:	e00b      	b.n	80051b2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	b2da      	uxtb	r2, r3
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	1c59      	adds	r1, r3, #1
 80051a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	701a      	strb	r2, [r3, #0]
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	09db      	lsrs	r3, r3, #7
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	2b7f      	cmp	r3, #127	; 0x7f
 80051b6:	d8f0      	bhi.n	800519a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	701a      	strb	r2, [r3, #0]
 80051c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
 80051cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	e00b      	b.n	80051ea <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	1c59      	adds	r1, r3, #1
 80051da:	6279      	str	r1, [r7, #36]	; 0x24
 80051dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	09db      	lsrs	r3, r3, #7
 80051e8:	623b      	str	r3, [r7, #32]
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	2b7f      	cmp	r3, #127	; 0x7f
 80051ee:	d8f0      	bhi.n	80051d2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	627a      	str	r2, [r7, #36]	; 0x24
 80051f6:	6a3a      	ldr	r2, [r7, #32]
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	6979      	ldr	r1, [r7, #20]
 8005204:	69b8      	ldr	r0, [r7, #24]
 8005206:	f7ff fc8b 	bl	8004b20 <_SendPacket>
  RECORD_END();
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f383 8811 	msr	BASEPRI, r3
}
 8005210:	bf00      	nop
 8005212:	3740      	adds	r7, #64	; 0x40
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	200137dc 	.word	0x200137dc

0800521c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800521c:	b580      	push	{r7, lr}
 800521e:	b08c      	sub	sp, #48	; 0x30
 8005220:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005222:	4b58      	ldr	r3, [pc, #352]	; (8005384 <SEGGER_SYSVIEW_Start+0x168>)
 8005224:	2201      	movs	r2, #1
 8005226:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005228:	f3ef 8311 	mrs	r3, BASEPRI
 800522c:	f04f 0120 	mov.w	r1, #32
 8005230:	f381 8811 	msr	BASEPRI, r1
 8005234:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005236:	4b53      	ldr	r3, [pc, #332]	; (8005384 <SEGGER_SYSVIEW_Start+0x168>)
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	220a      	movs	r2, #10
 800523c:	4952      	ldr	r1, [pc, #328]	; (8005388 <SEGGER_SYSVIEW_Start+0x16c>)
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff fa00 	bl	8004644 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800524a:	200a      	movs	r0, #10
 800524c:	f7ff fe2a 	bl	8004ea4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005250:	f3ef 8311 	mrs	r3, BASEPRI
 8005254:	f04f 0120 	mov.w	r1, #32
 8005258:	f381 8811 	msr	BASEPRI, r1
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	484b      	ldr	r0, [pc, #300]	; (800538c <SEGGER_SYSVIEW_Start+0x170>)
 8005260:	f7ff fb72 	bl	8004948 <_PreparePacket>
 8005264:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800526e:	4b45      	ldr	r3, [pc, #276]	; (8005384 <SEGGER_SYSVIEW_Start+0x168>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	62bb      	str	r3, [r7, #40]	; 0x28
 8005274:	e00b      	b.n	800528e <SEGGER_SYSVIEW_Start+0x72>
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	b2da      	uxtb	r2, r3
 800527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527c:	1c59      	adds	r1, r3, #1
 800527e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005280:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528a:	09db      	lsrs	r3, r3, #7
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	2b7f      	cmp	r3, #127	; 0x7f
 8005292:	d8f0      	bhi.n	8005276 <SEGGER_SYSVIEW_Start+0x5a>
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	62fa      	str	r2, [r7, #44]	; 0x2c
 800529a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	701a      	strb	r2, [r3, #0]
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
 80052a8:	4b36      	ldr	r3, [pc, #216]	; (8005384 <SEGGER_SYSVIEW_Start+0x168>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	623b      	str	r3, [r7, #32]
 80052ae:	e00b      	b.n	80052c8 <SEGGER_SYSVIEW_Start+0xac>
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	1c59      	adds	r1, r3, #1
 80052b8:	6279      	str	r1, [r7, #36]	; 0x24
 80052ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	09db      	lsrs	r3, r3, #7
 80052c6:	623b      	str	r3, [r7, #32]
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	2b7f      	cmp	r3, #127	; 0x7f
 80052cc:	d8f0      	bhi.n	80052b0 <SEGGER_SYSVIEW_Start+0x94>
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	627a      	str	r2, [r7, #36]	; 0x24
 80052d4:	6a3a      	ldr	r2, [r7, #32]
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	4b28      	ldr	r3, [pc, #160]	; (8005384 <SEGGER_SYSVIEW_Start+0x168>)
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	e00b      	b.n	8005302 <SEGGER_SYSVIEW_Start+0xe6>
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	1c59      	adds	r1, r3, #1
 80052f2:	61f9      	str	r1, [r7, #28]
 80052f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	09db      	lsrs	r3, r3, #7
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b7f      	cmp	r3, #127	; 0x7f
 8005306:	d8f0      	bhi.n	80052ea <SEGGER_SYSVIEW_Start+0xce>
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	61fa      	str	r2, [r7, #28]
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	2300      	movs	r3, #0
 800531e:	613b      	str	r3, [r7, #16]
 8005320:	e00b      	b.n	800533a <SEGGER_SYSVIEW_Start+0x11e>
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	b2da      	uxtb	r2, r3
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	1c59      	adds	r1, r3, #1
 800532a:	6179      	str	r1, [r7, #20]
 800532c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	09db      	lsrs	r3, r3, #7
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b7f      	cmp	r3, #127	; 0x7f
 800533e:	d8f0      	bhi.n	8005322 <SEGGER_SYSVIEW_Start+0x106>
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	617a      	str	r2, [r7, #20]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	701a      	strb	r2, [r3, #0]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005350:	2218      	movs	r2, #24
 8005352:	6839      	ldr	r1, [r7, #0]
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff fbe3 	bl	8004b20 <_SendPacket>
      RECORD_END();
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005360:	4b08      	ldr	r3, [pc, #32]	; (8005384 <SEGGER_SYSVIEW_Start+0x168>)
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005368:	4b06      	ldr	r3, [pc, #24]	; (8005384 <SEGGER_SYSVIEW_Start+0x168>)
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800536e:	f000 f9eb 	bl	8005748 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005372:	f000 f9b1 	bl	80056d8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005376:	f000 fc8d 	bl	8005c94 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800537a:	bf00      	nop
 800537c:	3730      	adds	r7, #48	; 0x30
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	200137ac 	.word	0x200137ac
 8005388:	08006cb0 	.word	0x08006cb0
 800538c:	200137dc 	.word	0x200137dc

08005390 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005396:	f3ef 8311 	mrs	r3, BASEPRI
 800539a:	f04f 0120 	mov.w	r1, #32
 800539e:	f381 8811 	msr	BASEPRI, r1
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	480b      	ldr	r0, [pc, #44]	; (80053d4 <SEGGER_SYSVIEW_Stop+0x44>)
 80053a6:	f7ff facf 	bl	8004948 <_PreparePacket>
 80053aa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80053b4:	220b      	movs	r2, #11
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	6838      	ldr	r0, [r7, #0]
 80053ba:	f7ff fbb1 	bl	8004b20 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80053be:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f383 8811 	msr	BASEPRI, r3
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	200137dc 	.word	0x200137dc
 80053d8:	200137ac 	.word	0x200137ac

080053dc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08c      	sub	sp, #48	; 0x30
 80053e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80053e2:	f3ef 8311 	mrs	r3, BASEPRI
 80053e6:	f04f 0120 	mov.w	r1, #32
 80053ea:	f381 8811 	msr	BASEPRI, r1
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	4845      	ldr	r0, [pc, #276]	; (8005508 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80053f2:	f7ff faa9 	bl	8004948 <_PreparePacket>
 80053f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005400:	4b42      	ldr	r3, [pc, #264]	; (800550c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
 8005406:	e00b      	b.n	8005420 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	b2da      	uxtb	r2, r3
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	1c59      	adds	r1, r3, #1
 8005410:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005412:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541c:	09db      	lsrs	r3, r3, #7
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	2b7f      	cmp	r3, #127	; 0x7f
 8005424:	d8f0      	bhi.n	8005408 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800542c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
 800543a:	4b34      	ldr	r3, [pc, #208]	; (800550c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	623b      	str	r3, [r7, #32]
 8005440:	e00b      	b.n	800545a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	b2da      	uxtb	r2, r3
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	1c59      	adds	r1, r3, #1
 800544a:	6279      	str	r1, [r7, #36]	; 0x24
 800544c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	09db      	lsrs	r3, r3, #7
 8005458:	623b      	str	r3, [r7, #32]
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	2b7f      	cmp	r3, #127	; 0x7f
 800545e:	d8f0      	bhi.n	8005442 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	627a      	str	r2, [r7, #36]	; 0x24
 8005466:	6a3a      	ldr	r2, [r7, #32]
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	4b25      	ldr	r3, [pc, #148]	; (800550c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	e00b      	b.n	8005494 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	b2da      	uxtb	r2, r3
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	1c59      	adds	r1, r3, #1
 8005484:	61f9      	str	r1, [r7, #28]
 8005486:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	09db      	lsrs	r3, r3, #7
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b7f      	cmp	r3, #127	; 0x7f
 8005498:	d8f0      	bhi.n	800547c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	61fa      	str	r2, [r7, #28]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	2300      	movs	r3, #0
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	e00b      	b.n	80054cc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	1c59      	adds	r1, r3, #1
 80054bc:	6179      	str	r1, [r7, #20]
 80054be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	09db      	lsrs	r3, r3, #7
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	2b7f      	cmp	r3, #127	; 0x7f
 80054d0:	d8f0      	bhi.n	80054b4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	617a      	str	r2, [r7, #20]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80054e2:	2218      	movs	r2, #24
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	68b8      	ldr	r0, [r7, #8]
 80054e8:	f7ff fb1a 	bl	8004b20 <_SendPacket>
  RECORD_END();
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80054f2:	4b06      	ldr	r3, [pc, #24]	; (800550c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80054fa:	4b04      	ldr	r3, [pc, #16]	; (800550c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	4798      	blx	r3
  }
}
 8005500:	bf00      	nop
 8005502:	3730      	adds	r7, #48	; 0x30
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	200137dc 	.word	0x200137dc
 800550c:	200137ac 	.word	0x200137ac

08005510 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b092      	sub	sp, #72	; 0x48
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005518:	f3ef 8311 	mrs	r3, BASEPRI
 800551c:	f04f 0120 	mov.w	r1, #32
 8005520:	f381 8811 	msr	BASEPRI, r1
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	486a      	ldr	r0, [pc, #424]	; (80056d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005528:	f7ff fa0e 	bl	8004948 <_PreparePacket>
 800552c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	647b      	str	r3, [r7, #68]	; 0x44
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4b66      	ldr	r3, [pc, #408]	; (80056d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	643b      	str	r3, [r7, #64]	; 0x40
 8005542:	e00b      	b.n	800555c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005546:	b2da      	uxtb	r2, r3
 8005548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554a:	1c59      	adds	r1, r3, #1
 800554c:	6479      	str	r1, [r7, #68]	; 0x44
 800554e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005558:	09db      	lsrs	r3, r3, #7
 800555a:	643b      	str	r3, [r7, #64]	; 0x40
 800555c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800555e:	2b7f      	cmp	r3, #127	; 0x7f
 8005560:	d8f0      	bhi.n	8005544 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	647a      	str	r2, [r7, #68]	; 0x44
 8005568:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005570:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	63bb      	str	r3, [r7, #56]	; 0x38
 800557c:	e00b      	b.n	8005596 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	b2da      	uxtb	r2, r3
 8005582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005584:	1c59      	adds	r1, r3, #1
 8005586:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005588:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	09db      	lsrs	r3, r3, #7
 8005594:	63bb      	str	r3, [r7, #56]	; 0x38
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	2b7f      	cmp	r3, #127	; 0x7f
 800559a:	d8f0      	bhi.n	800557e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800559c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
 80055a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055aa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	4619      	mov	r1, r3
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f7ff f997 	bl	80048e8 <_EncodeStr>
 80055ba:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80055bc:	2209      	movs	r2, #9
 80055be:	68f9      	ldr	r1, [r7, #12]
 80055c0:	6938      	ldr	r0, [r7, #16]
 80055c2:	f7ff faad 	bl	8004b20 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	637b      	str	r3, [r7, #52]	; 0x34
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b40      	ldr	r3, [pc, #256]	; (80056d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	633b      	str	r3, [r7, #48]	; 0x30
 80055da:	e00b      	b.n	80055f4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e2:	1c59      	adds	r1, r3, #1
 80055e4:	6379      	str	r1, [r7, #52]	; 0x34
 80055e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	09db      	lsrs	r3, r3, #7
 80055f2:	633b      	str	r3, [r7, #48]	; 0x30
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	2b7f      	cmp	r3, #127	; 0x7f
 80055f8:	d8f0      	bhi.n	80055dc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80055fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	637a      	str	r2, [r7, #52]	; 0x34
 8005600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005608:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
 8005614:	e00b      	b.n	800562e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	b2da      	uxtb	r2, r3
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	1c59      	adds	r1, r3, #1
 800561e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005620:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	701a      	strb	r2, [r3, #0]
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	09db      	lsrs	r3, r3, #7
 800562c:	62bb      	str	r3, [r7, #40]	; 0x28
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	2b7f      	cmp	r3, #127	; 0x7f
 8005632:	d8f0      	bhi.n	8005616 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	62fa      	str	r2, [r7, #44]	; 0x2c
 800563a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	701a      	strb	r2, [r3, #0]
 8005640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005642:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	623b      	str	r3, [r7, #32]
 800564e:	e00b      	b.n	8005668 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	b2da      	uxtb	r2, r3
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	1c59      	adds	r1, r3, #1
 8005658:	6279      	str	r1, [r7, #36]	; 0x24
 800565a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	09db      	lsrs	r3, r3, #7
 8005666:	623b      	str	r3, [r7, #32]
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	2b7f      	cmp	r3, #127	; 0x7f
 800566c:	d8f0      	bhi.n	8005650 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	627a      	str	r2, [r7, #36]	; 0x24
 8005674:	6a3a      	ldr	r2, [r7, #32]
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	2300      	movs	r3, #0
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	e00b      	b.n	80056a0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	b2da      	uxtb	r2, r3
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	1c59      	adds	r1, r3, #1
 8005690:	61f9      	str	r1, [r7, #28]
 8005692:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	09db      	lsrs	r3, r3, #7
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	2b7f      	cmp	r3, #127	; 0x7f
 80056a4:	d8f0      	bhi.n	8005688 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	61fa      	str	r2, [r7, #28]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80056b6:	2215      	movs	r2, #21
 80056b8:	68f9      	ldr	r1, [r7, #12]
 80056ba:	6938      	ldr	r0, [r7, #16]
 80056bc:	f7ff fa30 	bl	8004b20 <_SendPacket>
  RECORD_END();
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f383 8811 	msr	BASEPRI, r3
}
 80056c6:	bf00      	nop
 80056c8:	3748      	adds	r7, #72	; 0x48
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200137dc 	.word	0x200137dc
 80056d4:	200137ac 	.word	0x200137ac

080056d8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80056dc:	4b07      	ldr	r3, [pc, #28]	; (80056fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80056e4:	4b05      	ldr	r3, [pc, #20]	; (80056fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80056ee:	4b03      	ldr	r3, [pc, #12]	; (80056fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4798      	blx	r3
  }
}
 80056f6:	bf00      	nop
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	200137ac 	.word	0x200137ac

08005700 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005708:	f3ef 8311 	mrs	r3, BASEPRI
 800570c:	f04f 0120 	mov.w	r1, #32
 8005710:	f381 8811 	msr	BASEPRI, r1
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	480b      	ldr	r0, [pc, #44]	; (8005744 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005718:	f7ff f916 	bl	8004948 <_PreparePacket>
 800571c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800571e:	2280      	movs	r2, #128	; 0x80
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	6938      	ldr	r0, [r7, #16]
 8005724:	f7ff f8e0 	bl	80048e8 <_EncodeStr>
 8005728:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800572a:	220e      	movs	r2, #14
 800572c:	68f9      	ldr	r1, [r7, #12]
 800572e:	6938      	ldr	r0, [r7, #16]
 8005730:	f7ff f9f6 	bl	8004b20 <_SendPacket>
  RECORD_END();
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f383 8811 	msr	BASEPRI, r3
}
 800573a:	bf00      	nop
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	200137dc 	.word	0x200137dc

08005748 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005748:	b590      	push	{r4, r7, lr}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800574e:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01a      	beq.n	800578c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005756:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d015      	beq.n	800578c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005760:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4798      	blx	r3
 8005768:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800576c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800576e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	000a      	movs	r2, r1
 800577c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800577e:	4613      	mov	r3, r2
 8005780:	461a      	mov	r2, r3
 8005782:	4621      	mov	r1, r4
 8005784:	200d      	movs	r0, #13
 8005786:	f7ff fbe7 	bl	8004f58 <SEGGER_SYSVIEW_RecordU32x2>
 800578a:	e006      	b.n	800579a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800578c:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4619      	mov	r1, r3
 8005792:	200c      	movs	r0, #12
 8005794:	f7ff fba4 	bl	8004ee0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd90      	pop	{r4, r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200137ac 	.word	0x200137ac
 80057a8:	e0001004 	.word	0xe0001004

080057ac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057b2:	f3ef 8311 	mrs	r3, BASEPRI
 80057b6:	f04f 0120 	mov.w	r1, #32
 80057ba:	f381 8811 	msr	BASEPRI, r1
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	4819      	ldr	r0, [pc, #100]	; (8005828 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80057c2:	f7ff f8c1 	bl	8004948 <_PreparePacket>
 80057c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80057cc:	4b17      	ldr	r3, [pc, #92]	; (800582c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	e00b      	b.n	80057f8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	1c59      	adds	r1, r3, #1
 80057e8:	6179      	str	r1, [r7, #20]
 80057ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	09db      	lsrs	r3, r3, #7
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b7f      	cmp	r3, #127	; 0x7f
 80057fc:	d8f0      	bhi.n	80057e0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	617a      	str	r2, [r7, #20]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800580e:	2202      	movs	r2, #2
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	68b8      	ldr	r0, [r7, #8]
 8005814:	f7ff f984 	bl	8004b20 <_SendPacket>
  RECORD_END();
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f383 8811 	msr	BASEPRI, r3
}
 800581e:	bf00      	nop
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	200137dc 	.word	0x200137dc
 800582c:	e000ed04 	.word	0xe000ed04

08005830 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005836:	f3ef 8311 	mrs	r3, BASEPRI
 800583a:	f04f 0120 	mov.w	r1, #32
 800583e:	f381 8811 	msr	BASEPRI, r1
 8005842:	607b      	str	r3, [r7, #4]
 8005844:	4807      	ldr	r0, [pc, #28]	; (8005864 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005846:	f7ff f87f 	bl	8004948 <_PreparePacket>
 800584a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800584c:	2203      	movs	r2, #3
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	6838      	ldr	r0, [r7, #0]
 8005852:	f7ff f965 	bl	8004b20 <_SendPacket>
  RECORD_END();
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f383 8811 	msr	BASEPRI, r3
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	200137dc 	.word	0x200137dc

08005868 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800586e:	f3ef 8311 	mrs	r3, BASEPRI
 8005872:	f04f 0120 	mov.w	r1, #32
 8005876:	f381 8811 	msr	BASEPRI, r1
 800587a:	607b      	str	r3, [r7, #4]
 800587c:	4807      	ldr	r0, [pc, #28]	; (800589c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800587e:	f7ff f863 	bl	8004948 <_PreparePacket>
 8005882:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005884:	2212      	movs	r2, #18
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	6838      	ldr	r0, [r7, #0]
 800588a:	f7ff f949 	bl	8004b20 <_SendPacket>
  RECORD_END();
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f383 8811 	msr	BASEPRI, r3
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	200137dc 	.word	0x200137dc

080058a0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058a6:	f3ef 8311 	mrs	r3, BASEPRI
 80058aa:	f04f 0120 	mov.w	r1, #32
 80058ae:	f381 8811 	msr	BASEPRI, r1
 80058b2:	607b      	str	r3, [r7, #4]
 80058b4:	4807      	ldr	r0, [pc, #28]	; (80058d4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80058b6:	f7ff f847 	bl	8004948 <_PreparePacket>
 80058ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80058bc:	2211      	movs	r2, #17
 80058be:	6839      	ldr	r1, [r7, #0]
 80058c0:	6838      	ldr	r0, [r7, #0]
 80058c2:	f7ff f92d 	bl	8004b20 <_SendPacket>
  RECORD_END();
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f383 8811 	msr	BASEPRI, r3
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	200137dc 	.word	0x200137dc

080058d8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058e0:	f3ef 8311 	mrs	r3, BASEPRI
 80058e4:	f04f 0120 	mov.w	r1, #32
 80058e8:	f381 8811 	msr	BASEPRI, r1
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	4819      	ldr	r0, [pc, #100]	; (8005954 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80058f0:	f7ff f82a 	bl	8004948 <_PreparePacket>
 80058f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80058fa:	4b17      	ldr	r3, [pc, #92]	; (8005958 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	61bb      	str	r3, [r7, #24]
 800590c:	e00b      	b.n	8005926 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	b2da      	uxtb	r2, r3
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	1c59      	adds	r1, r3, #1
 8005916:	61f9      	str	r1, [r7, #28]
 8005918:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	09db      	lsrs	r3, r3, #7
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2b7f      	cmp	r3, #127	; 0x7f
 800592a:	d8f0      	bhi.n	800590e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	61fa      	str	r2, [r7, #28]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800593c:	2208      	movs	r2, #8
 800593e:	68f9      	ldr	r1, [r7, #12]
 8005940:	6938      	ldr	r0, [r7, #16]
 8005942:	f7ff f8ed 	bl	8004b20 <_SendPacket>
  RECORD_END();
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f383 8811 	msr	BASEPRI, r3
}
 800594c:	bf00      	nop
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	200137dc 	.word	0x200137dc
 8005958:	200137ac 	.word	0x200137ac

0800595c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005964:	f3ef 8311 	mrs	r3, BASEPRI
 8005968:	f04f 0120 	mov.w	r1, #32
 800596c:	f381 8811 	msr	BASEPRI, r1
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	4819      	ldr	r0, [pc, #100]	; (80059d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005974:	f7fe ffe8 	bl	8004948 <_PreparePacket>
 8005978:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800597e:	4b17      	ldr	r3, [pc, #92]	; (80059dc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	61bb      	str	r3, [r7, #24]
 8005990:	e00b      	b.n	80059aa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	b2da      	uxtb	r2, r3
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	1c59      	adds	r1, r3, #1
 800599a:	61f9      	str	r1, [r7, #28]
 800599c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	09db      	lsrs	r3, r3, #7
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	2b7f      	cmp	r3, #127	; 0x7f
 80059ae:	d8f0      	bhi.n	8005992 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	61fa      	str	r2, [r7, #28]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80059c0:	2204      	movs	r2, #4
 80059c2:	68f9      	ldr	r1, [r7, #12]
 80059c4:	6938      	ldr	r0, [r7, #16]
 80059c6:	f7ff f8ab 	bl	8004b20 <_SendPacket>
  RECORD_END();
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f383 8811 	msr	BASEPRI, r3
}
 80059d0:	bf00      	nop
 80059d2:	3720      	adds	r7, #32
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	200137dc 	.word	0x200137dc
 80059dc:	200137ac 	.word	0x200137ac

080059e0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059e8:	f3ef 8311 	mrs	r3, BASEPRI
 80059ec:	f04f 0120 	mov.w	r1, #32
 80059f0:	f381 8811 	msr	BASEPRI, r1
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	4819      	ldr	r0, [pc, #100]	; (8005a5c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80059f8:	f7fe ffa6 	bl	8004948 <_PreparePacket>
 80059fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a02:	4b17      	ldr	r3, [pc, #92]	; (8005a60 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	61bb      	str	r3, [r7, #24]
 8005a14:	e00b      	b.n	8005a2e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	1c59      	adds	r1, r3, #1
 8005a1e:	61f9      	str	r1, [r7, #28]
 8005a20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	09db      	lsrs	r3, r3, #7
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b7f      	cmp	r3, #127	; 0x7f
 8005a32:	d8f0      	bhi.n	8005a16 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	61fa      	str	r2, [r7, #28]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005a44:	2206      	movs	r2, #6
 8005a46:	68f9      	ldr	r1, [r7, #12]
 8005a48:	6938      	ldr	r0, [r7, #16]
 8005a4a:	f7ff f869 	bl	8004b20 <_SendPacket>
  RECORD_END();
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f383 8811 	msr	BASEPRI, r3
}
 8005a54:	bf00      	nop
 8005a56:	3720      	adds	r7, #32
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	200137dc 	.word	0x200137dc
 8005a60:	200137ac 	.word	0x200137ac

08005a64 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a72:	f04f 0120 	mov.w	r1, #32
 8005a76:	f381 8811 	msr	BASEPRI, r1
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	4827      	ldr	r0, [pc, #156]	; (8005b1c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005a7e:	f7fe ff63 	bl	8004948 <_PreparePacket>
 8005a82:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a88:	4b25      	ldr	r3, [pc, #148]	; (8005b20 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	623b      	str	r3, [r7, #32]
 8005a9a:	e00b      	b.n	8005ab4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	1c59      	adds	r1, r3, #1
 8005aa4:	6279      	str	r1, [r7, #36]	; 0x24
 8005aa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	09db      	lsrs	r3, r3, #7
 8005ab2:	623b      	str	r3, [r7, #32]
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab8:	d8f0      	bhi.n	8005a9c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	627a      	str	r2, [r7, #36]	; 0x24
 8005ac0:	6a3a      	ldr	r2, [r7, #32]
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	61fb      	str	r3, [r7, #28]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	e00b      	b.n	8005aec <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	1c59      	adds	r1, r3, #1
 8005adc:	61f9      	str	r1, [r7, #28]
 8005ade:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	09db      	lsrs	r3, r3, #7
 8005aea:	61bb      	str	r3, [r7, #24]
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	2b7f      	cmp	r3, #127	; 0x7f
 8005af0:	d8f0      	bhi.n	8005ad4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	61fa      	str	r2, [r7, #28]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005b02:	2207      	movs	r2, #7
 8005b04:	68f9      	ldr	r1, [r7, #12]
 8005b06:	6938      	ldr	r0, [r7, #16]
 8005b08:	f7ff f80a 	bl	8004b20 <_SendPacket>
  RECORD_END();
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f383 8811 	msr	BASEPRI, r3
}
 8005b12:	bf00      	nop
 8005b14:	3728      	adds	r7, #40	; 0x28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200137dc 	.word	0x200137dc
 8005b20:	200137ac 	.word	0x200137ac

08005b24 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005b2c:	4b04      	ldr	r3, [pc, #16]	; (8005b40 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	1ad3      	subs	r3, r2, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	200137ac 	.word	0x200137ac

08005b44 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08c      	sub	sp, #48	; 0x30
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005b4e:	4b40      	ldr	r3, [pc, #256]	; (8005c50 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d077      	beq.n	8005c46 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005b56:	4b3e      	ldr	r3, [pc, #248]	; (8005c50 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b60:	e008      	b.n	8005b74 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	3301      	adds	r3, #1
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b74:	79fb      	ldrb	r3, [r7, #7]
 8005b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d3f2      	bcc.n	8005b62 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005b7c:	e000      	b.n	8005b80 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005b7e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d055      	beq.n	8005c32 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b86:	f3ef 8311 	mrs	r3, BASEPRI
 8005b8a:	f04f 0120 	mov.w	r1, #32
 8005b8e:	f381 8811 	msr	BASEPRI, r1
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	482f      	ldr	r0, [pc, #188]	; (8005c54 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005b96:	f7fe fed7 	bl	8004948 <_PreparePacket>
 8005b9a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	623b      	str	r3, [r7, #32]
 8005ba8:	e00b      	b.n	8005bc2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	1c59      	adds	r1, r3, #1
 8005bb2:	6279      	str	r1, [r7, #36]	; 0x24
 8005bb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	09db      	lsrs	r3, r3, #7
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc6:	d8f0      	bhi.n	8005baa <SEGGER_SYSVIEW_SendModule+0x66>
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	627a      	str	r2, [r7, #36]	; 0x24
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	61fb      	str	r3, [r7, #28]
 8005bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	e00b      	b.n	8005bfc <SEGGER_SYSVIEW_SendModule+0xb8>
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	1c59      	adds	r1, r3, #1
 8005bec:	61f9      	str	r1, [r7, #28]
 8005bee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	09db      	lsrs	r3, r3, #7
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8005c00:	d8f0      	bhi.n	8005be4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	61fa      	str	r2, [r7, #28]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2280      	movs	r2, #128	; 0x80
 8005c18:	4619      	mov	r1, r3
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f7fe fe64 	bl	80048e8 <_EncodeStr>
 8005c20:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005c22:	2216      	movs	r2, #22
 8005c24:	68f9      	ldr	r1, [r7, #12]
 8005c26:	6938      	ldr	r0, [r7, #16]
 8005c28:	f7fe ff7a 	bl	8004b20 <_SendPacket>
      RECORD_END();
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d006      	beq.n	8005c46 <SEGGER_SYSVIEW_SendModule+0x102>
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	4798      	blx	r3
    }
  }
}
 8005c46:	bf00      	nop
 8005c48:	3730      	adds	r7, #48	; 0x30
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	200137d4 	.word	0x200137d4
 8005c54:	200137dc 	.word	0x200137dc

08005c58 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00f      	beq.n	8005c86 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005c66:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f2      	bne.n	8005c6c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	200137d4 	.word	0x200137d4

08005c94 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c9e:	f04f 0120 	mov.w	r1, #32
 8005ca2:	f381 8811 	msr	BASEPRI, r1
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	4817      	ldr	r0, [pc, #92]	; (8005d08 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005caa:	f7fe fe4d 	bl	8004948 <_PreparePacket>
 8005cae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	4b14      	ldr	r3, [pc, #80]	; (8005d0c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	e00b      	b.n	8005cd8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1c59      	adds	r1, r3, #1
 8005cc8:	6179      	str	r1, [r7, #20]
 8005cca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	09db      	lsrs	r3, r3, #7
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b7f      	cmp	r3, #127	; 0x7f
 8005cdc:	d8f0      	bhi.n	8005cc0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	617a      	str	r2, [r7, #20]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005cee:	221b      	movs	r2, #27
 8005cf0:	6879      	ldr	r1, [r7, #4]
 8005cf2:	68b8      	ldr	r0, [r7, #8]
 8005cf4:	f7fe ff14 	bl	8004b20 <_SendPacket>
  RECORD_END();
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f383 8811 	msr	BASEPRI, r3
}
 8005cfe:	bf00      	nop
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	200137dc 	.word	0x200137dc
 8005d0c:	200137d8 	.word	0x200137d8

08005d10 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08a      	sub	sp, #40	; 0x28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d18:	f3ef 8311 	mrs	r3, BASEPRI
 8005d1c:	f04f 0120 	mov.w	r1, #32
 8005d20:	f381 8811 	msr	BASEPRI, r1
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	4827      	ldr	r0, [pc, #156]	; (8005dc4 <SEGGER_SYSVIEW_Print+0xb4>)
 8005d28:	f7fe fe0e 	bl	8004948 <_PreparePacket>
 8005d2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d2e:	2280      	movs	r2, #128	; 0x80
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	6938      	ldr	r0, [r7, #16]
 8005d34:	f7fe fdd8 	bl	80048e8 <_EncodeStr>
 8005d38:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3e:	2300      	movs	r3, #0
 8005d40:	623b      	str	r3, [r7, #32]
 8005d42:	e00b      	b.n	8005d5c <SEGGER_SYSVIEW_Print+0x4c>
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	1c59      	adds	r1, r3, #1
 8005d4c:	6279      	str	r1, [r7, #36]	; 0x24
 8005d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	09db      	lsrs	r3, r3, #7
 8005d5a:	623b      	str	r3, [r7, #32]
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d60:	d8f0      	bhi.n	8005d44 <SEGGER_SYSVIEW_Print+0x34>
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	627a      	str	r2, [r7, #36]	; 0x24
 8005d68:	6a3a      	ldr	r2, [r7, #32]
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	2300      	movs	r3, #0
 8005d78:	61bb      	str	r3, [r7, #24]
 8005d7a:	e00b      	b.n	8005d94 <SEGGER_SYSVIEW_Print+0x84>
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	1c59      	adds	r1, r3, #1
 8005d84:	61f9      	str	r1, [r7, #28]
 8005d86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	09db      	lsrs	r3, r3, #7
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	2b7f      	cmp	r3, #127	; 0x7f
 8005d98:	d8f0      	bhi.n	8005d7c <SEGGER_SYSVIEW_Print+0x6c>
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	61fa      	str	r2, [r7, #28]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005daa:	221a      	movs	r2, #26
 8005dac:	68f9      	ldr	r1, [r7, #12]
 8005dae:	6938      	ldr	r0, [r7, #16]
 8005db0:	f7fe feb6 	bl	8004b20 <_SendPacket>
  RECORD_END();
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f383 8811 	msr	BASEPRI, r3
}
 8005dba:	bf00      	nop
 8005dbc:	3728      	adds	r7, #40	; 0x28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	200137dc 	.word	0x200137dc

08005dc8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	; 0x28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005dd0:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd4:	f04f 0120 	mov.w	r1, #32
 8005dd8:	f381 8811 	msr	BASEPRI, r1
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	4827      	ldr	r0, [pc, #156]	; (8005e7c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005de0:	f7fe fdb2 	bl	8004948 <_PreparePacket>
 8005de4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005de6:	2280      	movs	r2, #128	; 0x80
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	6938      	ldr	r0, [r7, #16]
 8005dec:	f7fe fd7c 	bl	80048e8 <_EncodeStr>
 8005df0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
 8005df6:	2301      	movs	r3, #1
 8005df8:	623b      	str	r3, [r7, #32]
 8005dfa:	e00b      	b.n	8005e14 <SEGGER_SYSVIEW_Warn+0x4c>
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	1c59      	adds	r1, r3, #1
 8005e04:	6279      	str	r1, [r7, #36]	; 0x24
 8005e06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	09db      	lsrs	r3, r3, #7
 8005e12:	623b      	str	r3, [r7, #32]
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	2b7f      	cmp	r3, #127	; 0x7f
 8005e18:	d8f0      	bhi.n	8005dfc <SEGGER_SYSVIEW_Warn+0x34>
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	627a      	str	r2, [r7, #36]	; 0x24
 8005e20:	6a3a      	ldr	r2, [r7, #32]
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61bb      	str	r3, [r7, #24]
 8005e32:	e00b      	b.n	8005e4c <SEGGER_SYSVIEW_Warn+0x84>
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	1c59      	adds	r1, r3, #1
 8005e3c:	61f9      	str	r1, [r7, #28]
 8005e3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	09db      	lsrs	r3, r3, #7
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e50:	d8f0      	bhi.n	8005e34 <SEGGER_SYSVIEW_Warn+0x6c>
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	61fa      	str	r2, [r7, #28]
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e62:	221a      	movs	r2, #26
 8005e64:	68f9      	ldr	r1, [r7, #12]
 8005e66:	6938      	ldr	r0, [r7, #16]
 8005e68:	f7fe fe5a 	bl	8004b20 <_SendPacket>
  RECORD_END();
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f383 8811 	msr	BASEPRI, r3
}
 8005e72:	bf00      	nop
 8005e74:	3728      	adds	r7, #40	; 0x28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	200137dc 	.word	0x200137dc

08005e80 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005e86:	2300      	movs	r3, #0
 8005e88:	607b      	str	r3, [r7, #4]
 8005e8a:	e033      	b.n	8005ef4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005e8c:	491e      	ldr	r1, [pc, #120]	; (8005f08 <_cbSendTaskList+0x88>)
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	491a      	ldr	r1, [pc, #104]	; (8005f08 <_cbSendTaskList+0x88>)
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	3304      	adds	r3, #4
 8005eac:	6819      	ldr	r1, [r3, #0]
 8005eae:	4c16      	ldr	r4, [pc, #88]	; (8005f08 <_cbSendTaskList+0x88>)
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4423      	add	r3, r4
 8005ebc:	3308      	adds	r3, #8
 8005ebe:	681c      	ldr	r4, [r3, #0]
 8005ec0:	4d11      	ldr	r5, [pc, #68]	; (8005f08 <_cbSendTaskList+0x88>)
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	442b      	add	r3, r5
 8005ece:	330c      	adds	r3, #12
 8005ed0:	681d      	ldr	r5, [r3, #0]
 8005ed2:	4e0d      	ldr	r6, [pc, #52]	; (8005f08 <_cbSendTaskList+0x88>)
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4433      	add	r3, r6
 8005ee0:	3310      	adds	r3, #16
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	462b      	mov	r3, r5
 8005ee8:	4622      	mov	r2, r4
 8005eea:	f000 f8bd 	bl	8006068 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	607b      	str	r3, [r7, #4]
 8005ef4:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <_cbSendTaskList+0x8c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d3c6      	bcc.n	8005e8c <_cbSendTaskList+0xc>
  }
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f08:	200138c0 	.word	0x200138c0
 8005f0c:	20013960 	.word	0x20013960

08005f10 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f14:	b082      	sub	sp, #8
 8005f16:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005f18:	f7fc fea8 	bl	8002c6c <xTaskGetTickCountFromISR>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2200      	movs	r2, #0
 8005f20:	469a      	mov	sl, r3
 8005f22:	4693      	mov	fp, r2
 8005f24:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005f28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	f04f 0a00 	mov.w	sl, #0
 8005f34:	f04f 0b00 	mov.w	fp, #0
 8005f38:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005f3c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005f40:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005f44:	4652      	mov	r2, sl
 8005f46:	465b      	mov	r3, fp
 8005f48:	1a14      	subs	r4, r2, r0
 8005f4a:	eb63 0501 	sbc.w	r5, r3, r1
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	00ab      	lsls	r3, r5, #2
 8005f58:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005f5c:	00a2      	lsls	r2, r4, #2
 8005f5e:	4614      	mov	r4, r2
 8005f60:	461d      	mov	r5, r3
 8005f62:	eb14 0800 	adds.w	r8, r4, r0
 8005f66:	eb45 0901 	adc.w	r9, r5, r1
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f7e:	4690      	mov	r8, r2
 8005f80:	4699      	mov	r9, r3
 8005f82:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005f86:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005f98 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af02      	add	r7, sp, #8
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005fa6:	2205      	movs	r2, #5
 8005fa8:	492b      	ldr	r1, [pc, #172]	; (8006058 <SYSVIEW_AddTask+0xc0>)
 8005faa:	68b8      	ldr	r0, [r7, #8]
 8005fac:	f000 f89e 	bl	80060ec <memcmp>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d04b      	beq.n	800604e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005fb6:	4b29      	ldr	r3, [pc, #164]	; (800605c <SYSVIEW_AddTask+0xc4>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b07      	cmp	r3, #7
 8005fbc:	d903      	bls.n	8005fc6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005fbe:	4828      	ldr	r0, [pc, #160]	; (8006060 <SYSVIEW_AddTask+0xc8>)
 8005fc0:	f7ff ff02 	bl	8005dc8 <SEGGER_SYSVIEW_Warn>
    return;
 8005fc4:	e044      	b.n	8006050 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005fc6:	4b25      	ldr	r3, [pc, #148]	; (800605c <SYSVIEW_AddTask+0xc4>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4926      	ldr	r1, [pc, #152]	; (8006064 <SYSVIEW_AddTask+0xcc>)
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005fda:	4b20      	ldr	r3, [pc, #128]	; (800605c <SYSVIEW_AddTask+0xc4>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4921      	ldr	r1, [pc, #132]	; (8006064 <SYSVIEW_AddTask+0xcc>)
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	440b      	add	r3, r1
 8005fea:	3304      	adds	r3, #4
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	; (800605c <SYSVIEW_AddTask+0xc4>)
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	491b      	ldr	r1, [pc, #108]	; (8006064 <SYSVIEW_AddTask+0xcc>)
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	440b      	add	r3, r1
 8006000:	3308      	adds	r3, #8
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006006:	4b15      	ldr	r3, [pc, #84]	; (800605c <SYSVIEW_AddTask+0xc4>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	4916      	ldr	r1, [pc, #88]	; (8006064 <SYSVIEW_AddTask+0xcc>)
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	330c      	adds	r3, #12
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800601c:	4b0f      	ldr	r3, [pc, #60]	; (800605c <SYSVIEW_AddTask+0xc4>)
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	4910      	ldr	r1, [pc, #64]	; (8006064 <SYSVIEW_AddTask+0xcc>)
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	440b      	add	r3, r1
 800602c:	3310      	adds	r3, #16
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006032:	4b0a      	ldr	r3, [pc, #40]	; (800605c <SYSVIEW_AddTask+0xc4>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3301      	adds	r3, #1
 8006038:	4a08      	ldr	r2, [pc, #32]	; (800605c <SYSVIEW_AddTask+0xc4>)
 800603a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f80e 	bl	8006068 <SYSVIEW_SendTaskInfo>
 800604c:	e000      	b.n	8006050 <SYSVIEW_AddTask+0xb8>
    return;
 800604e:	bf00      	nop

}
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	08006c2c 	.word	0x08006c2c
 800605c:	20013960 	.word	0x20013960
 8006060:	08006c34 	.word	0x08006c34
 8006064:	200138c0 	.word	0x200138c0

08006068 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006076:	f107 0314 	add.w	r3, r7, #20
 800607a:	2214      	movs	r2, #20
 800607c:	2100      	movs	r1, #0
 800607e:	4618      	mov	r0, r3
 8006080:	f000 f844 	bl	800610c <memset>
  TaskInfo.TaskID     = TaskID;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006098:	f107 0314 	add.w	r3, r7, #20
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff fa37 	bl	8005510 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80060a2:	bf00      	nop
 80060a4:	3728      	adds	r7, #40	; 0x28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <siprintf>:
 80060ac:	b40e      	push	{r1, r2, r3}
 80060ae:	b500      	push	{lr}
 80060b0:	b09c      	sub	sp, #112	; 0x70
 80060b2:	ab1d      	add	r3, sp, #116	; 0x74
 80060b4:	9002      	str	r0, [sp, #8]
 80060b6:	9006      	str	r0, [sp, #24]
 80060b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060bc:	4809      	ldr	r0, [pc, #36]	; (80060e4 <siprintf+0x38>)
 80060be:	9107      	str	r1, [sp, #28]
 80060c0:	9104      	str	r1, [sp, #16]
 80060c2:	4909      	ldr	r1, [pc, #36]	; (80060e8 <siprintf+0x3c>)
 80060c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80060c8:	9105      	str	r1, [sp, #20]
 80060ca:	6800      	ldr	r0, [r0, #0]
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	a902      	add	r1, sp, #8
 80060d0:	f000 f9b0 	bl	8006434 <_svfiprintf_r>
 80060d4:	9b02      	ldr	r3, [sp, #8]
 80060d6:	2200      	movs	r2, #0
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	b01c      	add	sp, #112	; 0x70
 80060dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80060e0:	b003      	add	sp, #12
 80060e2:	4770      	bx	lr
 80060e4:	2000005c 	.word	0x2000005c
 80060e8:	ffff0208 	.word	0xffff0208

080060ec <memcmp>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	3901      	subs	r1, #1
 80060f0:	4402      	add	r2, r0
 80060f2:	4290      	cmp	r0, r2
 80060f4:	d101      	bne.n	80060fa <memcmp+0xe>
 80060f6:	2000      	movs	r0, #0
 80060f8:	e005      	b.n	8006106 <memcmp+0x1a>
 80060fa:	7803      	ldrb	r3, [r0, #0]
 80060fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006100:	42a3      	cmp	r3, r4
 8006102:	d001      	beq.n	8006108 <memcmp+0x1c>
 8006104:	1b18      	subs	r0, r3, r4
 8006106:	bd10      	pop	{r4, pc}
 8006108:	3001      	adds	r0, #1
 800610a:	e7f2      	b.n	80060f2 <memcmp+0x6>

0800610c <memset>:
 800610c:	4402      	add	r2, r0
 800610e:	4603      	mov	r3, r0
 8006110:	4293      	cmp	r3, r2
 8006112:	d100      	bne.n	8006116 <memset+0xa>
 8006114:	4770      	bx	lr
 8006116:	f803 1b01 	strb.w	r1, [r3], #1
 800611a:	e7f9      	b.n	8006110 <memset+0x4>

0800611c <__errno>:
 800611c:	4b01      	ldr	r3, [pc, #4]	; (8006124 <__errno+0x8>)
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	2000005c 	.word	0x2000005c

08006128 <__libc_init_array>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	4d0d      	ldr	r5, [pc, #52]	; (8006160 <__libc_init_array+0x38>)
 800612c:	4c0d      	ldr	r4, [pc, #52]	; (8006164 <__libc_init_array+0x3c>)
 800612e:	1b64      	subs	r4, r4, r5
 8006130:	10a4      	asrs	r4, r4, #2
 8006132:	2600      	movs	r6, #0
 8006134:	42a6      	cmp	r6, r4
 8006136:	d109      	bne.n	800614c <__libc_init_array+0x24>
 8006138:	4d0b      	ldr	r5, [pc, #44]	; (8006168 <__libc_init_array+0x40>)
 800613a:	4c0c      	ldr	r4, [pc, #48]	; (800616c <__libc_init_array+0x44>)
 800613c:	f000 fc6a 	bl	8006a14 <_init>
 8006140:	1b64      	subs	r4, r4, r5
 8006142:	10a4      	asrs	r4, r4, #2
 8006144:	2600      	movs	r6, #0
 8006146:	42a6      	cmp	r6, r4
 8006148:	d105      	bne.n	8006156 <__libc_init_array+0x2e>
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006150:	4798      	blx	r3
 8006152:	3601      	adds	r6, #1
 8006154:	e7ee      	b.n	8006134 <__libc_init_array+0xc>
 8006156:	f855 3b04 	ldr.w	r3, [r5], #4
 800615a:	4798      	blx	r3
 800615c:	3601      	adds	r6, #1
 800615e:	e7f2      	b.n	8006146 <__libc_init_array+0x1e>
 8006160:	08006d00 	.word	0x08006d00
 8006164:	08006d00 	.word	0x08006d00
 8006168:	08006d00 	.word	0x08006d00
 800616c:	08006d04 	.word	0x08006d04

08006170 <__retarget_lock_acquire_recursive>:
 8006170:	4770      	bx	lr

08006172 <__retarget_lock_release_recursive>:
 8006172:	4770      	bx	lr

08006174 <memcpy>:
 8006174:	440a      	add	r2, r1
 8006176:	4291      	cmp	r1, r2
 8006178:	f100 33ff 	add.w	r3, r0, #4294967295
 800617c:	d100      	bne.n	8006180 <memcpy+0xc>
 800617e:	4770      	bx	lr
 8006180:	b510      	push	{r4, lr}
 8006182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800618a:	4291      	cmp	r1, r2
 800618c:	d1f9      	bne.n	8006182 <memcpy+0xe>
 800618e:	bd10      	pop	{r4, pc}

08006190 <_free_r>:
 8006190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006192:	2900      	cmp	r1, #0
 8006194:	d044      	beq.n	8006220 <_free_r+0x90>
 8006196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800619a:	9001      	str	r0, [sp, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	f1a1 0404 	sub.w	r4, r1, #4
 80061a2:	bfb8      	it	lt
 80061a4:	18e4      	addlt	r4, r4, r3
 80061a6:	f000 f8df 	bl	8006368 <__malloc_lock>
 80061aa:	4a1e      	ldr	r2, [pc, #120]	; (8006224 <_free_r+0x94>)
 80061ac:	9801      	ldr	r0, [sp, #4]
 80061ae:	6813      	ldr	r3, [r2, #0]
 80061b0:	b933      	cbnz	r3, 80061c0 <_free_r+0x30>
 80061b2:	6063      	str	r3, [r4, #4]
 80061b4:	6014      	str	r4, [r2, #0]
 80061b6:	b003      	add	sp, #12
 80061b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061bc:	f000 b8da 	b.w	8006374 <__malloc_unlock>
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	d908      	bls.n	80061d6 <_free_r+0x46>
 80061c4:	6825      	ldr	r5, [r4, #0]
 80061c6:	1961      	adds	r1, r4, r5
 80061c8:	428b      	cmp	r3, r1
 80061ca:	bf01      	itttt	eq
 80061cc:	6819      	ldreq	r1, [r3, #0]
 80061ce:	685b      	ldreq	r3, [r3, #4]
 80061d0:	1949      	addeq	r1, r1, r5
 80061d2:	6021      	streq	r1, [r4, #0]
 80061d4:	e7ed      	b.n	80061b2 <_free_r+0x22>
 80061d6:	461a      	mov	r2, r3
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	b10b      	cbz	r3, 80061e0 <_free_r+0x50>
 80061dc:	42a3      	cmp	r3, r4
 80061de:	d9fa      	bls.n	80061d6 <_free_r+0x46>
 80061e0:	6811      	ldr	r1, [r2, #0]
 80061e2:	1855      	adds	r5, r2, r1
 80061e4:	42a5      	cmp	r5, r4
 80061e6:	d10b      	bne.n	8006200 <_free_r+0x70>
 80061e8:	6824      	ldr	r4, [r4, #0]
 80061ea:	4421      	add	r1, r4
 80061ec:	1854      	adds	r4, r2, r1
 80061ee:	42a3      	cmp	r3, r4
 80061f0:	6011      	str	r1, [r2, #0]
 80061f2:	d1e0      	bne.n	80061b6 <_free_r+0x26>
 80061f4:	681c      	ldr	r4, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	6053      	str	r3, [r2, #4]
 80061fa:	440c      	add	r4, r1
 80061fc:	6014      	str	r4, [r2, #0]
 80061fe:	e7da      	b.n	80061b6 <_free_r+0x26>
 8006200:	d902      	bls.n	8006208 <_free_r+0x78>
 8006202:	230c      	movs	r3, #12
 8006204:	6003      	str	r3, [r0, #0]
 8006206:	e7d6      	b.n	80061b6 <_free_r+0x26>
 8006208:	6825      	ldr	r5, [r4, #0]
 800620a:	1961      	adds	r1, r4, r5
 800620c:	428b      	cmp	r3, r1
 800620e:	bf04      	itt	eq
 8006210:	6819      	ldreq	r1, [r3, #0]
 8006212:	685b      	ldreq	r3, [r3, #4]
 8006214:	6063      	str	r3, [r4, #4]
 8006216:	bf04      	itt	eq
 8006218:	1949      	addeq	r1, r1, r5
 800621a:	6021      	streq	r1, [r4, #0]
 800621c:	6054      	str	r4, [r2, #4]
 800621e:	e7ca      	b.n	80061b6 <_free_r+0x26>
 8006220:	b003      	add	sp, #12
 8006222:	bd30      	pop	{r4, r5, pc}
 8006224:	20013aa4 	.word	0x20013aa4

08006228 <sbrk_aligned>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	4e0e      	ldr	r6, [pc, #56]	; (8006264 <sbrk_aligned+0x3c>)
 800622c:	460c      	mov	r4, r1
 800622e:	6831      	ldr	r1, [r6, #0]
 8006230:	4605      	mov	r5, r0
 8006232:	b911      	cbnz	r1, 800623a <sbrk_aligned+0x12>
 8006234:	f000 fba6 	bl	8006984 <_sbrk_r>
 8006238:	6030      	str	r0, [r6, #0]
 800623a:	4621      	mov	r1, r4
 800623c:	4628      	mov	r0, r5
 800623e:	f000 fba1 	bl	8006984 <_sbrk_r>
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	d00a      	beq.n	800625c <sbrk_aligned+0x34>
 8006246:	1cc4      	adds	r4, r0, #3
 8006248:	f024 0403 	bic.w	r4, r4, #3
 800624c:	42a0      	cmp	r0, r4
 800624e:	d007      	beq.n	8006260 <sbrk_aligned+0x38>
 8006250:	1a21      	subs	r1, r4, r0
 8006252:	4628      	mov	r0, r5
 8006254:	f000 fb96 	bl	8006984 <_sbrk_r>
 8006258:	3001      	adds	r0, #1
 800625a:	d101      	bne.n	8006260 <sbrk_aligned+0x38>
 800625c:	f04f 34ff 	mov.w	r4, #4294967295
 8006260:	4620      	mov	r0, r4
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	20013aa8 	.word	0x20013aa8

08006268 <_malloc_r>:
 8006268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800626c:	1ccd      	adds	r5, r1, #3
 800626e:	f025 0503 	bic.w	r5, r5, #3
 8006272:	3508      	adds	r5, #8
 8006274:	2d0c      	cmp	r5, #12
 8006276:	bf38      	it	cc
 8006278:	250c      	movcc	r5, #12
 800627a:	2d00      	cmp	r5, #0
 800627c:	4607      	mov	r7, r0
 800627e:	db01      	blt.n	8006284 <_malloc_r+0x1c>
 8006280:	42a9      	cmp	r1, r5
 8006282:	d905      	bls.n	8006290 <_malloc_r+0x28>
 8006284:	230c      	movs	r3, #12
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	2600      	movs	r6, #0
 800628a:	4630      	mov	r0, r6
 800628c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006290:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006364 <_malloc_r+0xfc>
 8006294:	f000 f868 	bl	8006368 <__malloc_lock>
 8006298:	f8d8 3000 	ldr.w	r3, [r8]
 800629c:	461c      	mov	r4, r3
 800629e:	bb5c      	cbnz	r4, 80062f8 <_malloc_r+0x90>
 80062a0:	4629      	mov	r1, r5
 80062a2:	4638      	mov	r0, r7
 80062a4:	f7ff ffc0 	bl	8006228 <sbrk_aligned>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	4604      	mov	r4, r0
 80062ac:	d155      	bne.n	800635a <_malloc_r+0xf2>
 80062ae:	f8d8 4000 	ldr.w	r4, [r8]
 80062b2:	4626      	mov	r6, r4
 80062b4:	2e00      	cmp	r6, #0
 80062b6:	d145      	bne.n	8006344 <_malloc_r+0xdc>
 80062b8:	2c00      	cmp	r4, #0
 80062ba:	d048      	beq.n	800634e <_malloc_r+0xe6>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	4631      	mov	r1, r6
 80062c0:	4638      	mov	r0, r7
 80062c2:	eb04 0903 	add.w	r9, r4, r3
 80062c6:	f000 fb5d 	bl	8006984 <_sbrk_r>
 80062ca:	4581      	cmp	r9, r0
 80062cc:	d13f      	bne.n	800634e <_malloc_r+0xe6>
 80062ce:	6821      	ldr	r1, [r4, #0]
 80062d0:	1a6d      	subs	r5, r5, r1
 80062d2:	4629      	mov	r1, r5
 80062d4:	4638      	mov	r0, r7
 80062d6:	f7ff ffa7 	bl	8006228 <sbrk_aligned>
 80062da:	3001      	adds	r0, #1
 80062dc:	d037      	beq.n	800634e <_malloc_r+0xe6>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	442b      	add	r3, r5
 80062e2:	6023      	str	r3, [r4, #0]
 80062e4:	f8d8 3000 	ldr.w	r3, [r8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d038      	beq.n	800635e <_malloc_r+0xf6>
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	42a2      	cmp	r2, r4
 80062f0:	d12b      	bne.n	800634a <_malloc_r+0xe2>
 80062f2:	2200      	movs	r2, #0
 80062f4:	605a      	str	r2, [r3, #4]
 80062f6:	e00f      	b.n	8006318 <_malloc_r+0xb0>
 80062f8:	6822      	ldr	r2, [r4, #0]
 80062fa:	1b52      	subs	r2, r2, r5
 80062fc:	d41f      	bmi.n	800633e <_malloc_r+0xd6>
 80062fe:	2a0b      	cmp	r2, #11
 8006300:	d917      	bls.n	8006332 <_malloc_r+0xca>
 8006302:	1961      	adds	r1, r4, r5
 8006304:	42a3      	cmp	r3, r4
 8006306:	6025      	str	r5, [r4, #0]
 8006308:	bf18      	it	ne
 800630a:	6059      	strne	r1, [r3, #4]
 800630c:	6863      	ldr	r3, [r4, #4]
 800630e:	bf08      	it	eq
 8006310:	f8c8 1000 	streq.w	r1, [r8]
 8006314:	5162      	str	r2, [r4, r5]
 8006316:	604b      	str	r3, [r1, #4]
 8006318:	4638      	mov	r0, r7
 800631a:	f104 060b 	add.w	r6, r4, #11
 800631e:	f000 f829 	bl	8006374 <__malloc_unlock>
 8006322:	f026 0607 	bic.w	r6, r6, #7
 8006326:	1d23      	adds	r3, r4, #4
 8006328:	1af2      	subs	r2, r6, r3
 800632a:	d0ae      	beq.n	800628a <_malloc_r+0x22>
 800632c:	1b9b      	subs	r3, r3, r6
 800632e:	50a3      	str	r3, [r4, r2]
 8006330:	e7ab      	b.n	800628a <_malloc_r+0x22>
 8006332:	42a3      	cmp	r3, r4
 8006334:	6862      	ldr	r2, [r4, #4]
 8006336:	d1dd      	bne.n	80062f4 <_malloc_r+0x8c>
 8006338:	f8c8 2000 	str.w	r2, [r8]
 800633c:	e7ec      	b.n	8006318 <_malloc_r+0xb0>
 800633e:	4623      	mov	r3, r4
 8006340:	6864      	ldr	r4, [r4, #4]
 8006342:	e7ac      	b.n	800629e <_malloc_r+0x36>
 8006344:	4634      	mov	r4, r6
 8006346:	6876      	ldr	r6, [r6, #4]
 8006348:	e7b4      	b.n	80062b4 <_malloc_r+0x4c>
 800634a:	4613      	mov	r3, r2
 800634c:	e7cc      	b.n	80062e8 <_malloc_r+0x80>
 800634e:	230c      	movs	r3, #12
 8006350:	603b      	str	r3, [r7, #0]
 8006352:	4638      	mov	r0, r7
 8006354:	f000 f80e 	bl	8006374 <__malloc_unlock>
 8006358:	e797      	b.n	800628a <_malloc_r+0x22>
 800635a:	6025      	str	r5, [r4, #0]
 800635c:	e7dc      	b.n	8006318 <_malloc_r+0xb0>
 800635e:	605b      	str	r3, [r3, #4]
 8006360:	deff      	udf	#255	; 0xff
 8006362:	bf00      	nop
 8006364:	20013aa4 	.word	0x20013aa4

08006368 <__malloc_lock>:
 8006368:	4801      	ldr	r0, [pc, #4]	; (8006370 <__malloc_lock+0x8>)
 800636a:	f7ff bf01 	b.w	8006170 <__retarget_lock_acquire_recursive>
 800636e:	bf00      	nop
 8006370:	20013aa0 	.word	0x20013aa0

08006374 <__malloc_unlock>:
 8006374:	4801      	ldr	r0, [pc, #4]	; (800637c <__malloc_unlock+0x8>)
 8006376:	f7ff befc 	b.w	8006172 <__retarget_lock_release_recursive>
 800637a:	bf00      	nop
 800637c:	20013aa0 	.word	0x20013aa0

08006380 <__ssputs_r>:
 8006380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006384:	688e      	ldr	r6, [r1, #8]
 8006386:	461f      	mov	r7, r3
 8006388:	42be      	cmp	r6, r7
 800638a:	680b      	ldr	r3, [r1, #0]
 800638c:	4682      	mov	sl, r0
 800638e:	460c      	mov	r4, r1
 8006390:	4690      	mov	r8, r2
 8006392:	d82c      	bhi.n	80063ee <__ssputs_r+0x6e>
 8006394:	898a      	ldrh	r2, [r1, #12]
 8006396:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800639a:	d026      	beq.n	80063ea <__ssputs_r+0x6a>
 800639c:	6965      	ldr	r5, [r4, #20]
 800639e:	6909      	ldr	r1, [r1, #16]
 80063a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063a4:	eba3 0901 	sub.w	r9, r3, r1
 80063a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063ac:	1c7b      	adds	r3, r7, #1
 80063ae:	444b      	add	r3, r9
 80063b0:	106d      	asrs	r5, r5, #1
 80063b2:	429d      	cmp	r5, r3
 80063b4:	bf38      	it	cc
 80063b6:	461d      	movcc	r5, r3
 80063b8:	0553      	lsls	r3, r2, #21
 80063ba:	d527      	bpl.n	800640c <__ssputs_r+0x8c>
 80063bc:	4629      	mov	r1, r5
 80063be:	f7ff ff53 	bl	8006268 <_malloc_r>
 80063c2:	4606      	mov	r6, r0
 80063c4:	b360      	cbz	r0, 8006420 <__ssputs_r+0xa0>
 80063c6:	6921      	ldr	r1, [r4, #16]
 80063c8:	464a      	mov	r2, r9
 80063ca:	f7ff fed3 	bl	8006174 <memcpy>
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	6126      	str	r6, [r4, #16]
 80063dc:	6165      	str	r5, [r4, #20]
 80063de:	444e      	add	r6, r9
 80063e0:	eba5 0509 	sub.w	r5, r5, r9
 80063e4:	6026      	str	r6, [r4, #0]
 80063e6:	60a5      	str	r5, [r4, #8]
 80063e8:	463e      	mov	r6, r7
 80063ea:	42be      	cmp	r6, r7
 80063ec:	d900      	bls.n	80063f0 <__ssputs_r+0x70>
 80063ee:	463e      	mov	r6, r7
 80063f0:	6820      	ldr	r0, [r4, #0]
 80063f2:	4632      	mov	r2, r6
 80063f4:	4641      	mov	r1, r8
 80063f6:	f000 faab 	bl	8006950 <memmove>
 80063fa:	68a3      	ldr	r3, [r4, #8]
 80063fc:	1b9b      	subs	r3, r3, r6
 80063fe:	60a3      	str	r3, [r4, #8]
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	4433      	add	r3, r6
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	2000      	movs	r0, #0
 8006408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640c:	462a      	mov	r2, r5
 800640e:	f000 fac9 	bl	80069a4 <_realloc_r>
 8006412:	4606      	mov	r6, r0
 8006414:	2800      	cmp	r0, #0
 8006416:	d1e0      	bne.n	80063da <__ssputs_r+0x5a>
 8006418:	6921      	ldr	r1, [r4, #16]
 800641a:	4650      	mov	r0, sl
 800641c:	f7ff feb8 	bl	8006190 <_free_r>
 8006420:	230c      	movs	r3, #12
 8006422:	f8ca 3000 	str.w	r3, [sl]
 8006426:	89a3      	ldrh	r3, [r4, #12]
 8006428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800642c:	81a3      	strh	r3, [r4, #12]
 800642e:	f04f 30ff 	mov.w	r0, #4294967295
 8006432:	e7e9      	b.n	8006408 <__ssputs_r+0x88>

08006434 <_svfiprintf_r>:
 8006434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006438:	4698      	mov	r8, r3
 800643a:	898b      	ldrh	r3, [r1, #12]
 800643c:	061b      	lsls	r3, r3, #24
 800643e:	b09d      	sub	sp, #116	; 0x74
 8006440:	4607      	mov	r7, r0
 8006442:	460d      	mov	r5, r1
 8006444:	4614      	mov	r4, r2
 8006446:	d50e      	bpl.n	8006466 <_svfiprintf_r+0x32>
 8006448:	690b      	ldr	r3, [r1, #16]
 800644a:	b963      	cbnz	r3, 8006466 <_svfiprintf_r+0x32>
 800644c:	2140      	movs	r1, #64	; 0x40
 800644e:	f7ff ff0b 	bl	8006268 <_malloc_r>
 8006452:	6028      	str	r0, [r5, #0]
 8006454:	6128      	str	r0, [r5, #16]
 8006456:	b920      	cbnz	r0, 8006462 <_svfiprintf_r+0x2e>
 8006458:	230c      	movs	r3, #12
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	f04f 30ff 	mov.w	r0, #4294967295
 8006460:	e0d0      	b.n	8006604 <_svfiprintf_r+0x1d0>
 8006462:	2340      	movs	r3, #64	; 0x40
 8006464:	616b      	str	r3, [r5, #20]
 8006466:	2300      	movs	r3, #0
 8006468:	9309      	str	r3, [sp, #36]	; 0x24
 800646a:	2320      	movs	r3, #32
 800646c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006470:	f8cd 800c 	str.w	r8, [sp, #12]
 8006474:	2330      	movs	r3, #48	; 0x30
 8006476:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800661c <_svfiprintf_r+0x1e8>
 800647a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800647e:	f04f 0901 	mov.w	r9, #1
 8006482:	4623      	mov	r3, r4
 8006484:	469a      	mov	sl, r3
 8006486:	f813 2b01 	ldrb.w	r2, [r3], #1
 800648a:	b10a      	cbz	r2, 8006490 <_svfiprintf_r+0x5c>
 800648c:	2a25      	cmp	r2, #37	; 0x25
 800648e:	d1f9      	bne.n	8006484 <_svfiprintf_r+0x50>
 8006490:	ebba 0b04 	subs.w	fp, sl, r4
 8006494:	d00b      	beq.n	80064ae <_svfiprintf_r+0x7a>
 8006496:	465b      	mov	r3, fp
 8006498:	4622      	mov	r2, r4
 800649a:	4629      	mov	r1, r5
 800649c:	4638      	mov	r0, r7
 800649e:	f7ff ff6f 	bl	8006380 <__ssputs_r>
 80064a2:	3001      	adds	r0, #1
 80064a4:	f000 80a9 	beq.w	80065fa <_svfiprintf_r+0x1c6>
 80064a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064aa:	445a      	add	r2, fp
 80064ac:	9209      	str	r2, [sp, #36]	; 0x24
 80064ae:	f89a 3000 	ldrb.w	r3, [sl]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 80a1 	beq.w	80065fa <_svfiprintf_r+0x1c6>
 80064b8:	2300      	movs	r3, #0
 80064ba:	f04f 32ff 	mov.w	r2, #4294967295
 80064be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064c2:	f10a 0a01 	add.w	sl, sl, #1
 80064c6:	9304      	str	r3, [sp, #16]
 80064c8:	9307      	str	r3, [sp, #28]
 80064ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064ce:	931a      	str	r3, [sp, #104]	; 0x68
 80064d0:	4654      	mov	r4, sl
 80064d2:	2205      	movs	r2, #5
 80064d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d8:	4850      	ldr	r0, [pc, #320]	; (800661c <_svfiprintf_r+0x1e8>)
 80064da:	f7f9 fe89 	bl	80001f0 <memchr>
 80064de:	9a04      	ldr	r2, [sp, #16]
 80064e0:	b9d8      	cbnz	r0, 800651a <_svfiprintf_r+0xe6>
 80064e2:	06d0      	lsls	r0, r2, #27
 80064e4:	bf44      	itt	mi
 80064e6:	2320      	movmi	r3, #32
 80064e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064ec:	0711      	lsls	r1, r2, #28
 80064ee:	bf44      	itt	mi
 80064f0:	232b      	movmi	r3, #43	; 0x2b
 80064f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064f6:	f89a 3000 	ldrb.w	r3, [sl]
 80064fa:	2b2a      	cmp	r3, #42	; 0x2a
 80064fc:	d015      	beq.n	800652a <_svfiprintf_r+0xf6>
 80064fe:	9a07      	ldr	r2, [sp, #28]
 8006500:	4654      	mov	r4, sl
 8006502:	2000      	movs	r0, #0
 8006504:	f04f 0c0a 	mov.w	ip, #10
 8006508:	4621      	mov	r1, r4
 800650a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800650e:	3b30      	subs	r3, #48	; 0x30
 8006510:	2b09      	cmp	r3, #9
 8006512:	d94d      	bls.n	80065b0 <_svfiprintf_r+0x17c>
 8006514:	b1b0      	cbz	r0, 8006544 <_svfiprintf_r+0x110>
 8006516:	9207      	str	r2, [sp, #28]
 8006518:	e014      	b.n	8006544 <_svfiprintf_r+0x110>
 800651a:	eba0 0308 	sub.w	r3, r0, r8
 800651e:	fa09 f303 	lsl.w	r3, r9, r3
 8006522:	4313      	orrs	r3, r2
 8006524:	9304      	str	r3, [sp, #16]
 8006526:	46a2      	mov	sl, r4
 8006528:	e7d2      	b.n	80064d0 <_svfiprintf_r+0x9c>
 800652a:	9b03      	ldr	r3, [sp, #12]
 800652c:	1d19      	adds	r1, r3, #4
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	9103      	str	r1, [sp, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	bfbb      	ittet	lt
 8006536:	425b      	neglt	r3, r3
 8006538:	f042 0202 	orrlt.w	r2, r2, #2
 800653c:	9307      	strge	r3, [sp, #28]
 800653e:	9307      	strlt	r3, [sp, #28]
 8006540:	bfb8      	it	lt
 8006542:	9204      	strlt	r2, [sp, #16]
 8006544:	7823      	ldrb	r3, [r4, #0]
 8006546:	2b2e      	cmp	r3, #46	; 0x2e
 8006548:	d10c      	bne.n	8006564 <_svfiprintf_r+0x130>
 800654a:	7863      	ldrb	r3, [r4, #1]
 800654c:	2b2a      	cmp	r3, #42	; 0x2a
 800654e:	d134      	bne.n	80065ba <_svfiprintf_r+0x186>
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	1d1a      	adds	r2, r3, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	9203      	str	r2, [sp, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	bfb8      	it	lt
 800655c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006560:	3402      	adds	r4, #2
 8006562:	9305      	str	r3, [sp, #20]
 8006564:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800662c <_svfiprintf_r+0x1f8>
 8006568:	7821      	ldrb	r1, [r4, #0]
 800656a:	2203      	movs	r2, #3
 800656c:	4650      	mov	r0, sl
 800656e:	f7f9 fe3f 	bl	80001f0 <memchr>
 8006572:	b138      	cbz	r0, 8006584 <_svfiprintf_r+0x150>
 8006574:	9b04      	ldr	r3, [sp, #16]
 8006576:	eba0 000a 	sub.w	r0, r0, sl
 800657a:	2240      	movs	r2, #64	; 0x40
 800657c:	4082      	lsls	r2, r0
 800657e:	4313      	orrs	r3, r2
 8006580:	3401      	adds	r4, #1
 8006582:	9304      	str	r3, [sp, #16]
 8006584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006588:	4825      	ldr	r0, [pc, #148]	; (8006620 <_svfiprintf_r+0x1ec>)
 800658a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800658e:	2206      	movs	r2, #6
 8006590:	f7f9 fe2e 	bl	80001f0 <memchr>
 8006594:	2800      	cmp	r0, #0
 8006596:	d038      	beq.n	800660a <_svfiprintf_r+0x1d6>
 8006598:	4b22      	ldr	r3, [pc, #136]	; (8006624 <_svfiprintf_r+0x1f0>)
 800659a:	bb1b      	cbnz	r3, 80065e4 <_svfiprintf_r+0x1b0>
 800659c:	9b03      	ldr	r3, [sp, #12]
 800659e:	3307      	adds	r3, #7
 80065a0:	f023 0307 	bic.w	r3, r3, #7
 80065a4:	3308      	adds	r3, #8
 80065a6:	9303      	str	r3, [sp, #12]
 80065a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065aa:	4433      	add	r3, r6
 80065ac:	9309      	str	r3, [sp, #36]	; 0x24
 80065ae:	e768      	b.n	8006482 <_svfiprintf_r+0x4e>
 80065b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065b4:	460c      	mov	r4, r1
 80065b6:	2001      	movs	r0, #1
 80065b8:	e7a6      	b.n	8006508 <_svfiprintf_r+0xd4>
 80065ba:	2300      	movs	r3, #0
 80065bc:	3401      	adds	r4, #1
 80065be:	9305      	str	r3, [sp, #20]
 80065c0:	4619      	mov	r1, r3
 80065c2:	f04f 0c0a 	mov.w	ip, #10
 80065c6:	4620      	mov	r0, r4
 80065c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065cc:	3a30      	subs	r2, #48	; 0x30
 80065ce:	2a09      	cmp	r2, #9
 80065d0:	d903      	bls.n	80065da <_svfiprintf_r+0x1a6>
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d0c6      	beq.n	8006564 <_svfiprintf_r+0x130>
 80065d6:	9105      	str	r1, [sp, #20]
 80065d8:	e7c4      	b.n	8006564 <_svfiprintf_r+0x130>
 80065da:	fb0c 2101 	mla	r1, ip, r1, r2
 80065de:	4604      	mov	r4, r0
 80065e0:	2301      	movs	r3, #1
 80065e2:	e7f0      	b.n	80065c6 <_svfiprintf_r+0x192>
 80065e4:	ab03      	add	r3, sp, #12
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	462a      	mov	r2, r5
 80065ea:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <_svfiprintf_r+0x1f4>)
 80065ec:	a904      	add	r1, sp, #16
 80065ee:	4638      	mov	r0, r7
 80065f0:	f3af 8000 	nop.w
 80065f4:	1c42      	adds	r2, r0, #1
 80065f6:	4606      	mov	r6, r0
 80065f8:	d1d6      	bne.n	80065a8 <_svfiprintf_r+0x174>
 80065fa:	89ab      	ldrh	r3, [r5, #12]
 80065fc:	065b      	lsls	r3, r3, #25
 80065fe:	f53f af2d 	bmi.w	800645c <_svfiprintf_r+0x28>
 8006602:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006604:	b01d      	add	sp, #116	; 0x74
 8006606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660a:	ab03      	add	r3, sp, #12
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	462a      	mov	r2, r5
 8006610:	4b05      	ldr	r3, [pc, #20]	; (8006628 <_svfiprintf_r+0x1f4>)
 8006612:	a904      	add	r1, sp, #16
 8006614:	4638      	mov	r0, r7
 8006616:	f000 f879 	bl	800670c <_printf_i>
 800661a:	e7eb      	b.n	80065f4 <_svfiprintf_r+0x1c0>
 800661c:	08006cc4 	.word	0x08006cc4
 8006620:	08006cce 	.word	0x08006cce
 8006624:	00000000 	.word	0x00000000
 8006628:	08006381 	.word	0x08006381
 800662c:	08006cca 	.word	0x08006cca

08006630 <_printf_common>:
 8006630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	4616      	mov	r6, r2
 8006636:	4699      	mov	r9, r3
 8006638:	688a      	ldr	r2, [r1, #8]
 800663a:	690b      	ldr	r3, [r1, #16]
 800663c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006640:	4293      	cmp	r3, r2
 8006642:	bfb8      	it	lt
 8006644:	4613      	movlt	r3, r2
 8006646:	6033      	str	r3, [r6, #0]
 8006648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800664c:	4607      	mov	r7, r0
 800664e:	460c      	mov	r4, r1
 8006650:	b10a      	cbz	r2, 8006656 <_printf_common+0x26>
 8006652:	3301      	adds	r3, #1
 8006654:	6033      	str	r3, [r6, #0]
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	0699      	lsls	r1, r3, #26
 800665a:	bf42      	ittt	mi
 800665c:	6833      	ldrmi	r3, [r6, #0]
 800665e:	3302      	addmi	r3, #2
 8006660:	6033      	strmi	r3, [r6, #0]
 8006662:	6825      	ldr	r5, [r4, #0]
 8006664:	f015 0506 	ands.w	r5, r5, #6
 8006668:	d106      	bne.n	8006678 <_printf_common+0x48>
 800666a:	f104 0a19 	add.w	sl, r4, #25
 800666e:	68e3      	ldr	r3, [r4, #12]
 8006670:	6832      	ldr	r2, [r6, #0]
 8006672:	1a9b      	subs	r3, r3, r2
 8006674:	42ab      	cmp	r3, r5
 8006676:	dc26      	bgt.n	80066c6 <_printf_common+0x96>
 8006678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800667c:	1e13      	subs	r3, r2, #0
 800667e:	6822      	ldr	r2, [r4, #0]
 8006680:	bf18      	it	ne
 8006682:	2301      	movne	r3, #1
 8006684:	0692      	lsls	r2, r2, #26
 8006686:	d42b      	bmi.n	80066e0 <_printf_common+0xb0>
 8006688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800668c:	4649      	mov	r1, r9
 800668e:	4638      	mov	r0, r7
 8006690:	47c0      	blx	r8
 8006692:	3001      	adds	r0, #1
 8006694:	d01e      	beq.n	80066d4 <_printf_common+0xa4>
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	6922      	ldr	r2, [r4, #16]
 800669a:	f003 0306 	and.w	r3, r3, #6
 800669e:	2b04      	cmp	r3, #4
 80066a0:	bf02      	ittt	eq
 80066a2:	68e5      	ldreq	r5, [r4, #12]
 80066a4:	6833      	ldreq	r3, [r6, #0]
 80066a6:	1aed      	subeq	r5, r5, r3
 80066a8:	68a3      	ldr	r3, [r4, #8]
 80066aa:	bf0c      	ite	eq
 80066ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066b0:	2500      	movne	r5, #0
 80066b2:	4293      	cmp	r3, r2
 80066b4:	bfc4      	itt	gt
 80066b6:	1a9b      	subgt	r3, r3, r2
 80066b8:	18ed      	addgt	r5, r5, r3
 80066ba:	2600      	movs	r6, #0
 80066bc:	341a      	adds	r4, #26
 80066be:	42b5      	cmp	r5, r6
 80066c0:	d11a      	bne.n	80066f8 <_printf_common+0xc8>
 80066c2:	2000      	movs	r0, #0
 80066c4:	e008      	b.n	80066d8 <_printf_common+0xa8>
 80066c6:	2301      	movs	r3, #1
 80066c8:	4652      	mov	r2, sl
 80066ca:	4649      	mov	r1, r9
 80066cc:	4638      	mov	r0, r7
 80066ce:	47c0      	blx	r8
 80066d0:	3001      	adds	r0, #1
 80066d2:	d103      	bne.n	80066dc <_printf_common+0xac>
 80066d4:	f04f 30ff 	mov.w	r0, #4294967295
 80066d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066dc:	3501      	adds	r5, #1
 80066de:	e7c6      	b.n	800666e <_printf_common+0x3e>
 80066e0:	18e1      	adds	r1, r4, r3
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	2030      	movs	r0, #48	; 0x30
 80066e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066ea:	4422      	add	r2, r4
 80066ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066f4:	3302      	adds	r3, #2
 80066f6:	e7c7      	b.n	8006688 <_printf_common+0x58>
 80066f8:	2301      	movs	r3, #1
 80066fa:	4622      	mov	r2, r4
 80066fc:	4649      	mov	r1, r9
 80066fe:	4638      	mov	r0, r7
 8006700:	47c0      	blx	r8
 8006702:	3001      	adds	r0, #1
 8006704:	d0e6      	beq.n	80066d4 <_printf_common+0xa4>
 8006706:	3601      	adds	r6, #1
 8006708:	e7d9      	b.n	80066be <_printf_common+0x8e>
	...

0800670c <_printf_i>:
 800670c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006710:	7e0f      	ldrb	r7, [r1, #24]
 8006712:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006714:	2f78      	cmp	r7, #120	; 0x78
 8006716:	4691      	mov	r9, r2
 8006718:	4680      	mov	r8, r0
 800671a:	460c      	mov	r4, r1
 800671c:	469a      	mov	sl, r3
 800671e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006722:	d807      	bhi.n	8006734 <_printf_i+0x28>
 8006724:	2f62      	cmp	r7, #98	; 0x62
 8006726:	d80a      	bhi.n	800673e <_printf_i+0x32>
 8006728:	2f00      	cmp	r7, #0
 800672a:	f000 80d4 	beq.w	80068d6 <_printf_i+0x1ca>
 800672e:	2f58      	cmp	r7, #88	; 0x58
 8006730:	f000 80c0 	beq.w	80068b4 <_printf_i+0x1a8>
 8006734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800673c:	e03a      	b.n	80067b4 <_printf_i+0xa8>
 800673e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006742:	2b15      	cmp	r3, #21
 8006744:	d8f6      	bhi.n	8006734 <_printf_i+0x28>
 8006746:	a101      	add	r1, pc, #4	; (adr r1, 800674c <_printf_i+0x40>)
 8006748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800674c:	080067a5 	.word	0x080067a5
 8006750:	080067b9 	.word	0x080067b9
 8006754:	08006735 	.word	0x08006735
 8006758:	08006735 	.word	0x08006735
 800675c:	08006735 	.word	0x08006735
 8006760:	08006735 	.word	0x08006735
 8006764:	080067b9 	.word	0x080067b9
 8006768:	08006735 	.word	0x08006735
 800676c:	08006735 	.word	0x08006735
 8006770:	08006735 	.word	0x08006735
 8006774:	08006735 	.word	0x08006735
 8006778:	080068bd 	.word	0x080068bd
 800677c:	080067e5 	.word	0x080067e5
 8006780:	08006877 	.word	0x08006877
 8006784:	08006735 	.word	0x08006735
 8006788:	08006735 	.word	0x08006735
 800678c:	080068df 	.word	0x080068df
 8006790:	08006735 	.word	0x08006735
 8006794:	080067e5 	.word	0x080067e5
 8006798:	08006735 	.word	0x08006735
 800679c:	08006735 	.word	0x08006735
 80067a0:	0800687f 	.word	0x0800687f
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	1d1a      	adds	r2, r3, #4
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	602a      	str	r2, [r5, #0]
 80067ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067b4:	2301      	movs	r3, #1
 80067b6:	e09f      	b.n	80068f8 <_printf_i+0x1ec>
 80067b8:	6820      	ldr	r0, [r4, #0]
 80067ba:	682b      	ldr	r3, [r5, #0]
 80067bc:	0607      	lsls	r7, r0, #24
 80067be:	f103 0104 	add.w	r1, r3, #4
 80067c2:	6029      	str	r1, [r5, #0]
 80067c4:	d501      	bpl.n	80067ca <_printf_i+0xbe>
 80067c6:	681e      	ldr	r6, [r3, #0]
 80067c8:	e003      	b.n	80067d2 <_printf_i+0xc6>
 80067ca:	0646      	lsls	r6, r0, #25
 80067cc:	d5fb      	bpl.n	80067c6 <_printf_i+0xba>
 80067ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80067d2:	2e00      	cmp	r6, #0
 80067d4:	da03      	bge.n	80067de <_printf_i+0xd2>
 80067d6:	232d      	movs	r3, #45	; 0x2d
 80067d8:	4276      	negs	r6, r6
 80067da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067de:	485a      	ldr	r0, [pc, #360]	; (8006948 <_printf_i+0x23c>)
 80067e0:	230a      	movs	r3, #10
 80067e2:	e012      	b.n	800680a <_printf_i+0xfe>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	6820      	ldr	r0, [r4, #0]
 80067e8:	1d19      	adds	r1, r3, #4
 80067ea:	6029      	str	r1, [r5, #0]
 80067ec:	0605      	lsls	r5, r0, #24
 80067ee:	d501      	bpl.n	80067f4 <_printf_i+0xe8>
 80067f0:	681e      	ldr	r6, [r3, #0]
 80067f2:	e002      	b.n	80067fa <_printf_i+0xee>
 80067f4:	0641      	lsls	r1, r0, #25
 80067f6:	d5fb      	bpl.n	80067f0 <_printf_i+0xe4>
 80067f8:	881e      	ldrh	r6, [r3, #0]
 80067fa:	4853      	ldr	r0, [pc, #332]	; (8006948 <_printf_i+0x23c>)
 80067fc:	2f6f      	cmp	r7, #111	; 0x6f
 80067fe:	bf0c      	ite	eq
 8006800:	2308      	moveq	r3, #8
 8006802:	230a      	movne	r3, #10
 8006804:	2100      	movs	r1, #0
 8006806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800680a:	6865      	ldr	r5, [r4, #4]
 800680c:	60a5      	str	r5, [r4, #8]
 800680e:	2d00      	cmp	r5, #0
 8006810:	bfa2      	ittt	ge
 8006812:	6821      	ldrge	r1, [r4, #0]
 8006814:	f021 0104 	bicge.w	r1, r1, #4
 8006818:	6021      	strge	r1, [r4, #0]
 800681a:	b90e      	cbnz	r6, 8006820 <_printf_i+0x114>
 800681c:	2d00      	cmp	r5, #0
 800681e:	d04b      	beq.n	80068b8 <_printf_i+0x1ac>
 8006820:	4615      	mov	r5, r2
 8006822:	fbb6 f1f3 	udiv	r1, r6, r3
 8006826:	fb03 6711 	mls	r7, r3, r1, r6
 800682a:	5dc7      	ldrb	r7, [r0, r7]
 800682c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006830:	4637      	mov	r7, r6
 8006832:	42bb      	cmp	r3, r7
 8006834:	460e      	mov	r6, r1
 8006836:	d9f4      	bls.n	8006822 <_printf_i+0x116>
 8006838:	2b08      	cmp	r3, #8
 800683a:	d10b      	bne.n	8006854 <_printf_i+0x148>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	07de      	lsls	r6, r3, #31
 8006840:	d508      	bpl.n	8006854 <_printf_i+0x148>
 8006842:	6923      	ldr	r3, [r4, #16]
 8006844:	6861      	ldr	r1, [r4, #4]
 8006846:	4299      	cmp	r1, r3
 8006848:	bfde      	ittt	le
 800684a:	2330      	movle	r3, #48	; 0x30
 800684c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006850:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006854:	1b52      	subs	r2, r2, r5
 8006856:	6122      	str	r2, [r4, #16]
 8006858:	f8cd a000 	str.w	sl, [sp]
 800685c:	464b      	mov	r3, r9
 800685e:	aa03      	add	r2, sp, #12
 8006860:	4621      	mov	r1, r4
 8006862:	4640      	mov	r0, r8
 8006864:	f7ff fee4 	bl	8006630 <_printf_common>
 8006868:	3001      	adds	r0, #1
 800686a:	d14a      	bne.n	8006902 <_printf_i+0x1f6>
 800686c:	f04f 30ff 	mov.w	r0, #4294967295
 8006870:	b004      	add	sp, #16
 8006872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	f043 0320 	orr.w	r3, r3, #32
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	4833      	ldr	r0, [pc, #204]	; (800694c <_printf_i+0x240>)
 8006880:	2778      	movs	r7, #120	; 0x78
 8006882:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	6829      	ldr	r1, [r5, #0]
 800688a:	061f      	lsls	r7, r3, #24
 800688c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006890:	d402      	bmi.n	8006898 <_printf_i+0x18c>
 8006892:	065f      	lsls	r7, r3, #25
 8006894:	bf48      	it	mi
 8006896:	b2b6      	uxthmi	r6, r6
 8006898:	07df      	lsls	r7, r3, #31
 800689a:	bf48      	it	mi
 800689c:	f043 0320 	orrmi.w	r3, r3, #32
 80068a0:	6029      	str	r1, [r5, #0]
 80068a2:	bf48      	it	mi
 80068a4:	6023      	strmi	r3, [r4, #0]
 80068a6:	b91e      	cbnz	r6, 80068b0 <_printf_i+0x1a4>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	f023 0320 	bic.w	r3, r3, #32
 80068ae:	6023      	str	r3, [r4, #0]
 80068b0:	2310      	movs	r3, #16
 80068b2:	e7a7      	b.n	8006804 <_printf_i+0xf8>
 80068b4:	4824      	ldr	r0, [pc, #144]	; (8006948 <_printf_i+0x23c>)
 80068b6:	e7e4      	b.n	8006882 <_printf_i+0x176>
 80068b8:	4615      	mov	r5, r2
 80068ba:	e7bd      	b.n	8006838 <_printf_i+0x12c>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	6826      	ldr	r6, [r4, #0]
 80068c0:	6961      	ldr	r1, [r4, #20]
 80068c2:	1d18      	adds	r0, r3, #4
 80068c4:	6028      	str	r0, [r5, #0]
 80068c6:	0635      	lsls	r5, r6, #24
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	d501      	bpl.n	80068d0 <_printf_i+0x1c4>
 80068cc:	6019      	str	r1, [r3, #0]
 80068ce:	e002      	b.n	80068d6 <_printf_i+0x1ca>
 80068d0:	0670      	lsls	r0, r6, #25
 80068d2:	d5fb      	bpl.n	80068cc <_printf_i+0x1c0>
 80068d4:	8019      	strh	r1, [r3, #0]
 80068d6:	2300      	movs	r3, #0
 80068d8:	6123      	str	r3, [r4, #16]
 80068da:	4615      	mov	r5, r2
 80068dc:	e7bc      	b.n	8006858 <_printf_i+0x14c>
 80068de:	682b      	ldr	r3, [r5, #0]
 80068e0:	1d1a      	adds	r2, r3, #4
 80068e2:	602a      	str	r2, [r5, #0]
 80068e4:	681d      	ldr	r5, [r3, #0]
 80068e6:	6862      	ldr	r2, [r4, #4]
 80068e8:	2100      	movs	r1, #0
 80068ea:	4628      	mov	r0, r5
 80068ec:	f7f9 fc80 	bl	80001f0 <memchr>
 80068f0:	b108      	cbz	r0, 80068f6 <_printf_i+0x1ea>
 80068f2:	1b40      	subs	r0, r0, r5
 80068f4:	6060      	str	r0, [r4, #4]
 80068f6:	6863      	ldr	r3, [r4, #4]
 80068f8:	6123      	str	r3, [r4, #16]
 80068fa:	2300      	movs	r3, #0
 80068fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006900:	e7aa      	b.n	8006858 <_printf_i+0x14c>
 8006902:	6923      	ldr	r3, [r4, #16]
 8006904:	462a      	mov	r2, r5
 8006906:	4649      	mov	r1, r9
 8006908:	4640      	mov	r0, r8
 800690a:	47d0      	blx	sl
 800690c:	3001      	adds	r0, #1
 800690e:	d0ad      	beq.n	800686c <_printf_i+0x160>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	079b      	lsls	r3, r3, #30
 8006914:	d413      	bmi.n	800693e <_printf_i+0x232>
 8006916:	68e0      	ldr	r0, [r4, #12]
 8006918:	9b03      	ldr	r3, [sp, #12]
 800691a:	4298      	cmp	r0, r3
 800691c:	bfb8      	it	lt
 800691e:	4618      	movlt	r0, r3
 8006920:	e7a6      	b.n	8006870 <_printf_i+0x164>
 8006922:	2301      	movs	r3, #1
 8006924:	4632      	mov	r2, r6
 8006926:	4649      	mov	r1, r9
 8006928:	4640      	mov	r0, r8
 800692a:	47d0      	blx	sl
 800692c:	3001      	adds	r0, #1
 800692e:	d09d      	beq.n	800686c <_printf_i+0x160>
 8006930:	3501      	adds	r5, #1
 8006932:	68e3      	ldr	r3, [r4, #12]
 8006934:	9903      	ldr	r1, [sp, #12]
 8006936:	1a5b      	subs	r3, r3, r1
 8006938:	42ab      	cmp	r3, r5
 800693a:	dcf2      	bgt.n	8006922 <_printf_i+0x216>
 800693c:	e7eb      	b.n	8006916 <_printf_i+0x20a>
 800693e:	2500      	movs	r5, #0
 8006940:	f104 0619 	add.w	r6, r4, #25
 8006944:	e7f5      	b.n	8006932 <_printf_i+0x226>
 8006946:	bf00      	nop
 8006948:	08006cd5 	.word	0x08006cd5
 800694c:	08006ce6 	.word	0x08006ce6

08006950 <memmove>:
 8006950:	4288      	cmp	r0, r1
 8006952:	b510      	push	{r4, lr}
 8006954:	eb01 0402 	add.w	r4, r1, r2
 8006958:	d902      	bls.n	8006960 <memmove+0x10>
 800695a:	4284      	cmp	r4, r0
 800695c:	4623      	mov	r3, r4
 800695e:	d807      	bhi.n	8006970 <memmove+0x20>
 8006960:	1e43      	subs	r3, r0, #1
 8006962:	42a1      	cmp	r1, r4
 8006964:	d008      	beq.n	8006978 <memmove+0x28>
 8006966:	f811 2b01 	ldrb.w	r2, [r1], #1
 800696a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800696e:	e7f8      	b.n	8006962 <memmove+0x12>
 8006970:	4402      	add	r2, r0
 8006972:	4601      	mov	r1, r0
 8006974:	428a      	cmp	r2, r1
 8006976:	d100      	bne.n	800697a <memmove+0x2a>
 8006978:	bd10      	pop	{r4, pc}
 800697a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800697e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006982:	e7f7      	b.n	8006974 <memmove+0x24>

08006984 <_sbrk_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4d06      	ldr	r5, [pc, #24]	; (80069a0 <_sbrk_r+0x1c>)
 8006988:	2300      	movs	r3, #0
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	602b      	str	r3, [r5, #0]
 8006990:	f7f9 ff82 	bl	8000898 <_sbrk>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_sbrk_r+0x1a>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_sbrk_r+0x1a>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	20013a9c 	.word	0x20013a9c

080069a4 <_realloc_r>:
 80069a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a8:	4680      	mov	r8, r0
 80069aa:	4614      	mov	r4, r2
 80069ac:	460e      	mov	r6, r1
 80069ae:	b921      	cbnz	r1, 80069ba <_realloc_r+0x16>
 80069b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069b4:	4611      	mov	r1, r2
 80069b6:	f7ff bc57 	b.w	8006268 <_malloc_r>
 80069ba:	b92a      	cbnz	r2, 80069c8 <_realloc_r+0x24>
 80069bc:	f7ff fbe8 	bl	8006190 <_free_r>
 80069c0:	4625      	mov	r5, r4
 80069c2:	4628      	mov	r0, r5
 80069c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c8:	f000 f81b 	bl	8006a02 <_malloc_usable_size_r>
 80069cc:	4284      	cmp	r4, r0
 80069ce:	4607      	mov	r7, r0
 80069d0:	d802      	bhi.n	80069d8 <_realloc_r+0x34>
 80069d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069d6:	d812      	bhi.n	80069fe <_realloc_r+0x5a>
 80069d8:	4621      	mov	r1, r4
 80069da:	4640      	mov	r0, r8
 80069dc:	f7ff fc44 	bl	8006268 <_malloc_r>
 80069e0:	4605      	mov	r5, r0
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d0ed      	beq.n	80069c2 <_realloc_r+0x1e>
 80069e6:	42bc      	cmp	r4, r7
 80069e8:	4622      	mov	r2, r4
 80069ea:	4631      	mov	r1, r6
 80069ec:	bf28      	it	cs
 80069ee:	463a      	movcs	r2, r7
 80069f0:	f7ff fbc0 	bl	8006174 <memcpy>
 80069f4:	4631      	mov	r1, r6
 80069f6:	4640      	mov	r0, r8
 80069f8:	f7ff fbca 	bl	8006190 <_free_r>
 80069fc:	e7e1      	b.n	80069c2 <_realloc_r+0x1e>
 80069fe:	4635      	mov	r5, r6
 8006a00:	e7df      	b.n	80069c2 <_realloc_r+0x1e>

08006a02 <_malloc_usable_size_r>:
 8006a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a06:	1f18      	subs	r0, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	bfbc      	itt	lt
 8006a0c:	580b      	ldrlt	r3, [r1, r0]
 8006a0e:	18c0      	addlt	r0, r0, r3
 8006a10:	4770      	bx	lr
	...

08006a14 <_init>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	bf00      	nop
 8006a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1a:	bc08      	pop	{r3}
 8006a1c:	469e      	mov	lr, r3
 8006a1e:	4770      	bx	lr

08006a20 <_fini>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	bf00      	nop
 8006a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a26:	bc08      	pop	{r3}
 8006a28:	469e      	mov	lr, r3
 8006a2a:	4770      	bx	lr
