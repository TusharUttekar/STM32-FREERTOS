
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d98  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d0  080060d0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060d8  080060d8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060dc  080060dc  000160dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080060e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000138d0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200138e0  200138e0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017626  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033be  00000000  00000000  000376a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015b0  00000000  00000000  0003aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010f0  00000000  00000000  0003c018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026323  00000000  00000000  0003d108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019a59  00000000  00000000  0006342b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e75ef  00000000  00000000  0007ce84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005c00  00000000  00000000  00164474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  0016a074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005f30 	.word	0x08005f30

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08005f30 	.word	0x08005f30

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <Task1_Handler>:
char Buffer[35];
Queue_Data Local_Queue = {.Data_1 = 1, .Data_2 = 2, .Data_3 = 3, .Buffer = {4,5,6,7,8,9,10,11,12,13}};
Queue_Data LocalQueue_ = {.Data_1 = 3, .Data_2 = 2, .Data_3 = 1, .Buffer = {10,11,12,13}};

void Task1_Handler(void* Parameters)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	UBaseType_t Priority_Get;
	Priority_Get = uxTaskPriorityGet(NULL);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f002 fa17 	bl	8002928 <uxTaskPriorityGet>
 80004fa:	60f8      	str	r0, [r7, #12]

	for(;;)
	{
		SEGGER_SYSVIEW_Print("Red Led Task!!");
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <Task1_Handler+0x2c>)
 80004fe:	f005 faff 	bl	8005b00 <SEGGER_SYSVIEW_Print>
		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000502:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <Task1_Handler+0x30>)
 8000508:	f000 fcb9 	bl	8000e7e <HAL_GPIO_TogglePin>
//		xQueueSendToBack(Queue_Handle_1, &Local_Queue, pdMS_TO_TICKS(0));
		vTaskDelay(pdMS_TO_TICKS(1000));
 800050c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000510:	f002 f9d2 	bl	80028b8 <vTaskDelay>
		SEGGER_SYSVIEW_Print("Red Led Task!!");
 8000514:	e7f2      	b.n	80004fc <Task1_Handler+0x10>
 8000516:	bf00      	nop
 8000518:	08005f48 	.word	0x08005f48
 800051c:	40021800 	.word	0x40021800

08000520 <Task2_Handler>:
	}
}

void Task2_Handler(void* Parameters)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	UBaseType_t Priority_Get;
	Priority_Get = uxTaskPriorityGet(NULL);
 8000528:	2000      	movs	r0, #0
 800052a:	f002 f9fd 	bl	8002928 <uxTaskPriorityGet>
 800052e:	60f8      	str	r0, [r7, #12]

	for(;;)
	{
		SEGGER_SYSVIEW_Print("Green Led Task!!");
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <Task2_Handler+0x28>)
 8000532:	f005 fae5 	bl	8005b00 <SEGGER_SYSVIEW_Print>
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <Task2_Handler+0x2c>)
 800053c:	f000 fc9f 	bl	8000e7e <HAL_GPIO_TogglePin>
//		xQueueSendToBack(Queue_Handle_2, &LocalQueue_, pdMS_TO_TICKS(0));
		vTaskDelay(pdMS_TO_TICKS(100));
 8000540:	2064      	movs	r0, #100	; 0x64
 8000542:	f002 f9b9 	bl	80028b8 <vTaskDelay>
		SEGGER_SYSVIEW_Print("Green Led Task!!");
 8000546:	e7f3      	b.n	8000530 <Task2_Handler+0x10>
 8000548:	08005f58 	.word	0x08005f58
 800054c:	40021800 	.word	0x40021800

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  //HAL_Init();

  /* USER CODE BEGIN Init */
	DWT->CTRL |= (1 << 0);
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <main+0x58>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a13      	ldr	r2, [pc, #76]	; (80005a8 <main+0x58>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6013      	str	r3, [r2, #0]

  /* Configure the system clock */
  //SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  HAL_RCC_DeInit();
 8000562:	f000 fcdb 	bl	8000f1c <HAL_RCC_DeInit>
  SystemCoreClockUpdate();
 8000566:	f000 f929 	bl	80007bc <SystemCoreClockUpdate>
  SEGGER_SYSVIEW_Conf();
 800056a:	f003 fe6d 	bl	8004248 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800056e:	f004 fd4d 	bl	800500c <SEGGER_SYSVIEW_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f851 	bl	8000618 <MX_GPIO_Init>
//  MX_TIM6_Init();
  MX_USART1_UART_Init();
 8000576:	f000 f825 	bl	80005c4 <MX_USART1_UART_Init>
//  Queue_Handle_2 = xQueueCreate(1, sizeof(Queue_Data*));
//  Queue_Set_Handle = xQueueCreateSet(1 * 2);
//  xQueueAddToSet(Queue_Handle_1, Queue_Set_Handle);
//  xQueueAddToSet(Queue_Handle_2, Queue_Set_Handle);

  xTaskCreate(Task1_Handler, "Task-1", configMINIMAL_STACK_SIZE, NULL, 1, &Task_Handle_1);
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <main+0x5c>)
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2301      	movs	r3, #1
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	2282      	movs	r2, #130	; 0x82
 8000586:	490a      	ldr	r1, [pc, #40]	; (80005b0 <main+0x60>)
 8000588:	480a      	ldr	r0, [pc, #40]	; (80005b4 <main+0x64>)
 800058a:	f002 f841 	bl	8002610 <xTaskCreate>
  xTaskCreate(Task2_Handler, "Task-2", configMINIMAL_STACK_SIZE, NULL, 2, &Task_Handle_2);
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <main+0x68>)
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	2302      	movs	r3, #2
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2300      	movs	r3, #0
 8000598:	2282      	movs	r2, #130	; 0x82
 800059a:	4908      	ldr	r1, [pc, #32]	; (80005bc <main+0x6c>)
 800059c:	4808      	ldr	r0, [pc, #32]	; (80005c0 <main+0x70>)
 800059e:	f002 f837 	bl	8002610 <xTaskCreate>
  Periodic_Timer_Handle = xTimerCreate("Periodic Timer", pdMS_TO_TICKS(500), pdTRUE, 0, Periodic_Callback);

  OneShot_Started = xTimerStart(One_Shot_Handle, 0);
  PeriodicTimer_Started = xTimerStart(Periodic_Timer_Handle, 0);*/

  vTaskStartScheduler();
 80005a2:	f002 f9db 	bl	800295c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <main+0x56>
 80005a8:	e0001000 	.word	0xe0001000
 80005ac:	200000b8 	.word	0x200000b8
 80005b0:	08005fb4 	.word	0x08005fb4
 80005b4:	080004ed 	.word	0x080004ed
 80005b8:	200000bc 	.word	0x200000bc
 80005bc:	08005fbc 	.word	0x08005fbc
 80005c0:	08000521 	.word	0x08000521

080005c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_USART1_UART_Init+0x4c>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <MX_USART1_UART_Init+0x50>)
 80005cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <MX_USART1_UART_Init+0x4c>)
 80005d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_USART1_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_USART1_UART_Init+0x4c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <MX_USART1_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_USART1_UART_Init+0x4c>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <MX_USART1_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_USART1_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_USART1_UART_Init+0x4c>)
 80005fc:	f000 fed4 	bl	80013a8 <HAL_UART_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000606:	f000 f859 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000074 	.word	0x20000074
 8000614:	40011000 	.word	0x40011000

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_GPIO_Init+0x80>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a18      	ldr	r2, [pc, #96]	; (8000698 <MX_GPIO_Init+0x80>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_GPIO_Init+0x80>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_GPIO_Init+0x80>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <MX_GPIO_Init+0x80>)
 8000654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_GPIO_Init+0x80>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <MX_GPIO_Init+0x84>)
 800066e:	f000 fbed 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000672:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_GPIO_Init+0x84>)
 800068c:	f000 fa32 	bl	8000af4 <HAL_GPIO_Init>

}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40021800 	.word	0x40021800

080006a0 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */
void vApplicationIdleHook(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	Idle_Count++;
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <vApplicationIdleHook+0x18>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <vApplicationIdleHook+0x18>)
 80006ac:	6013      	str	r3, [r2, #0]
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	200000c0 	.word	0x200000c0

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <Error_Handler+0x8>
	...

080006c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a19      	ldr	r2, [pc, #100]	; (800074c <HAL_UART_MspInit+0x84>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d12c      	bne.n	8000744 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <HAL_UART_MspInit+0x88>)
 80006f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f2:	4a17      	ldr	r2, [pc, #92]	; (8000750 <HAL_UART_MspInit+0x88>)
 80006f4:	f043 0310 	orr.w	r3, r3, #16
 80006f8:	6453      	str	r3, [r2, #68]	; 0x44
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <HAL_UART_MspInit+0x88>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fe:	f003 0310 	and.w	r3, r3, #16
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <HAL_UART_MspInit+0x88>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a10      	ldr	r2, [pc, #64]	; (8000750 <HAL_UART_MspInit+0x88>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <HAL_UART_MspInit+0x88>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000722:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000734:	2307      	movs	r3, #7
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <HAL_UART_MspInit+0x8c>)
 8000740:	f000 f9d8 	bl	8000af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40011000 	.word	0x40011000
 8000750:	40023800 	.word	0x40023800
 8000754:	40020000 	.word	0x40020000

08000758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800075c:	e7fe      	b.n	800075c <NMI_Handler+0x4>

0800075e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000762:	e7fe      	b.n	8000762 <HardFault_Handler+0x4>

08000764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <MemManage_Handler+0x4>

0800076a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <BusFault_Handler+0x4>

08000770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <UsageFault_Handler+0x4>

08000776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <TIM6_DAC_IRQHandler+0x10>)
 800078a:	f000 fcbf 	bl	800110c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000002c 	.word	0x2000002c

08000798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <SystemInit+0x20>)
 800079e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a2:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <SystemInit+0x20>)
 80007a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b087      	sub	sp, #28
 80007c0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	2302      	movs	r3, #2
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	2302      	movs	r3, #2
 80007d4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80007d6:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <SystemCoreClockUpdate+0xec>)
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	f003 030c 	and.w	r3, r3, #12
 80007de:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	2b08      	cmp	r3, #8
 80007e4:	d011      	beq.n	800080a <SystemCoreClockUpdate+0x4e>
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	2b08      	cmp	r3, #8
 80007ea:	d844      	bhi.n	8000876 <SystemCoreClockUpdate+0xba>
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d003      	beq.n	80007fa <SystemCoreClockUpdate+0x3e>
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d004      	beq.n	8000802 <SystemCoreClockUpdate+0x46>
 80007f8:	e03d      	b.n	8000876 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80007fa:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <SystemCoreClockUpdate+0xf0>)
 80007fc:	4a2c      	ldr	r2, [pc, #176]	; (80008b0 <SystemCoreClockUpdate+0xf4>)
 80007fe:	601a      	str	r2, [r3, #0]
      break;
 8000800:	e03d      	b.n	800087e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <SystemCoreClockUpdate+0xf0>)
 8000804:	4a2b      	ldr	r2, [pc, #172]	; (80008b4 <SystemCoreClockUpdate+0xf8>)
 8000806:	601a      	str	r2, [r3, #0]
      break;
 8000808:	e039      	b.n	800087e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <SystemCoreClockUpdate+0xec>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	0d9b      	lsrs	r3, r3, #22
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000816:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <SystemCoreClockUpdate+0xec>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800081e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d00c      	beq.n	8000840 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000826:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <SystemCoreClockUpdate+0xf8>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	fbb2 f3f3 	udiv	r3, r2, r3
 800082e:	4a1e      	ldr	r2, [pc, #120]	; (80008a8 <SystemCoreClockUpdate+0xec>)
 8000830:	6852      	ldr	r2, [r2, #4]
 8000832:	0992      	lsrs	r2, r2, #6
 8000834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000838:	fb02 f303 	mul.w	r3, r2, r3
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	e00b      	b.n	8000858 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <SystemCoreClockUpdate+0xf4>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	fbb2 f3f3 	udiv	r3, r2, r3
 8000848:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <SystemCoreClockUpdate+0xec>)
 800084a:	6852      	ldr	r2, [r2, #4]
 800084c:	0992      	lsrs	r2, r2, #6
 800084e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000852:	fb02 f303 	mul.w	r3, r2, r3
 8000856:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <SystemCoreClockUpdate+0xec>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	0c1b      	lsrs	r3, r3, #16
 800085e:	f003 0303 	and.w	r3, r3, #3
 8000862:	3301      	adds	r3, #1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000870:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <SystemCoreClockUpdate+0xf0>)
 8000872:	6013      	str	r3, [r2, #0]
      break;
 8000874:	e003      	b.n	800087e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <SystemCoreClockUpdate+0xf0>)
 8000878:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <SystemCoreClockUpdate+0xf4>)
 800087a:	601a      	str	r2, [r3, #0]
      break;
 800087c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <SystemCoreClockUpdate+0xec>)
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	091b      	lsrs	r3, r3, #4
 8000884:	f003 030f 	and.w	r3, r3, #15
 8000888:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <SystemCoreClockUpdate+0xfc>)
 800088a:	5cd3      	ldrb	r3, [r2, r3]
 800088c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <SystemCoreClockUpdate+0xf0>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	fa22 f303 	lsr.w	r3, r2, r3
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <SystemCoreClockUpdate+0xf0>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	371c      	adds	r7, #28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	40023800 	.word	0x40023800
 80008ac:	20000000 	.word	0x20000000
 80008b0:	00f42400 	.word	0x00f42400
 80008b4:	007a1200 	.word	0x007a1200
 80008b8:	08006090 	.word	0x08006090

080008bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80008bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008c2:	490e      	ldr	r1, [pc, #56]	; (80008fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008c4:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c8:	e002      	b.n	80008d0 <LoopCopyDataInit>

080008ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ce:	3304      	adds	r3, #4

080008d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d4:	d3f9      	bcc.n	80008ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008d8:	4c0b      	ldr	r4, [pc, #44]	; (8000908 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008dc:	e001      	b.n	80008e2 <LoopFillZerobss>

080008de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e0:	3204      	adds	r2, #4

080008e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e4:	d3fb      	bcc.n	80008de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008e6:	f7ff ff57 	bl	8000798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ea:	f005 faef 	bl	8005ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ee:	f7ff fe2f 	bl	8000550 <main>
  bx  lr    
 80008f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80008f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000900:	080060e0 	.word	0x080060e0
  ldr r2, =_sbss
 8000904:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000908:	200138e0 	.word	0x200138e0

0800090c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC_IRQHandler>
	...

08000910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_InitTick+0x54>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_InitTick+0x58>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000926:	fbb3 f3f1 	udiv	r3, r3, r1
 800092a:	fbb2 f3f3 	udiv	r3, r2, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f8d4 	bl	8000adc <HAL_SYSTICK_Config>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e00e      	b.n	800095c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b0f      	cmp	r3, #15
 8000942:	d80a      	bhi.n	800095a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000944:	2200      	movs	r2, #0
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f000 f8aa 	bl	8000aa4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000950:	4a06      	ldr	r2, [pc, #24]	; (800096c <HAL_InitTick+0x5c>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000000 	.word	0x20000000
 8000968:	20000008 	.word	0x20000008
 800096c:	20000004 	.word	0x20000004

08000970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return uwTick;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <HAL_GetTick+0x14>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	200000c4 	.word	0x200000c4

08000988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <__NVIC_GetPriorityGrouping+0x18>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	f003 0307 	and.w	r3, r3, #7
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db0a      	blt.n	80009ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	490c      	ldr	r1, [pc, #48]	; (80009f0 <__NVIC_SetPriority+0x4c>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	440b      	add	r3, r1
 80009c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009cc:	e00a      	b.n	80009e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4908      	ldr	r1, [pc, #32]	; (80009f4 <__NVIC_SetPriority+0x50>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	3b04      	subs	r3, #4
 80009dc:	0112      	lsls	r2, r2, #4
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	440b      	add	r3, r1
 80009e2:	761a      	strb	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f1c3 0307 	rsb	r3, r3, #7
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	bf28      	it	cs
 8000a16:	2304      	movcs	r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d902      	bls.n	8000a28 <NVIC_EncodePriority+0x30>
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3b03      	subs	r3, #3
 8000a26:	e000      	b.n	8000a2a <NVIC_EncodePriority+0x32>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43da      	mvns	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a40:	f04f 31ff 	mov.w	r1, #4294967295
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43d9      	mvns	r1, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	4313      	orrs	r3, r2
         );
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3724      	adds	r7, #36	; 0x24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a70:	d301      	bcc.n	8000a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00f      	b.n	8000a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <SysTick_Config+0x40>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7e:	210f      	movs	r1, #15
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f7ff ff8e 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SysTick_Config+0x40>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <SysTick_Config+0x40>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	e000e010 	.word	0xe000e010

08000aa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
 8000ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab6:	f7ff ff67 	bl	8000988 <__NVIC_GetPriorityGrouping>
 8000aba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	68b9      	ldr	r1, [r7, #8]
 8000ac0:	6978      	ldr	r0, [r7, #20]
 8000ac2:	f7ff ff99 	bl	80009f8 <NVIC_EncodePriority>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ff68 	bl	80009a4 <__NVIC_SetPriority>
}
 8000ad4:	bf00      	nop
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ffbb 	bl	8000a60 <SysTick_Config>
 8000aea:	4603      	mov	r3, r0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e177      	b.n	8000e00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b10:	2201      	movs	r2, #1
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	f040 8166 	bne.w	8000dfa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 0303 	and.w	r3, r3, #3
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d005      	beq.n	8000b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d130      	bne.n	8000ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	68da      	ldr	r2, [r3, #12]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	091b      	lsrs	r3, r3, #4
 8000b92:	f003 0201 	and.w	r2, r3, #1
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 0303 	and.w	r3, r3, #3
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d017      	beq.n	8000be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d123      	bne.n	8000c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	08da      	lsrs	r2, r3, #3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3208      	adds	r2, #8
 8000bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	f003 0307 	and.w	r3, r3, #7
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	220f      	movs	r2, #15
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	691a      	ldr	r2, [r3, #16]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	08da      	lsrs	r2, r3, #3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3208      	adds	r2, #8
 8000c32:	69b9      	ldr	r1, [r7, #24]
 8000c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0203 	and.w	r2, r3, #3
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f000 80c0 	beq.w	8000dfa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b66      	ldr	r3, [pc, #408]	; (8000e18 <HAL_GPIO_Init+0x324>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a65      	ldr	r2, [pc, #404]	; (8000e18 <HAL_GPIO_Init+0x324>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b63      	ldr	r3, [pc, #396]	; (8000e18 <HAL_GPIO_Init+0x324>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c96:	4a61      	ldr	r2, [pc, #388]	; (8000e1c <HAL_GPIO_Init+0x328>)
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	220f      	movs	r2, #15
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a58      	ldr	r2, [pc, #352]	; (8000e20 <HAL_GPIO_Init+0x32c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d037      	beq.n	8000d32 <HAL_GPIO_Init+0x23e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a57      	ldr	r2, [pc, #348]	; (8000e24 <HAL_GPIO_Init+0x330>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d031      	beq.n	8000d2e <HAL_GPIO_Init+0x23a>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a56      	ldr	r2, [pc, #344]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d02b      	beq.n	8000d2a <HAL_GPIO_Init+0x236>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a55      	ldr	r2, [pc, #340]	; (8000e2c <HAL_GPIO_Init+0x338>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d025      	beq.n	8000d26 <HAL_GPIO_Init+0x232>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a54      	ldr	r2, [pc, #336]	; (8000e30 <HAL_GPIO_Init+0x33c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d01f      	beq.n	8000d22 <HAL_GPIO_Init+0x22e>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a53      	ldr	r2, [pc, #332]	; (8000e34 <HAL_GPIO_Init+0x340>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d019      	beq.n	8000d1e <HAL_GPIO_Init+0x22a>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a52      	ldr	r2, [pc, #328]	; (8000e38 <HAL_GPIO_Init+0x344>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d013      	beq.n	8000d1a <HAL_GPIO_Init+0x226>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a51      	ldr	r2, [pc, #324]	; (8000e3c <HAL_GPIO_Init+0x348>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d00d      	beq.n	8000d16 <HAL_GPIO_Init+0x222>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a50      	ldr	r2, [pc, #320]	; (8000e40 <HAL_GPIO_Init+0x34c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d007      	beq.n	8000d12 <HAL_GPIO_Init+0x21e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4f      	ldr	r2, [pc, #316]	; (8000e44 <HAL_GPIO_Init+0x350>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d101      	bne.n	8000d0e <HAL_GPIO_Init+0x21a>
 8000d0a:	2309      	movs	r3, #9
 8000d0c:	e012      	b.n	8000d34 <HAL_GPIO_Init+0x240>
 8000d0e:	230a      	movs	r3, #10
 8000d10:	e010      	b.n	8000d34 <HAL_GPIO_Init+0x240>
 8000d12:	2308      	movs	r3, #8
 8000d14:	e00e      	b.n	8000d34 <HAL_GPIO_Init+0x240>
 8000d16:	2307      	movs	r3, #7
 8000d18:	e00c      	b.n	8000d34 <HAL_GPIO_Init+0x240>
 8000d1a:	2306      	movs	r3, #6
 8000d1c:	e00a      	b.n	8000d34 <HAL_GPIO_Init+0x240>
 8000d1e:	2305      	movs	r3, #5
 8000d20:	e008      	b.n	8000d34 <HAL_GPIO_Init+0x240>
 8000d22:	2304      	movs	r3, #4
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x240>
 8000d26:	2303      	movs	r3, #3
 8000d28:	e004      	b.n	8000d34 <HAL_GPIO_Init+0x240>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_Init+0x240>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <HAL_GPIO_Init+0x240>
 8000d32:	2300      	movs	r3, #0
 8000d34:	69fa      	ldr	r2, [r7, #28]
 8000d36:	f002 0203 	and.w	r2, r2, #3
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	4093      	lsls	r3, r2
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d44:	4935      	ldr	r1, [pc, #212]	; (8000e1c <HAL_GPIO_Init+0x328>)
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <HAL_GPIO_Init+0x354>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d76:	4a34      	ldr	r2, [pc, #208]	; (8000e48 <HAL_GPIO_Init+0x354>)
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d7c:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <HAL_GPIO_Init+0x354>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000da0:	4a29      	ldr	r2, [pc, #164]	; (8000e48 <HAL_GPIO_Init+0x354>)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000da6:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <HAL_GPIO_Init+0x354>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dca:	4a1f      	ldr	r2, [pc, #124]	; (8000e48 <HAL_GPIO_Init+0x354>)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_GPIO_Init+0x354>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <HAL_GPIO_Init+0x354>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	2b0f      	cmp	r3, #15
 8000e04:	f67f ae84 	bls.w	8000b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40013800 	.word	0x40013800
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020c00 	.word	0x40020c00
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40021400 	.word	0x40021400
 8000e38:	40021800 	.word	0x40021800
 8000e3c:	40021c00 	.word	0x40021c00
 8000e40:	40022000 	.word	0x40022000
 8000e44:	40022400 	.word	0x40022400
 8000e48:	40013c00 	.word	0x40013c00

08000e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e5c:	787b      	ldrb	r3, [r7, #1]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e68:	e003      	b.n	8000e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	041a      	lsls	r2, r3, #16
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	619a      	str	r2, [r3, #24]
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b085      	sub	sp, #20
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	460b      	mov	r3, r1
 8000e88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e90:	887a      	ldrh	r2, [r7, #2]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4013      	ands	r3, r2
 8000e96:	041a      	lsls	r2, r3, #16
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	887b      	ldrh	r3, [r7, #2]
 8000e9e:	400b      	ands	r3, r1
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	619a      	str	r2, [r3, #24]
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000000 	.word	0x20000000

08000ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ed0:	f7ff fff0 	bl	8000eb4 <HAL_RCC_GetHCLKFreq>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	0a9b      	lsrs	r3, r3, #10
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	4903      	ldr	r1, [pc, #12]	; (8000ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000ee2:	5ccb      	ldrb	r3, [r1, r3]
 8000ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	080060a0 	.word	0x080060a0

08000ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ef8:	f7ff ffdc 	bl	8000eb4 <HAL_RCC_GetHCLKFreq>
 8000efc:	4602      	mov	r2, r0
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	0b5b      	lsrs	r3, r3, #13
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	4903      	ldr	r1, [pc, #12]	; (8000f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f0a:	5ccb      	ldrb	r3, [r1, r3]
 8000f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40023800 	.word	0x40023800
 8000f18:	080060a0 	.word	0x080060a0

08000f1c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000f22:	f7ff fd25 	bl	8000970 <HAL_GetTick>
 8000f26:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000f28:	4b72      	ldr	r3, [pc, #456]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a71      	ldr	r2, [pc, #452]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f36:	f7ff fd1b 	bl	8000970 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e0d0      	b.n	80010ea <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f48:	4b6a      	ldr	r3, [pc, #424]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0f0      	beq.n	8000f36 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8000f54:	4b67      	ldr	r3, [pc, #412]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a66      	ldr	r2, [pc, #408]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8000f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000f60:	f7ff fd06 	bl	8000970 <HAL_GetTick>
 8000f64:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8000f66:	4b63      	ldr	r3, [pc, #396]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000f6c:	e00a      	b.n	8000f84 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f6e:	f7ff fcff 	bl	8000970 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e0b2      	b.n	80010ea <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000f84:	4b5b      	ldr	r3, [pc, #364]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1ee      	bne.n	8000f6e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000f90:	f7ff fcee 	bl	8000970 <HAL_GetTick>
 8000f94:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8000f96:	4b57      	ldr	r3, [pc, #348]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a56      	ldr	r2, [pc, #344]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8000f9c:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8000fa0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fce4 	bl	8000970 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e099      	b.n	80010ea <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000fb6:	4b4f      	ldr	r3, [pc, #316]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000fc2:	f7ff fcd5 	bl	8000970 <HAL_GetTick>
 8000fc6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000fc8:	4b4a      	ldr	r3, [pc, #296]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a49      	ldr	r2, [pc, #292]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8000fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fd2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fd6:	f7ff fccb 	bl	8000970 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e080      	b.n	80010ea <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000fe8:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f0      	bne.n	8000fd6 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000ff4:	f7ff fcbc 	bl	8000970 <HAL_GetTick>
 8000ff8:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8000ffa:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a3d      	ldr	r2, [pc, #244]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8001000:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001004:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001008:	f7ff fcb2 	bl	8000970 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e067      	b.n	80010ea <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800101a:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001026:	f7ff fca3 	bl	8000970 <HAL_GetTick>
 800102a:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a30      	ldr	r2, [pc, #192]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8001032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001036:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800103a:	f7ff fc99 	bl	8000970 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e04e      	b.n	80010ea <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 800104c:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f0      	bne.n	800103a <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8001058:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 800105a:	4a27      	ldr	r2, [pc, #156]	; (80010f8 <HAL_RCC_DeInit+0x1dc>)
 800105c:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8001060:	4a26      	ldr	r2, [pc, #152]	; (80010fc <HAL_RCC_DeInit+0x1e0>)
 8001062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 8001066:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8001068:	4a24      	ldr	r2, [pc, #144]	; (80010fc <HAL_RCC_DeInit+0x1e0>)
 800106a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8001074:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001078:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8001080:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001084:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	4a1a      	ldr	r2, [pc, #104]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 800108c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001090:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	4a17      	ldr	r2, [pc, #92]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 8001098:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800109c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 80010a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 80010b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 80010b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 80010c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010c6:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_RCC_DeInit+0x1d8>)
 80010c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010cc:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_RCC_DeInit+0x1e4>)
 80010d0:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <HAL_RCC_DeInit+0x1e8>)
 80010d2:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_RCC_DeInit+0x1ec>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fc19 	bl	8000910 <HAL_InitTick>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 80010e8:	2300      	movs	r3, #0
  }
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	04003010 	.word	0x04003010
 80010fc:	24003000 	.word	0x24003000
 8001100:	20000000 	.word	0x20000000
 8001104:	00f42400 	.word	0x00f42400
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b02      	cmp	r3, #2
 8001120:	d122      	bne.n	8001168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b02      	cmp	r3, #2
 800112e:	d11b      	bne.n	8001168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f06f 0202 	mvn.w	r2, #2
 8001138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 f8f8 	bl	8001344 <HAL_TIM_IC_CaptureCallback>
 8001154:	e005      	b.n	8001162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f8ea 	bl	8001330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f8fb 	bl	8001358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	2b04      	cmp	r3, #4
 8001174:	d122      	bne.n	80011bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b04      	cmp	r3, #4
 8001182:	d11b      	bne.n	80011bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f06f 0204 	mvn.w	r2, #4
 800118c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2202      	movs	r2, #2
 8001192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f8ce 	bl	8001344 <HAL_TIM_IC_CaptureCallback>
 80011a8:	e005      	b.n	80011b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 f8c0 	bl	8001330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f8d1 	bl	8001358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d122      	bne.n	8001210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d11b      	bne.n	8001210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f06f 0208 	mvn.w	r2, #8
 80011e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2204      	movs	r2, #4
 80011e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f8a4 	bl	8001344 <HAL_TIM_IC_CaptureCallback>
 80011fc:	e005      	b.n	800120a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f896 	bl	8001330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f8a7 	bl	8001358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	2b10      	cmp	r3, #16
 800121c:	d122      	bne.n	8001264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	2b10      	cmp	r3, #16
 800122a:	d11b      	bne.n	8001264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f06f 0210 	mvn.w	r2, #16
 8001234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2208      	movs	r2, #8
 800123a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f87a 	bl	8001344 <HAL_TIM_IC_CaptureCallback>
 8001250:	e005      	b.n	800125e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f86c 	bl	8001330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 f87d 	bl	8001358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b01      	cmp	r3, #1
 8001270:	d10e      	bne.n	8001290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b01      	cmp	r3, #1
 800127e:	d107      	bne.n	8001290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f06f 0201 	mvn.w	r2, #1
 8001288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f846 	bl	800131c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129a:	2b80      	cmp	r3, #128	; 0x80
 800129c:	d10e      	bne.n	80012bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a8:	2b80      	cmp	r3, #128	; 0x80
 80012aa:	d107      	bne.n	80012bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80012b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f86c 	bl	8001394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c6:	2b40      	cmp	r3, #64	; 0x40
 80012c8:	d10e      	bne.n	80012e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d4:	2b40      	cmp	r3, #64	; 0x40
 80012d6:	d107      	bne.n	80012e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80012e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f842 	bl	800136c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	2b20      	cmp	r3, #32
 80012f4:	d10e      	bne.n	8001314 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	2b20      	cmp	r3, #32
 8001302:	d107      	bne.n	8001314 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f06f 0220 	mvn.w	r2, #32
 800130c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f836 	bl	8001380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e03f      	b.n	800143a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff f97a 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2224      	movs	r2, #36	; 0x24
 80013d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f829 	bl	8001444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2220      	movs	r2, #32
 800142c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2220      	movs	r2, #32
 8001434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001448:	b0c0      	sub	sp, #256	; 0x100
 800144a:	af00      	add	r7, sp, #0
 800144c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800145c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001460:	68d9      	ldr	r1, [r3, #12]
 8001462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	ea40 0301 	orr.w	r3, r0, r1
 800146c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800146e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	431a      	orrs	r2, r3
 800147c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	431a      	orrs	r2, r3
 8001484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4313      	orrs	r3, r2
 800148c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800149c:	f021 010c 	bic.w	r1, r1, #12
 80014a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80014aa:	430b      	orrs	r3, r1
 80014ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80014ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014be:	6999      	ldr	r1, [r3, #24]
 80014c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	ea40 0301 	orr.w	r3, r0, r1
 80014ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80014cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b8f      	ldr	r3, [pc, #572]	; (8001710 <UART_SetConfig+0x2cc>)
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d005      	beq.n	80014e4 <UART_SetConfig+0xa0>
 80014d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b8d      	ldr	r3, [pc, #564]	; (8001714 <UART_SetConfig+0x2d0>)
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d104      	bne.n	80014ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80014e4:	f7ff fd06 	bl	8000ef4 <HAL_RCC_GetPCLK2Freq>
 80014e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80014ec:	e003      	b.n	80014f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80014ee:	f7ff fced 	bl	8000ecc <HAL_RCC_GetPCLK1Freq>
 80014f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001500:	f040 810c 	bne.w	800171c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001508:	2200      	movs	r2, #0
 800150a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800150e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001512:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001516:	4622      	mov	r2, r4
 8001518:	462b      	mov	r3, r5
 800151a:	1891      	adds	r1, r2, r2
 800151c:	65b9      	str	r1, [r7, #88]	; 0x58
 800151e:	415b      	adcs	r3, r3
 8001520:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001522:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001526:	4621      	mov	r1, r4
 8001528:	eb12 0801 	adds.w	r8, r2, r1
 800152c:	4629      	mov	r1, r5
 800152e:	eb43 0901 	adc.w	r9, r3, r1
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800153e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001546:	4690      	mov	r8, r2
 8001548:	4699      	mov	r9, r3
 800154a:	4623      	mov	r3, r4
 800154c:	eb18 0303 	adds.w	r3, r8, r3
 8001550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001554:	462b      	mov	r3, r5
 8001556:	eb49 0303 	adc.w	r3, r9, r3
 800155a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800155e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800156a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800156e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001572:	460b      	mov	r3, r1
 8001574:	18db      	adds	r3, r3, r3
 8001576:	653b      	str	r3, [r7, #80]	; 0x50
 8001578:	4613      	mov	r3, r2
 800157a:	eb42 0303 	adc.w	r3, r2, r3
 800157e:	657b      	str	r3, [r7, #84]	; 0x54
 8001580:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001584:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001588:	f7fe fe32 	bl	80001f0 <__aeabi_uldivmod>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4b61      	ldr	r3, [pc, #388]	; (8001718 <UART_SetConfig+0x2d4>)
 8001592:	fba3 2302 	umull	r2, r3, r3, r2
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	011c      	lsls	r4, r3, #4
 800159a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800159e:	2200      	movs	r2, #0
 80015a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80015a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80015a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80015ac:	4642      	mov	r2, r8
 80015ae:	464b      	mov	r3, r9
 80015b0:	1891      	adds	r1, r2, r2
 80015b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80015b4:	415b      	adcs	r3, r3
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80015bc:	4641      	mov	r1, r8
 80015be:	eb12 0a01 	adds.w	sl, r2, r1
 80015c2:	4649      	mov	r1, r9
 80015c4:	eb43 0b01 	adc.w	fp, r3, r1
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015dc:	4692      	mov	sl, r2
 80015de:	469b      	mov	fp, r3
 80015e0:	4643      	mov	r3, r8
 80015e2:	eb1a 0303 	adds.w	r3, sl, r3
 80015e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80015ea:	464b      	mov	r3, r9
 80015ec:	eb4b 0303 	adc.w	r3, fp, r3
 80015f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80015f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001600:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001604:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001608:	460b      	mov	r3, r1
 800160a:	18db      	adds	r3, r3, r3
 800160c:	643b      	str	r3, [r7, #64]	; 0x40
 800160e:	4613      	mov	r3, r2
 8001610:	eb42 0303 	adc.w	r3, r2, r3
 8001614:	647b      	str	r3, [r7, #68]	; 0x44
 8001616:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800161a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800161e:	f7fe fde7 	bl	80001f0 <__aeabi_uldivmod>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4611      	mov	r1, r2
 8001628:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <UART_SetConfig+0x2d4>)
 800162a:	fba3 2301 	umull	r2, r3, r3, r1
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	2264      	movs	r2, #100	; 0x64
 8001632:	fb02 f303 	mul.w	r3, r2, r3
 8001636:	1acb      	subs	r3, r1, r3
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800163e:	4b36      	ldr	r3, [pc, #216]	; (8001718 <UART_SetConfig+0x2d4>)
 8001640:	fba3 2302 	umull	r2, r3, r3, r2
 8001644:	095b      	lsrs	r3, r3, #5
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800164c:	441c      	add	r4, r3
 800164e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001652:	2200      	movs	r2, #0
 8001654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001658:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800165c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001660:	4642      	mov	r2, r8
 8001662:	464b      	mov	r3, r9
 8001664:	1891      	adds	r1, r2, r2
 8001666:	63b9      	str	r1, [r7, #56]	; 0x38
 8001668:	415b      	adcs	r3, r3
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800166c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001670:	4641      	mov	r1, r8
 8001672:	1851      	adds	r1, r2, r1
 8001674:	6339      	str	r1, [r7, #48]	; 0x30
 8001676:	4649      	mov	r1, r9
 8001678:	414b      	adcs	r3, r1
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001688:	4659      	mov	r1, fp
 800168a:	00cb      	lsls	r3, r1, #3
 800168c:	4651      	mov	r1, sl
 800168e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001692:	4651      	mov	r1, sl
 8001694:	00ca      	lsls	r2, r1, #3
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	4603      	mov	r3, r0
 800169c:	4642      	mov	r2, r8
 800169e:	189b      	adds	r3, r3, r2
 80016a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80016a4:	464b      	mov	r3, r9
 80016a6:	460a      	mov	r2, r1
 80016a8:	eb42 0303 	adc.w	r3, r2, r3
 80016ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80016c4:	460b      	mov	r3, r1
 80016c6:	18db      	adds	r3, r3, r3
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ca:	4613      	mov	r3, r2
 80016cc:	eb42 0303 	adc.w	r3, r2, r3
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80016da:	f7fe fd89 	bl	80001f0 <__aeabi_uldivmod>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <UART_SetConfig+0x2d4>)
 80016e4:	fba3 1302 	umull	r1, r3, r3, r2
 80016e8:	095b      	lsrs	r3, r3, #5
 80016ea:	2164      	movs	r1, #100	; 0x64
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	3332      	adds	r3, #50	; 0x32
 80016f6:	4a08      	ldr	r2, [pc, #32]	; (8001718 <UART_SetConfig+0x2d4>)
 80016f8:	fba2 2303 	umull	r2, r3, r2, r3
 80016fc:	095b      	lsrs	r3, r3, #5
 80016fe:	f003 0207 	and.w	r2, r3, #7
 8001702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4422      	add	r2, r4
 800170a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800170c:	e106      	b.n	800191c <UART_SetConfig+0x4d8>
 800170e:	bf00      	nop
 8001710:	40011000 	.word	0x40011000
 8001714:	40011400 	.word	0x40011400
 8001718:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800171c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001720:	2200      	movs	r2, #0
 8001722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001726:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800172a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800172e:	4642      	mov	r2, r8
 8001730:	464b      	mov	r3, r9
 8001732:	1891      	adds	r1, r2, r2
 8001734:	6239      	str	r1, [r7, #32]
 8001736:	415b      	adcs	r3, r3
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800173e:	4641      	mov	r1, r8
 8001740:	1854      	adds	r4, r2, r1
 8001742:	4649      	mov	r1, r9
 8001744:	eb43 0501 	adc.w	r5, r3, r1
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	00eb      	lsls	r3, r5, #3
 8001752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001756:	00e2      	lsls	r2, r4, #3
 8001758:	4614      	mov	r4, r2
 800175a:	461d      	mov	r5, r3
 800175c:	4643      	mov	r3, r8
 800175e:	18e3      	adds	r3, r4, r3
 8001760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001764:	464b      	mov	r3, r9
 8001766:	eb45 0303 	adc.w	r3, r5, r3
 800176a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800176e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800177a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800178a:	4629      	mov	r1, r5
 800178c:	008b      	lsls	r3, r1, #2
 800178e:	4621      	mov	r1, r4
 8001790:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001794:	4621      	mov	r1, r4
 8001796:	008a      	lsls	r2, r1, #2
 8001798:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800179c:	f7fe fd28 	bl	80001f0 <__aeabi_uldivmod>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4b60      	ldr	r3, [pc, #384]	; (8001928 <UART_SetConfig+0x4e4>)
 80017a6:	fba3 2302 	umull	r2, r3, r3, r2
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	011c      	lsls	r4, r3, #4
 80017ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017b2:	2200      	movs	r2, #0
 80017b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017c0:	4642      	mov	r2, r8
 80017c2:	464b      	mov	r3, r9
 80017c4:	1891      	adds	r1, r2, r2
 80017c6:	61b9      	str	r1, [r7, #24]
 80017c8:	415b      	adcs	r3, r3
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017d0:	4641      	mov	r1, r8
 80017d2:	1851      	adds	r1, r2, r1
 80017d4:	6139      	str	r1, [r7, #16]
 80017d6:	4649      	mov	r1, r9
 80017d8:	414b      	adcs	r3, r1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017e8:	4659      	mov	r1, fp
 80017ea:	00cb      	lsls	r3, r1, #3
 80017ec:	4651      	mov	r1, sl
 80017ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017f2:	4651      	mov	r1, sl
 80017f4:	00ca      	lsls	r2, r1, #3
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	4603      	mov	r3, r0
 80017fc:	4642      	mov	r2, r8
 80017fe:	189b      	adds	r3, r3, r2
 8001800:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001804:	464b      	mov	r3, r9
 8001806:	460a      	mov	r2, r1
 8001808:	eb42 0303 	adc.w	r3, r2, r3
 800180c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	67bb      	str	r3, [r7, #120]	; 0x78
 800181a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001828:	4649      	mov	r1, r9
 800182a:	008b      	lsls	r3, r1, #2
 800182c:	4641      	mov	r1, r8
 800182e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001832:	4641      	mov	r1, r8
 8001834:	008a      	lsls	r2, r1, #2
 8001836:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800183a:	f7fe fcd9 	bl	80001f0 <__aeabi_uldivmod>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4611      	mov	r1, r2
 8001844:	4b38      	ldr	r3, [pc, #224]	; (8001928 <UART_SetConfig+0x4e4>)
 8001846:	fba3 2301 	umull	r2, r3, r3, r1
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2264      	movs	r2, #100	; 0x64
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	1acb      	subs	r3, r1, r3
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	3332      	adds	r3, #50	; 0x32
 8001858:	4a33      	ldr	r2, [pc, #204]	; (8001928 <UART_SetConfig+0x4e4>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001864:	441c      	add	r4, r3
 8001866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800186a:	2200      	movs	r2, #0
 800186c:	673b      	str	r3, [r7, #112]	; 0x70
 800186e:	677a      	str	r2, [r7, #116]	; 0x74
 8001870:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001874:	4642      	mov	r2, r8
 8001876:	464b      	mov	r3, r9
 8001878:	1891      	adds	r1, r2, r2
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	415b      	adcs	r3, r3
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001884:	4641      	mov	r1, r8
 8001886:	1851      	adds	r1, r2, r1
 8001888:	6039      	str	r1, [r7, #0]
 800188a:	4649      	mov	r1, r9
 800188c:	414b      	adcs	r3, r1
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800189c:	4659      	mov	r1, fp
 800189e:	00cb      	lsls	r3, r1, #3
 80018a0:	4651      	mov	r1, sl
 80018a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018a6:	4651      	mov	r1, sl
 80018a8:	00ca      	lsls	r2, r1, #3
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	4603      	mov	r3, r0
 80018b0:	4642      	mov	r2, r8
 80018b2:	189b      	adds	r3, r3, r2
 80018b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80018b6:	464b      	mov	r3, r9
 80018b8:	460a      	mov	r2, r1
 80018ba:	eb42 0303 	adc.w	r3, r2, r3
 80018be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	663b      	str	r3, [r7, #96]	; 0x60
 80018ca:	667a      	str	r2, [r7, #100]	; 0x64
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80018d8:	4649      	mov	r1, r9
 80018da:	008b      	lsls	r3, r1, #2
 80018dc:	4641      	mov	r1, r8
 80018de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018e2:	4641      	mov	r1, r8
 80018e4:	008a      	lsls	r2, r1, #2
 80018e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80018ea:	f7fe fc81 	bl	80001f0 <__aeabi_uldivmod>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <UART_SetConfig+0x4e4>)
 80018f4:	fba3 1302 	umull	r1, r3, r3, r2
 80018f8:	095b      	lsrs	r3, r3, #5
 80018fa:	2164      	movs	r1, #100	; 0x64
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	3332      	adds	r3, #50	; 0x32
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <UART_SetConfig+0x4e4>)
 8001908:	fba2 2303 	umull	r2, r3, r2, r3
 800190c:	095b      	lsrs	r3, r3, #5
 800190e:	f003 020f 	and.w	r2, r3, #15
 8001912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4422      	add	r2, r4
 800191a:	609a      	str	r2, [r3, #8]
}
 800191c:	bf00      	nop
 800191e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001922:	46bd      	mov	sp, r7
 8001924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001928:	51eb851f 	.word	0x51eb851f

0800192c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f103 0208 	add.w	r2, r3, #8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f103 0208 	add.w	r2, r3, #8
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f103 0208 	add.w	r2, r3, #8
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001986:	b480      	push	{r7}
 8001988:	b085      	sub	sp, #20
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	601a      	str	r2, [r3, #0]
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019ce:	b480      	push	{r7}
 80019d0:	b085      	sub	sp, #20
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d103      	bne.n	80019ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e00c      	b.n	8001a08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3308      	adds	r3, #8
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	e002      	b.n	80019fc <vListInsert+0x2e>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d2f6      	bcs.n	80019f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	601a      	str	r2, [r3, #0]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6892      	ldr	r2, [r2, #8]
 8001a56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6852      	ldr	r2, [r2, #4]
 8001a60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d103      	bne.n	8001a74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	1e5a      	subs	r2, r3, #1
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10a      	bne.n	8001abe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aac:	f383 8811 	msr	BASEPRI, r3
 8001ab0:	f3bf 8f6f 	isb	sy
 8001ab4:	f3bf 8f4f 	dsb	sy
 8001ab8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001aba:	bf00      	nop
 8001abc:	e7fe      	b.n	8001abc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001abe:	f002 f8b1 	bl	8003c24 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aca:	68f9      	ldr	r1, [r7, #12]
 8001acc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	441a      	add	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aee:	3b01      	subs	r3, #1
 8001af0:	68f9      	ldr	r1, [r7, #12]
 8001af2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001af4:	fb01 f303 	mul.w	r3, r1, r3
 8001af8:	441a      	add	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	22ff      	movs	r2, #255	; 0xff
 8001b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	22ff      	movs	r2, #255	; 0xff
 8001b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d114      	bne.n	8001b3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01a      	beq.n	8001b52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3310      	adds	r3, #16
 8001b20:	4618      	mov	r0, r3
 8001b22:	f001 f9b7 	bl	8002e94 <xTaskRemoveFromEventList>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d012      	beq.n	8001b52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <xQueueGenericReset+0xcc>)
 8001b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	f3bf 8f4f 	dsb	sy
 8001b38:	f3bf 8f6f 	isb	sy
 8001b3c:	e009      	b.n	8001b52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3310      	adds	r3, #16
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fef2 	bl	800192c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3324      	adds	r3, #36	; 0x24
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff feed 	bl	800192c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001b52:	f002 f897 	bl	8003c84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	e000ed04 	.word	0xe000ed04

08001b64 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10a      	bne.n	8001b8e <xQueueGenericCreate+0x2a>
	__asm volatile
 8001b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7c:	f383 8811 	msr	BASEPRI, r3
 8001b80:	f3bf 8f6f 	isb	sy
 8001b84:	f3bf 8f4f 	dsb	sy
 8001b88:	613b      	str	r3, [r7, #16]
}
 8001b8a:	bf00      	nop
 8001b8c:	e7fe      	b.n	8001b8c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	e004      	b.n	8001ba4 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	3354      	adds	r3, #84	; 0x54
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 f965 	bl	8003e78 <pvPortMalloc>
 8001bae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	3354      	adds	r3, #84	; 0x54
 8001bba:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f805 	bl	8001bd8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001bce:	69bb      	ldr	r3, [r7, #24]
	}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d103      	bne.n	8001bf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e002      	b.n	8001bfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c06:	2101      	movs	r1, #1
 8001c08:	69b8      	ldr	r0, [r7, #24]
 8001c0a:	f7ff ff43 	bl	8001a94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	68f9      	ldr	r1, [r7, #12]
 8001c22:	2073      	movs	r0, #115	; 0x73
 8001c24:	f003 f8ea 	bl	8004dfc <SEGGER_SYSVIEW_RecordU32x3>
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b090      	sub	sp, #64	; 0x40
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10a      	bne.n	8001c62 <xQueueGenericSend+0x32>
	__asm volatile
 8001c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c50:	f383 8811 	msr	BASEPRI, r3
 8001c54:	f3bf 8f6f 	isb	sy
 8001c58:	f3bf 8f4f 	dsb	sy
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001c5e:	bf00      	nop
 8001c60:	e7fe      	b.n	8001c60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d103      	bne.n	8001c70 <xQueueGenericSend+0x40>
 8001c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <xQueueGenericSend+0x44>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <xQueueGenericSend+0x46>
 8001c74:	2300      	movs	r3, #0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10a      	bne.n	8001c90 <xQueueGenericSend+0x60>
	__asm volatile
 8001c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7e:	f383 8811 	msr	BASEPRI, r3
 8001c82:	f3bf 8f6f 	isb	sy
 8001c86:	f3bf 8f4f 	dsb	sy
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001c8c:	bf00      	nop
 8001c8e:	e7fe      	b.n	8001c8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d103      	bne.n	8001c9e <xQueueGenericSend+0x6e>
 8001c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <xQueueGenericSend+0x72>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <xQueueGenericSend+0x74>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10a      	bne.n	8001cbe <xQueueGenericSend+0x8e>
	__asm volatile
 8001ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cac:	f383 8811 	msr	BASEPRI, r3
 8001cb0:	f3bf 8f6f 	isb	sy
 8001cb4:	f3bf 8f4f 	dsb	sy
 8001cb8:	623b      	str	r3, [r7, #32]
}
 8001cba:	bf00      	nop
 8001cbc:	e7fe      	b.n	8001cbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cbe:	f001 fa91 	bl	80031e4 <xTaskGetSchedulerState>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d102      	bne.n	8001cce <xQueueGenericSend+0x9e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <xQueueGenericSend+0xa2>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <xQueueGenericSend+0xa4>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10a      	bne.n	8001cee <xQueueGenericSend+0xbe>
	__asm volatile
 8001cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cdc:	f383 8811 	msr	BASEPRI, r3
 8001ce0:	f3bf 8f6f 	isb	sy
 8001ce4:	f3bf 8f4f 	dsb	sy
 8001ce8:	61fb      	str	r3, [r7, #28]
}
 8001cea:	bf00      	nop
 8001cec:	e7fe      	b.n	8001cec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001cee:	f001 ff99 	bl	8003c24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d302      	bcc.n	8001d04 <xQueueGenericSend+0xd4>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d149      	bne.n	8001d98 <xQueueGenericSend+0x168>
			{
				traceQUEUE_SEND( pxQueue );
 8001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fe04 	bl	8005914 <SEGGER_SYSVIEW_ShrinkId>
 8001d0c:	4601      	mov	r1, r0
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2300      	movs	r3, #0
 8001d14:	2200      	movs	r2, #0
 8001d16:	205a      	movs	r0, #90	; 0x5a
 8001d18:	f003 f8e6 	bl	8004ee8 <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	68b9      	ldr	r1, [r7, #8]
 8001d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d22:	f000 fa8b 	bl	800223c <prvCopyDataToQueue>
 8001d26:	62f8      	str	r0, [r7, #44]	; 0x2c

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8001d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00f      	beq.n	8001d50 <xQueueGenericSend+0x120>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8001d30:	6839      	ldr	r1, [r7, #0]
 8001d32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d34:	f000 fc06 	bl	8002544 <prvNotifyQueueSetContainer>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d028      	beq.n	8001d90 <xQueueGenericSend+0x160>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8001d3e:	4b57      	ldr	r3, [pc, #348]	; (8001e9c <xQueueGenericSend+0x26c>)
 8001d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	f3bf 8f4f 	dsb	sy
 8001d4a:	f3bf 8f6f 	isb	sy
 8001d4e:	e01f      	b.n	8001d90 <xQueueGenericSend+0x160>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d010      	beq.n	8001d7a <xQueueGenericSend+0x14a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5a:	3324      	adds	r3, #36	; 0x24
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 f899 	bl	8002e94 <xTaskRemoveFromEventList>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d013      	beq.n	8001d90 <xQueueGenericSend+0x160>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8001d68:	4b4c      	ldr	r3, [pc, #304]	; (8001e9c <xQueueGenericSend+0x26c>)
 8001d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	e00a      	b.n	8001d90 <xQueueGenericSend+0x160>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8001d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <xQueueGenericSend+0x160>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8001d80:	4b46      	ldr	r3, [pc, #280]	; (8001e9c <xQueueGenericSend+0x26c>)
 8001d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	f3bf 8f4f 	dsb	sy
 8001d8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001d90:	f001 ff78 	bl	8003c84 <vPortExitCritical>
				return pdPASS;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e07d      	b.n	8001e94 <xQueueGenericSend+0x264>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d110      	bne.n	8001dc0 <xQueueGenericSend+0x190>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001d9e:	f001 ff71 	bl	8003c84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8001da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 fdb5 	bl	8005914 <SEGGER_SYSVIEW_ShrinkId>
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	460b      	mov	r3, r1
 8001db4:	4601      	mov	r1, r0
 8001db6:	205a      	movs	r0, #90	; 0x5a
 8001db8:	f003 f896 	bl	8004ee8 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e069      	b.n	8001e94 <xQueueGenericSend+0x264>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <xQueueGenericSend+0x1a4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f001 f8c8 	bl	8002f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001dd4:	f001 ff56 	bl	8003c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001dd8:	f000 fe0e 	bl	80029f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ddc:	f001 ff22 	bl	8003c24 <vPortEnterCritical>
 8001de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001de6:	b25b      	sxtb	r3, r3
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d103      	bne.n	8001df6 <xQueueGenericSend+0x1c6>
 8001dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e02:	d103      	bne.n	8001e0c <xQueueGenericSend+0x1dc>
 8001e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e0c:	f001 ff3a 	bl	8003c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e10:	1d3a      	adds	r2, r7, #4
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f001 f8b7 	bl	8002f8c <xTaskCheckForTimeOut>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d124      	bne.n	8001e6e <xQueueGenericSend+0x23e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e26:	f000 fb0f 	bl	8002448 <prvIsQueueFull>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d018      	beq.n	8001e62 <xQueueGenericSend+0x232>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e32:	3310      	adds	r3, #16
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 ffd9 	bl	8002df0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e40:	f000 fa8c 	bl	800235c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001e44:	f000 fde6 	bl	8002a14 <xTaskResumeAll>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f47f af4f 	bne.w	8001cee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <xQueueGenericSend+0x26c>)
 8001e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	f3bf 8f4f 	dsb	sy
 8001e5c:	f3bf 8f6f 	isb	sy
 8001e60:	e745      	b.n	8001cee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e64:	f000 fa7a 	bl	800235c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e68:	f000 fdd4 	bl	8002a14 <xTaskResumeAll>
 8001e6c:	e73f      	b.n	8001cee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e70:	f000 fa74 	bl	800235c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e74:	f000 fdce 	bl	8002a14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8001e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 fd4a 	bl	8005914 <SEGGER_SYSVIEW_ShrinkId>
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4601      	mov	r1, r0
 8001e8c:	205a      	movs	r0, #90	; 0x5a
 8001e8e:	f003 f82b 	bl	8004ee8 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8001e92:	2300      	movs	r3, #0
		}
	}
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3738      	adds	r7, #56	; 0x38
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	e000ed04 	.word	0xe000ed04

08001ea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08e      	sub	sp, #56	; 0x38
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10a      	bne.n	8001ece <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ebc:	f383 8811 	msr	BASEPRI, r3
 8001ec0:	f3bf 8f6f 	isb	sy
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001eca:	bf00      	nop
 8001ecc:	e7fe      	b.n	8001ecc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d103      	bne.n	8001edc <xQueueGenericSendFromISR+0x3c>
 8001ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <xQueueGenericSendFromISR+0x40>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <xQueueGenericSendFromISR+0x42>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10a      	bne.n	8001efc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eea:	f383 8811 	msr	BASEPRI, r3
 8001eee:	f3bf 8f6f 	isb	sy
 8001ef2:	f3bf 8f4f 	dsb	sy
 8001ef6:	623b      	str	r3, [r7, #32]
}
 8001ef8:	bf00      	nop
 8001efa:	e7fe      	b.n	8001efa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d103      	bne.n	8001f0a <xQueueGenericSendFromISR+0x6a>
 8001f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <xQueueGenericSendFromISR+0x6e>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <xQueueGenericSendFromISR+0x70>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10a      	bne.n	8001f2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f18:	f383 8811 	msr	BASEPRI, r3
 8001f1c:	f3bf 8f6f 	isb	sy
 8001f20:	f3bf 8f4f 	dsb	sy
 8001f24:	61fb      	str	r3, [r7, #28]
}
 8001f26:	bf00      	nop
 8001f28:	e7fe      	b.n	8001f28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f2a:	f001 ff65 	bl	8003df8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001f2e:	f3ef 8211 	mrs	r2, BASEPRI
 8001f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f36:	f383 8811 	msr	BASEPRI, r3
 8001f3a:	f3bf 8f6f 	isb	sy
 8001f3e:	f3bf 8f4f 	dsb	sy
 8001f42:	61ba      	str	r2, [r7, #24]
 8001f44:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001f46:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d302      	bcc.n	8001f5c <xQueueGenericSendFromISR+0xbc>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d148      	bne.n	8001fee <xQueueGenericSendFromISR+0x14e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8001f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fcd3 	bl	8005914 <SEGGER_SYSVIEW_ShrinkId>
 8001f6e:	4601      	mov	r1, r0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	461a      	mov	r2, r3
 8001f74:	2060      	movs	r0, #96	; 0x60
 8001f76:	f002 fee7 	bl	8004d48 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f80:	f000 f95c 	bl	800223c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001f84:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d124      	bne.n	8001fd8 <xQueueGenericSendFromISR+0x138>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00d      	beq.n	8001fb2 <xQueueGenericSendFromISR+0x112>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8001f96:	6839      	ldr	r1, [r7, #0]
 8001f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f9a:	f000 fad3 	bl	8002544 <prvNotifyQueueSetContainer>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d021      	beq.n	8001fe8 <xQueueGenericSendFromISR+0x148>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01e      	beq.n	8001fe8 <xQueueGenericSendFromISR+0x148>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e01a      	b.n	8001fe8 <xQueueGenericSendFromISR+0x148>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d016      	beq.n	8001fe8 <xQueueGenericSendFromISR+0x148>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbc:	3324      	adds	r3, #36	; 0x24
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 ff68 	bl	8002e94 <xTaskRemoveFromEventList>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00e      	beq.n	8001fe8 <xQueueGenericSendFromISR+0x148>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00b      	beq.n	8001fe8 <xQueueGenericSendFromISR+0x148>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e007      	b.n	8001fe8 <xQueueGenericSendFromISR+0x148>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001fd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fdc:	3301      	adds	r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	b25a      	sxtb	r2, r3
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001fec:	e00b      	b.n	8002006 <xQueueGenericSendFromISR+0x166>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 fc8f 	bl	8005914 <SEGGER_SYSVIEW_ShrinkId>
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2060      	movs	r0, #96	; 0x60
 8001ffe:	f002 fea3 	bl	8004d48 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002010:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002014:	4618      	mov	r0, r3
 8002016:	3738      	adds	r7, #56	; 0x38
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b08f      	sub	sp, #60	; 0x3c
 8002020:	af02      	add	r7, sp, #8
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002028:	2300      	movs	r3, #0
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10a      	bne.n	800204c <xQueueReceive+0x30>
	__asm volatile
 8002036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203a:	f383 8811 	msr	BASEPRI, r3
 800203e:	f3bf 8f6f 	isb	sy
 8002042:	f3bf 8f4f 	dsb	sy
 8002046:	623b      	str	r3, [r7, #32]
}
 8002048:	bf00      	nop
 800204a:	e7fe      	b.n	800204a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d103      	bne.n	800205a <xQueueReceive+0x3e>
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <xQueueReceive+0x42>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <xQueueReceive+0x44>
 800205e:	2300      	movs	r3, #0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10a      	bne.n	800207a <xQueueReceive+0x5e>
	__asm volatile
 8002064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	61fb      	str	r3, [r7, #28]
}
 8002076:	bf00      	nop
 8002078:	e7fe      	b.n	8002078 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800207a:	f001 f8b3 	bl	80031e4 <xTaskGetSchedulerState>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <xQueueReceive+0x6e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <xQueueReceive+0x72>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <xQueueReceive+0x74>
 800208e:	2300      	movs	r3, #0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10a      	bne.n	80020aa <xQueueReceive+0x8e>
	__asm volatile
 8002094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002098:	f383 8811 	msr	BASEPRI, r3
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	f3bf 8f4f 	dsb	sy
 80020a4:	61bb      	str	r3, [r7, #24]
}
 80020a6:	bf00      	nop
 80020a8:	e7fe      	b.n	80020a8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80020aa:	f001 fdbb 	bl	8003c24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d02f      	beq.n	800211a <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020be:	f000 f927 	bl	8002310 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 fc25 	bl	8005914 <SEGGER_SYSVIEW_ShrinkId>
 80020ca:	4604      	mov	r4, r0
 80020cc:	2000      	movs	r0, #0
 80020ce:	f003 fc21 	bl	8005914 <SEGGER_SYSVIEW_ShrinkId>
 80020d2:	4602      	mov	r2, r0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2101      	movs	r1, #1
 80020d8:	9100      	str	r1, [sp, #0]
 80020da:	4621      	mov	r1, r4
 80020dc:	205c      	movs	r0, #92	; 0x5c
 80020de:	f002 ff03 	bl	8004ee8 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	1e5a      	subs	r2, r3, #1
 80020e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00f      	beq.n	8002112 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f4:	3310      	adds	r3, #16
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fecc 	bl	8002e94 <xTaskRemoveFromEventList>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002102:	4b4d      	ldr	r3, [pc, #308]	; (8002238 <xQueueReceive+0x21c>)
 8002104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	f3bf 8f4f 	dsb	sy
 800210e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002112:	f001 fdb7 	bl	8003c84 <vPortExitCritical>
				return pdPASS;
 8002116:	2301      	movs	r3, #1
 8002118:	e08a      	b.n	8002230 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d113      	bne.n	8002148 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002120:	f001 fdb0 	bl	8003c84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002126:	4618      	mov	r0, r3
 8002128:	f003 fbf4 	bl	8005914 <SEGGER_SYSVIEW_ShrinkId>
 800212c:	4604      	mov	r4, r0
 800212e:	2000      	movs	r0, #0
 8002130:	f003 fbf0 	bl	8005914 <SEGGER_SYSVIEW_ShrinkId>
 8002134:	4602      	mov	r2, r0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2101      	movs	r1, #1
 800213a:	9100      	str	r1, [sp, #0]
 800213c:	4621      	mov	r1, r4
 800213e:	205c      	movs	r0, #92	; 0x5c
 8002140:	f002 fed2 	bl	8004ee8 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8002144:	2300      	movs	r3, #0
 8002146:	e073      	b.n	8002230 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	4618      	mov	r0, r3
 8002154:	f000 ff04 	bl	8002f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002158:	2301      	movs	r3, #1
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800215c:	f001 fd92 	bl	8003c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002160:	f000 fc4a 	bl	80029f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002164:	f001 fd5e 	bl	8003c24 <vPortEnterCritical>
 8002168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800216e:	b25b      	sxtb	r3, r3
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d103      	bne.n	800217e <xQueueReceive+0x162>
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002184:	b25b      	sxtb	r3, r3
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d103      	bne.n	8002194 <xQueueReceive+0x178>
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002194:	f001 fd76 	bl	8003c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002198:	1d3a      	adds	r2, r7, #4
 800219a:	f107 0310 	add.w	r3, r7, #16
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fef3 	bl	8002f8c <xTaskCheckForTimeOut>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d124      	bne.n	80021f6 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021ae:	f000 f935 	bl	800241c <prvIsQueueEmpty>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d018      	beq.n	80021ea <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	3324      	adds	r3, #36	; 0x24
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 fe15 	bl	8002df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021c8:	f000 f8c8 	bl	800235c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021cc:	f000 fc22 	bl	8002a14 <xTaskResumeAll>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f47f af69 	bne.w	80020aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <xQueueReceive+0x21c>)
 80021da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	e75f      	b.n	80020aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80021ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021ec:	f000 f8b6 	bl	800235c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021f0:	f000 fc10 	bl	8002a14 <xTaskResumeAll>
 80021f4:	e759      	b.n	80020aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80021f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021f8:	f000 f8b0 	bl	800235c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021fc:	f000 fc0a 	bl	8002a14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002202:	f000 f90b 	bl	800241c <prvIsQueueEmpty>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	f43f af4e 	beq.w	80020aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	4618      	mov	r0, r3
 8002212:	f003 fb7f 	bl	8005914 <SEGGER_SYSVIEW_ShrinkId>
 8002216:	4604      	mov	r4, r0
 8002218:	2000      	movs	r0, #0
 800221a:	f003 fb7b 	bl	8005914 <SEGGER_SYSVIEW_ShrinkId>
 800221e:	4602      	mov	r2, r0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2101      	movs	r1, #1
 8002224:	9100      	str	r1, [sp, #0]
 8002226:	4621      	mov	r1, r4
 8002228:	205c      	movs	r0, #92	; 0x5c
 800222a:	f002 fe5d 	bl	8004ee8 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800222e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002230:	4618      	mov	r0, r3
 8002232:	3734      	adds	r7, #52	; 0x34
 8002234:	46bd      	mov	sp, r7
 8002236:	bd90      	pop	{r4, r7, pc}
 8002238:	e000ed04 	.word	0xe000ed04

0800223c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10d      	bne.n	8002276 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d14d      	bne.n	80022fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 ffda 	bl	8003220 <xTaskPriorityDisinherit>
 800226c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	e043      	b.n	80022fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d119      	bne.n	80022b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6898      	ldr	r0, [r3, #8]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	461a      	mov	r2, r3
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	f003 fe44 	bl	8005f14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	441a      	add	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d32b      	bcc.n	80022fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	e026      	b.n	80022fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	68d8      	ldr	r0, [r3, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	461a      	mov	r2, r3
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	f003 fe2a 	bl	8005f14 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	425b      	negs	r3, r3
 80022ca:	441a      	add	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d207      	bcs.n	80022ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	425b      	negs	r3, r3
 80022e6:	441a      	add	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d105      	bne.n	80022fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002306:	697b      	ldr	r3, [r7, #20]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d018      	beq.n	8002354 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	441a      	add	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	d303      	bcc.n	8002344 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68d9      	ldr	r1, [r3, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	461a      	mov	r2, r3
 800234e:	6838      	ldr	r0, [r7, #0]
 8002350:	f003 fde0 	bl	8005f14 <memcpy>
	}
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002364:	f001 fc5e 	bl	8003c24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800236e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002370:	e01f      	b.n	80023b2 <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 800237a:	2100      	movs	r1, #0
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f8e1 	bl	8002544 <prvNotifyQueueSetContainer>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d010      	beq.n	80023aa <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8002388:	f000 fe62 	bl	8003050 <vTaskMissedYield>
 800238c:	e00d      	b.n	80023aa <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	2b00      	cmp	r3, #0
 8002394:	d012      	beq.n	80023bc <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3324      	adds	r3, #36	; 0x24
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fd7a 	bl	8002e94 <xTaskRemoveFromEventList>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 80023a6:	f000 fe53 	bl	8003050 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	dcdb      	bgt.n	8002372 <prvUnlockQueue+0x16>
 80023ba:	e000      	b.n	80023be <prvUnlockQueue+0x62>
						break;
 80023bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	22ff      	movs	r2, #255	; 0xff
 80023c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80023c6:	f001 fc5d 	bl	8003c84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80023ca:	f001 fc2b 	bl	8003c24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023d6:	e011      	b.n	80023fc <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d012      	beq.n	8002406 <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3310      	adds	r3, #16
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fd55 	bl	8002e94 <xTaskRemoveFromEventList>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 80023f0:	f000 fe2e 	bl	8003050 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80023f4:	7bbb      	ldrb	r3, [r7, #14]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002400:	2b00      	cmp	r3, #0
 8002402:	dce9      	bgt.n	80023d8 <prvUnlockQueue+0x7c>
 8002404:	e000      	b.n	8002408 <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 8002406:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002410:	f001 fc38 	bl	8003c84 <vPortExitCritical>
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002424:	f001 fbfe 	bl	8003c24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002430:	2301      	movs	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	e001      	b.n	800243a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800243a:	f001 fc23 	bl	8003c84 <vPortExitCritical>

	return xReturn;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002450:	f001 fbe8 	bl	8003c24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	429a      	cmp	r2, r3
 800245e:	d102      	bne.n	8002466 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002460:	2301      	movs	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	e001      	b.n	800246a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800246a:	f001 fc0b 	bl	8003c84 <vPortExitCritical>

	return xReturn;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	e01e      	b.n	80024c6 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002488:	4a13      	ldr	r2, [pc, #76]	; (80024d8 <vQueueAddToRegistry+0x60>)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d115      	bne.n	80024c0 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002494:	4910      	ldr	r1, [pc, #64]	; (80024d8 <vQueueAddToRegistry+0x60>)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800249e:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <vQueueAddToRegistry+0x60>)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 fa31 	bl	8005914 <SEGGER_SYSVIEW_ShrinkId>
 80024b2:	4601      	mov	r1, r0
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	2071      	movs	r0, #113	; 0x71
 80024ba:	f002 fc45 	bl	8004d48 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80024be:	e006      	b.n	80024ce <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3301      	adds	r3, #1
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b07      	cmp	r3, #7
 80024ca:	d9dd      	bls.n	8002488 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200000c8 	.word	0x200000c8

080024dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80024ec:	f001 fb9a 	bl	8003c24 <vPortEnterCritical>
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d103      	bne.n	8002506 <vQueueWaitForMessageRestricted+0x2a>
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800250c:	b25b      	sxtb	r3, r3
 800250e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002512:	d103      	bne.n	800251c <vQueueWaitForMessageRestricted+0x40>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800251c:	f001 fbb2 	bl	8003c84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	2b00      	cmp	r3, #0
 8002526:	d106      	bne.n	8002536 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3324      	adds	r3, #36	; 0x24
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fc81 	bl	8002e38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff10 	bl	800235c <prvUnlockQueue>
	}
 800253c:	bf00      	nop
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af02      	add	r7, sp, #8
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002552:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <prvNotifyQueueSetContainer+0x30>
	__asm volatile
 800255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	613b      	str	r3, [r7, #16]
}
 8002570:	bf00      	nop
 8002572:	e7fe      	b.n	8002572 <prvNotifyQueueSetContainer+0x2e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	429a      	cmp	r2, r3
 800257e:	d30a      	bcc.n	8002596 <prvNotifyQueueSetContainer+0x52>
	__asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	60fb      	str	r3, [r7, #12]
}
 8002592:	bf00      	nop
 8002594:	e7fe      	b.n	8002594 <prvNotifyQueueSetContainer+0x50>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	429a      	cmp	r2, r3
 80025a0:	d231      	bcs.n	8002606 <prvNotifyQueueSetContainer+0xc2>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025a8:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 f9b1 	bl	8005914 <SEGGER_SYSVIEW_ShrinkId>
 80025b2:	4601      	mov	r1, r0
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2300      	movs	r3, #0
 80025ba:	2200      	movs	r2, #0
 80025bc:	205a      	movs	r0, #90	; 0x5a
 80025be:	f002 fc93 	bl	8004ee8 <SEGGER_SYSVIEW_RecordU32x4>

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	4619      	mov	r1, r3
 80025c8:	69b8      	ldr	r0, [r7, #24]
 80025ca:	f7ff fe37 	bl	800223c <prvCopyDataToQueue>
 80025ce:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 80025d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d10e      	bne.n	80025f8 <prvNotifyQueueSetContainer+0xb4>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d011      	beq.n	8002606 <prvNotifyQueueSetContainer+0xc2>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	3324      	adds	r3, #36	; 0x24
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fc54 	bl	8002e94 <xTaskRemoveFromEventList>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <prvNotifyQueueSetContainer+0xc2>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80025f2:	2301      	movs	r3, #1
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	e006      	b.n	8002606 <prvNotifyQueueSetContainer+0xc2>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80025f8:	7dfb      	ldrb	r3, [r7, #23]
 80025fa:	3301      	adds	r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	b25a      	sxtb	r2, r3
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002606:	69fb      	ldr	r3, [r7, #28]
	}
 8002608:	4618      	mov	r0, r3
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	; 0x30
 8002614:	af04      	add	r7, sp, #16
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4618      	mov	r0, r3
 8002626:	f001 fc27 	bl	8003e78 <pvPortMalloc>
 800262a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00e      	beq.n	8002650 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002632:	2058      	movs	r0, #88	; 0x58
 8002634:	f001 fc20 	bl	8003e78 <pvPortMalloc>
 8002638:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
 8002646:	e005      	b.n	8002654 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002648:	6978      	ldr	r0, [r7, #20]
 800264a:	f001 fcd9 	bl	8004000 <vPortFree>
 800264e:	e001      	b.n	8002654 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d013      	beq.n	8002682 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800265a:	88fa      	ldrh	r2, [r7, #6]
 800265c:	2300      	movs	r3, #0
 800265e:	9303      	str	r3, [sp, #12]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	9302      	str	r3, [sp, #8]
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f80e 	bl	8002692 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002676:	69f8      	ldr	r0, [r7, #28]
 8002678:	f000 f892 	bl	80027a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800267c:	2301      	movs	r3, #1
 800267e:	61bb      	str	r3, [r7, #24]
 8002680:	e002      	b.n	8002688 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002688:	69bb      	ldr	r3, [r7, #24]
	}
 800268a:	4618      	mov	r0, r3
 800268c:	3720      	adds	r7, #32
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b088      	sub	sp, #32
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	461a      	mov	r2, r3
 80026aa:	21a5      	movs	r1, #165	; 0xa5
 80026ac:	f003 fc05 	bl	8005eba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026ba:	3b01      	subs	r3, #1
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f023 0307 	bic.w	r3, r3, #7
 80026c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <prvInitialiseNewTask+0x58>
	__asm volatile
 80026d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d8:	f383 8811 	msr	BASEPRI, r3
 80026dc:	f3bf 8f6f 	isb	sy
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	617b      	str	r3, [r7, #20]
}
 80026e6:	bf00      	nop
 80026e8:	e7fe      	b.n	80026e8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	e012      	b.n	8002716 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	4413      	add	r3, r2
 80026f6:	7819      	ldrb	r1, [r3, #0]
 80026f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	4413      	add	r3, r2
 80026fe:	3334      	adds	r3, #52	; 0x34
 8002700:	460a      	mov	r2, r1
 8002702:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4413      	add	r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	3301      	adds	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	2b09      	cmp	r3, #9
 800271a:	d9e9      	bls.n	80026f0 <prvInitialiseNewTask+0x5e>
 800271c:	e000      	b.n	8002720 <prvInitialiseNewTask+0x8e>
		{
			break;
 800271e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	2b04      	cmp	r3, #4
 800272c:	d901      	bls.n	8002732 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800272e:	2304      	movs	r3, #4
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002736:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800273c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	2200      	movs	r2, #0
 8002742:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	3304      	adds	r3, #4
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff f90f 	bl	800196c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	3318      	adds	r3, #24
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff f90a 	bl	800196c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800275c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002760:	f1c3 0205 	rsb	r2, r3, #5
 8002764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002766:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	2200      	movs	r2, #0
 8002772:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	68f9      	ldr	r1, [r7, #12]
 8002780:	69b8      	ldr	r0, [r7, #24]
 8002782:	f001 f921 	bl	80039c8 <pxPortInitialiseStack>
 8002786:	4602      	mov	r2, r0
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002796:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002798:	bf00      	nop
 800279a:	3720      	adds	r7, #32
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80027a0:	b5b0      	push	{r4, r5, r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80027a8:	f001 fa3c 	bl	8003c24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80027ac:	4b3b      	ldr	r3, [pc, #236]	; (800289c <prvAddNewTaskToReadyList+0xfc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	4a3a      	ldr	r2, [pc, #232]	; (800289c <prvAddNewTaskToReadyList+0xfc>)
 80027b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80027b6:	4b3a      	ldr	r3, [pc, #232]	; (80028a0 <prvAddNewTaskToReadyList+0x100>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80027be:	4a38      	ldr	r2, [pc, #224]	; (80028a0 <prvAddNewTaskToReadyList+0x100>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027c4:	4b35      	ldr	r3, [pc, #212]	; (800289c <prvAddNewTaskToReadyList+0xfc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d110      	bne.n	80027ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80027cc:	f000 fc66 	bl	800309c <prvInitialiseTaskLists>
 80027d0:	e00d      	b.n	80027ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80027d2:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <prvAddNewTaskToReadyList+0x104>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027da:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <prvAddNewTaskToReadyList+0x100>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d802      	bhi.n	80027ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80027e8:	4a2d      	ldr	r2, [pc, #180]	; (80028a0 <prvAddNewTaskToReadyList+0x100>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80027ee:	4b2e      	ldr	r3, [pc, #184]	; (80028a8 <prvAddNewTaskToReadyList+0x108>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	4a2c      	ldr	r2, [pc, #176]	; (80028a8 <prvAddNewTaskToReadyList+0x108>)
 80027f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80027f8:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <prvAddNewTaskToReadyList+0x108>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d016      	beq.n	8002834 <prvAddNewTaskToReadyList+0x94>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4618      	mov	r0, r3
 800280a:	f002 ff5d 	bl	80056c8 <SEGGER_SYSVIEW_OnTaskCreate>
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	461d      	mov	r5, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461c      	mov	r4, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	1ae3      	subs	r3, r4, r3
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	462b      	mov	r3, r5
 8002830:	f003 faaa 	bl	8005d88 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4618      	mov	r0, r3
 8002838:	f002 ffca 	bl	80057d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	2201      	movs	r2, #1
 8002842:	409a      	lsls	r2, r3
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <prvAddNewTaskToReadyList+0x10c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4313      	orrs	r3, r2
 800284a:	4a18      	ldr	r2, [pc, #96]	; (80028ac <prvAddNewTaskToReadyList+0x10c>)
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <prvAddNewTaskToReadyList+0x110>)
 800285c:	441a      	add	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3304      	adds	r3, #4
 8002862:	4619      	mov	r1, r3
 8002864:	4610      	mov	r0, r2
 8002866:	f7ff f88e 	bl	8001986 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800286a:	f001 fa0b 	bl	8003c84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <prvAddNewTaskToReadyList+0x104>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00e      	beq.n	8002894 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <prvAddNewTaskToReadyList+0x100>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	429a      	cmp	r2, r3
 8002882:	d207      	bcs.n	8002894 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <prvAddNewTaskToReadyList+0x114>)
 8002886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bdb0      	pop	{r4, r5, r7, pc}
 800289c:	200001e0 	.word	0x200001e0
 80028a0:	20000108 	.word	0x20000108
 80028a4:	200001ec 	.word	0x200001ec
 80028a8:	200001fc 	.word	0x200001fc
 80028ac:	200001e8 	.word	0x200001e8
 80028b0:	2000010c 	.word	0x2000010c
 80028b4:	e000ed04 	.word	0xe000ed04

080028b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01b      	beq.n	8002902 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <vTaskDelay+0x68>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <vTaskDelay+0x30>
	__asm volatile
 80028d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	60bb      	str	r3, [r7, #8]
}
 80028e4:	bf00      	nop
 80028e6:	e7fe      	b.n	80028e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80028e8:	f000 f886 	bl	80029f8 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	2023      	movs	r0, #35	; 0x23
 80028f0:	f002 f9ee 	bl	8004cd0 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80028f4:	2100      	movs	r1, #0
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fd1c 	bl	8003334 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80028fc:	f000 f88a 	bl	8002a14 <xTaskResumeAll>
 8002900:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <vTaskDelay+0x6c>)
 800290a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000208 	.word	0x20000208
 8002924:	e000ed04 	.word	0xe000ed04

08002928 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8002930:	f001 f978 	bl	8003c24 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <uxTaskPriorityGet+0x18>
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <uxTaskPriorityGet+0x30>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	e000      	b.n	8002942 <uxTaskPriorityGet+0x1a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 800294a:	f001 f99b 	bl	8003c84 <vPortExitCritical>

		return uxReturn;
 800294e:	68bb      	ldr	r3, [r7, #8]
	}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000108 	.word	0x20000108

0800295c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002962:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <vTaskStartScheduler+0x84>)
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	2300      	movs	r3, #0
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2300      	movs	r3, #0
 800296c:	2282      	movs	r2, #130	; 0x82
 800296e:	491d      	ldr	r1, [pc, #116]	; (80029e4 <vTaskStartScheduler+0x88>)
 8002970:	481d      	ldr	r0, [pc, #116]	; (80029e8 <vTaskStartScheduler+0x8c>)
 8002972:	f7ff fe4d 	bl	8002610 <xTaskCreate>
 8002976:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d102      	bne.n	8002984 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800297e:	f000 fd51 	bl	8003424 <xTimerCreateTimerTask>
 8002982:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d116      	bne.n	80029b8 <vTaskStartScheduler+0x5c>
	__asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	60bb      	str	r3, [r7, #8]
}
 800299c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800299e:	4b13      	ldr	r3, [pc, #76]	; (80029ec <vTaskStartScheduler+0x90>)
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <vTaskStartScheduler+0x94>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <vTaskStartScheduler+0x98>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80029b2:	f001 f895 	bl	8003ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80029b6:	e00e      	b.n	80029d6 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029be:	d10a      	bne.n	80029d6 <vTaskStartScheduler+0x7a>
	__asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	607b      	str	r3, [r7, #4]
}
 80029d2:	bf00      	nop
 80029d4:	e7fe      	b.n	80029d4 <vTaskStartScheduler+0x78>
}
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000204 	.word	0x20000204
 80029e4:	08005fc4 	.word	0x08005fc4
 80029e8:	08003069 	.word	0x08003069
 80029ec:	20000200 	.word	0x20000200
 80029f0:	200001ec 	.word	0x200001ec
 80029f4:	200001e4 	.word	0x200001e4

080029f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <vTaskSuspendAll+0x18>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	4a03      	ldr	r2, [pc, #12]	; (8002a10 <vTaskSuspendAll+0x18>)
 8002a04:	6013      	str	r3, [r2, #0]
}
 8002a06:	bf00      	nop
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	20000208 	.word	0x20000208

08002a14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a22:	4b43      	ldr	r3, [pc, #268]	; (8002b30 <xTaskResumeAll+0x11c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10a      	bne.n	8002a40 <xTaskResumeAll+0x2c>
	__asm volatile
 8002a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	603b      	str	r3, [r7, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	e7fe      	b.n	8002a3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a40:	f001 f8f0 	bl	8003c24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a44:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <xTaskResumeAll+0x11c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	4a39      	ldr	r2, [pc, #228]	; (8002b30 <xTaskResumeAll+0x11c>)
 8002a4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a4e:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <xTaskResumeAll+0x11c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d165      	bne.n	8002b22 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a56:	4b37      	ldr	r3, [pc, #220]	; (8002b34 <xTaskResumeAll+0x120>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d061      	beq.n	8002b22 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a5e:	e032      	b.n	8002ac6 <xTaskResumeAll+0xb2>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002a60:	4b35      	ldr	r3, [pc, #212]	; (8002b38 <xTaskResumeAll+0x124>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3318      	adds	r3, #24
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe ffe7 	bl	8001a40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	3304      	adds	r3, #4
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe ffe2 	bl	8001a40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 fea6 	bl	80057d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	2201      	movs	r2, #1
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <xTaskResumeAll+0x128>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	4a2a      	ldr	r2, [pc, #168]	; (8002b3c <xTaskResumeAll+0x128>)
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4a27      	ldr	r2, [pc, #156]	; (8002b40 <xTaskResumeAll+0x12c>)
 8002aa4:	441a      	add	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4610      	mov	r0, r2
 8002aae:	f7fe ff6a 	bl	8001986 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab6:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <xTaskResumeAll+0x130>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d302      	bcc.n	8002ac6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <xTaskResumeAll+0x134>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <xTaskResumeAll+0x124>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1c8      	bne.n	8002a60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ad4:	f000 fb60 	bl	8003198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ad8:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <xTaskResumeAll+0x138>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d010      	beq.n	8002b06 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ae4:	f000 f858 	bl	8002b98 <xTaskIncrementTick>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8002aee:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <xTaskResumeAll+0x134>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f1      	bne.n	8002ae4 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <xTaskResumeAll+0x138>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <xTaskResumeAll+0x134>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <xTaskResumeAll+0x13c>)
 8002b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b22:	f001 f8af 	bl	8003c84 <vPortExitCritical>

	return xAlreadyYielded;
 8002b26:	68bb      	ldr	r3, [r7, #8]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000208 	.word	0x20000208
 8002b34:	200001e0 	.word	0x200001e0
 8002b38:	200001a0 	.word	0x200001a0
 8002b3c:	200001e8 	.word	0x200001e8
 8002b40:	2000010c 	.word	0x2000010c
 8002b44:	20000108 	.word	0x20000108
 8002b48:	200001f4 	.word	0x200001f4
 8002b4c:	200001f0 	.word	0x200001f0
 8002b50:	e000ed04 	.word	0xe000ed04

08002b54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <xTaskGetTickCount+0x1c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002b60:	687b      	ldr	r3, [r7, #4]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	200001e4 	.word	0x200001e4

08002b74 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b7a:	f001 f93d 	bl	8003df8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002b82:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <xTaskGetTickCountFromISR+0x20>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b88:	683b      	ldr	r3, [r7, #0]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200001e4 	.word	0x200001e4

08002b98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ba2:	4b53      	ldr	r3, [pc, #332]	; (8002cf0 <xTaskIncrementTick+0x158>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 8091 	bne.w	8002cce <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002bac:	4b51      	ldr	r3, [pc, #324]	; (8002cf4 <xTaskIncrementTick+0x15c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002bb4:	4a4f      	ldr	r2, [pc, #316]	; (8002cf4 <xTaskIncrementTick+0x15c>)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d120      	bne.n	8002c02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002bc0:	4b4d      	ldr	r3, [pc, #308]	; (8002cf8 <xTaskIncrementTick+0x160>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <xTaskIncrementTick+0x48>
	__asm volatile
 8002bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	603b      	str	r3, [r7, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	e7fe      	b.n	8002bde <xTaskIncrementTick+0x46>
 8002be0:	4b45      	ldr	r3, [pc, #276]	; (8002cf8 <xTaskIncrementTick+0x160>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b45      	ldr	r3, [pc, #276]	; (8002cfc <xTaskIncrementTick+0x164>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a43      	ldr	r2, [pc, #268]	; (8002cf8 <xTaskIncrementTick+0x160>)
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4a43      	ldr	r2, [pc, #268]	; (8002cfc <xTaskIncrementTick+0x164>)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b42      	ldr	r3, [pc, #264]	; (8002d00 <xTaskIncrementTick+0x168>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	4a41      	ldr	r2, [pc, #260]	; (8002d00 <xTaskIncrementTick+0x168>)
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	f000 facb 	bl	8003198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c02:	4b40      	ldr	r3, [pc, #256]	; (8002d04 <xTaskIncrementTick+0x16c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d351      	bcc.n	8002cb0 <xTaskIncrementTick+0x118>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c0c:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <xTaskIncrementTick+0x160>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <xTaskIncrementTick+0x82>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <xTaskIncrementTick+0x84>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d004      	beq.n	8002c2a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c20:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <xTaskIncrementTick+0x16c>)
 8002c22:	f04f 32ff 	mov.w	r2, #4294967295
 8002c26:	601a      	str	r2, [r3, #0]
					break;
 8002c28:	e042      	b.n	8002cb0 <xTaskIncrementTick+0x118>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c2a:	4b33      	ldr	r3, [pc, #204]	; (8002cf8 <xTaskIncrementTick+0x160>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d203      	bcs.n	8002c4a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c42:	4a30      	ldr	r2, [pc, #192]	; (8002d04 <xTaskIncrementTick+0x16c>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6013      	str	r3, [r2, #0]
						break;
 8002c48:	e032      	b.n	8002cb0 <xTaskIncrementTick+0x118>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe fef6 	bl	8001a40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d004      	beq.n	8002c66 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	3318      	adds	r3, #24
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe feed 	bl	8001a40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f002 fdb1 	bl	80057d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	2201      	movs	r2, #1
 8002c74:	409a      	lsls	r2, r3
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <xTaskIncrementTick+0x170>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <xTaskIncrementTick+0x170>)
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <xTaskIncrementTick+0x174>)
 8002c8e:	441a      	add	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	3304      	adds	r3, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4610      	mov	r0, r2
 8002c98:	f7fe fe75 	bl	8001986 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <xTaskIncrementTick+0x178>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d3b0      	bcc.n	8002c0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002caa:	2301      	movs	r3, #1
 8002cac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cae:	e7ad      	b.n	8002c0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cb0:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <xTaskIncrementTick+0x178>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb6:	4915      	ldr	r1, [pc, #84]	; (8002d0c <xTaskIncrementTick+0x174>)
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d907      	bls.n	8002cd8 <xTaskIncrementTick+0x140>
			{
				xSwitchRequired = pdTRUE;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	e004      	b.n	8002cd8 <xTaskIncrementTick+0x140>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <xTaskIncrementTick+0x17c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <xTaskIncrementTick+0x17c>)
 8002cd6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <xTaskIncrementTick+0x180>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <xTaskIncrementTick+0x14c>
		{
			xSwitchRequired = pdTRUE;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002ce4:	697b      	ldr	r3, [r7, #20]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000208 	.word	0x20000208
 8002cf4:	200001e4 	.word	0x200001e4
 8002cf8:	20000198 	.word	0x20000198
 8002cfc:	2000019c 	.word	0x2000019c
 8002d00:	200001f8 	.word	0x200001f8
 8002d04:	20000200 	.word	0x20000200
 8002d08:	200001e8 	.word	0x200001e8
 8002d0c:	2000010c 	.word	0x2000010c
 8002d10:	20000108 	.word	0x20000108
 8002d14:	200001f0 	.word	0x200001f0
 8002d18:	200001f4 	.word	0x200001f4

08002d1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d22:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <vTaskSwitchContext+0xbc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d2a:	4b2c      	ldr	r3, [pc, #176]	; (8002ddc <vTaskSwitchContext+0xc0>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d30:	e04d      	b.n	8002dce <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 8002d32:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <vTaskSwitchContext+0xc0>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002d38:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <vTaskSwitchContext+0xc4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002d46:	7afb      	ldrb	r3, [r7, #11]
 8002d48:	f1c3 031f 	rsb	r3, r3, #31
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	4925      	ldr	r1, [pc, #148]	; (8002de4 <vTaskSwitchContext+0xc8>)
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	607b      	str	r3, [r7, #4]
}
 8002d74:	bf00      	nop
 8002d76:	e7fe      	b.n	8002d76 <vTaskSwitchContext+0x5a>
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <vTaskSwitchContext+0xc8>)
 8002d84:	4413      	add	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	3308      	adds	r3, #8
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d104      	bne.n	8002da8 <vTaskSwitchContext+0x8c>
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <vTaskSwitchContext+0xcc>)
 8002db0:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <vTaskSwitchContext+0xcc>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <vTaskSwitchContext+0xd0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d102      	bne.n	8002dc4 <vTaskSwitchContext+0xa8>
 8002dbe:	f002 fc67 	bl	8005690 <SEGGER_SYSVIEW_OnIdle>
}
 8002dc2:	e004      	b.n	8002dce <vTaskSwitchContext+0xb2>
		traceTASK_SWITCHED_IN();
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <vTaskSwitchContext+0xcc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f002 fcbf 	bl	800574c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002dce:	bf00      	nop
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000208 	.word	0x20000208
 8002ddc:	200001f4 	.word	0x200001f4
 8002de0:	200001e8 	.word	0x200001e8
 8002de4:	2000010c 	.word	0x2000010c
 8002de8:	20000108 	.word	0x20000108
 8002dec:	20000204 	.word	0x20000204

08002df0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	60fb      	str	r3, [r7, #12]
}
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <vTaskPlaceOnEventList+0x44>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3318      	adds	r3, #24
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fe fdd5 	bl	80019ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e24:	2101      	movs	r1, #1
 8002e26:	6838      	ldr	r0, [r7, #0]
 8002e28:	f000 fa84 	bl	8003334 <prvAddCurrentTaskToDelayedList>
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000108 	.word	0x20000108

08002e38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10a      	bne.n	8002e60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	617b      	str	r3, [r7, #20]
}
 8002e5c:	bf00      	nop
 8002e5e:	e7fe      	b.n	8002e5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <vTaskPlaceOnEventListRestricted+0x58>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3318      	adds	r3, #24
 8002e66:	4619      	mov	r1, r3
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7fe fd8c 	bl	8001986 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002e74:	f04f 33ff 	mov.w	r3, #4294967295
 8002e78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002e7a:	2024      	movs	r0, #36	; 0x24
 8002e7c:	f001 ff0a 	bl	8004c94 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	68b8      	ldr	r0, [r7, #8]
 8002e84:	f000 fa56 	bl	8003334 <prvAddCurrentTaskToDelayedList>
	}
 8002e88:	bf00      	nop
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000108 	.word	0x20000108

08002e94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	60fb      	str	r3, [r7, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	e7fe      	b.n	8002ebe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	3318      	adds	r3, #24
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe fdbb 	bl	8001a40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eca:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <xTaskRemoveFromEventList+0xb4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d120      	bne.n	8002f14 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fdb2 	bl	8001a40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f002 fc76 	bl	80057d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	2201      	movs	r2, #1
 8002eea:	409a      	lsls	r2, r3
 8002eec:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <xTaskRemoveFromEventList+0xb8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	4a16      	ldr	r2, [pc, #88]	; (8002f4c <xTaskRemoveFromEventList+0xb8>)
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <xTaskRemoveFromEventList+0xbc>)
 8002f04:	441a      	add	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	f7fe fd3a 	bl	8001986 <vListInsertEnd>
 8002f12:	e005      	b.n	8002f20 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	3318      	adds	r3, #24
 8002f18:	4619      	mov	r1, r3
 8002f1a:	480e      	ldr	r0, [pc, #56]	; (8002f54 <xTaskRemoveFromEventList+0xc0>)
 8002f1c:	f7fe fd33 	bl	8001986 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <xTaskRemoveFromEventList+0xc4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d905      	bls.n	8002f3a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <xTaskRemoveFromEventList+0xc8>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e001      	b.n	8002f3e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002f3e:	697b      	ldr	r3, [r7, #20]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000208 	.word	0x20000208
 8002f4c:	200001e8 	.word	0x200001e8
 8002f50:	2000010c 	.word	0x2000010c
 8002f54:	200001a0 	.word	0x200001a0
 8002f58:	20000108 	.word	0x20000108
 8002f5c:	200001f4 	.word	0x200001f4

08002f60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <vTaskInternalSetTimeOutState+0x24>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <vTaskInternalSetTimeOutState+0x28>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	605a      	str	r2, [r3, #4]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	200001f8 	.word	0x200001f8
 8002f88:	200001e4 	.word	0x200001e4

08002f8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	613b      	str	r3, [r7, #16]
}
 8002fae:	bf00      	nop
 8002fb0:	e7fe      	b.n	8002fb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	60fb      	str	r3, [r7, #12]
}
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002fce:	f000 fe29 	bl	8003c24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <xTaskCheckForTimeOut+0xbc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d102      	bne.n	8002ff2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	e023      	b.n	800303a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <xTaskCheckForTimeOut+0xc0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d007      	beq.n	800300e <xTaskCheckForTimeOut+0x82>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	429a      	cmp	r2, r3
 8003006:	d302      	bcc.n	800300e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003008:	2301      	movs	r3, #1
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	e015      	b.n	800303a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	429a      	cmp	r2, r3
 8003016:	d20b      	bcs.n	8003030 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	1ad2      	subs	r2, r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff9b 	bl	8002f60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	e004      	b.n	800303a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003036:	2301      	movs	r3, #1
 8003038:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800303a:	f000 fe23 	bl	8003c84 <vPortExitCritical>

	return xReturn;
 800303e:	69fb      	ldr	r3, [r7, #28]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3720      	adds	r7, #32
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	200001e4 	.word	0x200001e4
 800304c:	200001f8 	.word	0x200001f8

08003050 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <vTaskMissedYield+0x14>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]
}
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	200001f4 	.word	0x200001f4

08003068 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003070:	f000 f854 	bl	800311c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003074:	4b07      	ldr	r3, [pc, #28]	; (8003094 <prvIdleTask+0x2c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d907      	bls.n	800308c <prvIdleTask+0x24>
			{
				taskYIELD();
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <prvIdleTask+0x30>)
 800307e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800308c:	f7fd fb08 	bl	80006a0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003090:	e7ee      	b.n	8003070 <prvIdleTask+0x8>
 8003092:	bf00      	nop
 8003094:	2000010c 	.word	0x2000010c
 8003098:	e000ed04 	.word	0xe000ed04

0800309c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030a2:	2300      	movs	r3, #0
 80030a4:	607b      	str	r3, [r7, #4]
 80030a6:	e00c      	b.n	80030c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4a12      	ldr	r2, [pc, #72]	; (80030fc <prvInitialiseTaskLists+0x60>)
 80030b4:	4413      	add	r3, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe fc38 	bl	800192c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3301      	adds	r3, #1
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d9ef      	bls.n	80030a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80030c8:	480d      	ldr	r0, [pc, #52]	; (8003100 <prvInitialiseTaskLists+0x64>)
 80030ca:	f7fe fc2f 	bl	800192c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80030ce:	480d      	ldr	r0, [pc, #52]	; (8003104 <prvInitialiseTaskLists+0x68>)
 80030d0:	f7fe fc2c 	bl	800192c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80030d4:	480c      	ldr	r0, [pc, #48]	; (8003108 <prvInitialiseTaskLists+0x6c>)
 80030d6:	f7fe fc29 	bl	800192c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80030da:	480c      	ldr	r0, [pc, #48]	; (800310c <prvInitialiseTaskLists+0x70>)
 80030dc:	f7fe fc26 	bl	800192c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80030e0:	480b      	ldr	r0, [pc, #44]	; (8003110 <prvInitialiseTaskLists+0x74>)
 80030e2:	f7fe fc23 	bl	800192c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <prvInitialiseTaskLists+0x78>)
 80030e8:	4a05      	ldr	r2, [pc, #20]	; (8003100 <prvInitialiseTaskLists+0x64>)
 80030ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <prvInitialiseTaskLists+0x7c>)
 80030ee:	4a05      	ldr	r2, [pc, #20]	; (8003104 <prvInitialiseTaskLists+0x68>)
 80030f0:	601a      	str	r2, [r3, #0]
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	2000010c 	.word	0x2000010c
 8003100:	20000170 	.word	0x20000170
 8003104:	20000184 	.word	0x20000184
 8003108:	200001a0 	.word	0x200001a0
 800310c:	200001b4 	.word	0x200001b4
 8003110:	200001cc 	.word	0x200001cc
 8003114:	20000198 	.word	0x20000198
 8003118:	2000019c 	.word	0x2000019c

0800311c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003122:	e019      	b.n	8003158 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003124:	f000 fd7e 	bl	8003c24 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <prvCheckTasksWaitingTermination+0x50>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe fc83 	bl	8001a40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <prvCheckTasksWaitingTermination+0x54>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3b01      	subs	r3, #1
 8003140:	4a0b      	ldr	r2, [pc, #44]	; (8003170 <prvCheckTasksWaitingTermination+0x54>)
 8003142:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <prvCheckTasksWaitingTermination+0x58>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3b01      	subs	r3, #1
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <prvCheckTasksWaitingTermination+0x58>)
 800314c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800314e:	f000 fd99 	bl	8003c84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f810 	bl	8003178 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <prvCheckTasksWaitingTermination+0x58>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e1      	bne.n	8003124 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	200001b4 	.word	0x200001b4
 8003170:	200001e0 	.word	0x200001e0
 8003174:	200001c8 	.word	0x200001c8

08003178 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	4618      	mov	r0, r3
 8003186:	f000 ff3b 	bl	8004000 <vPortFree>
			vPortFree( pxTCB );
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 ff38 	bl	8004000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <prvResetNextTaskUnblockTime+0x44>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <prvResetNextTaskUnblockTime+0x14>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <prvResetNextTaskUnblockTime+0x16>
 80031ac:	2300      	movs	r3, #0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d004      	beq.n	80031bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <prvResetNextTaskUnblockTime+0x48>)
 80031b4:	f04f 32ff 	mov.w	r2, #4294967295
 80031b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80031ba:	e008      	b.n	80031ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031bc:	4b07      	ldr	r3, [pc, #28]	; (80031dc <prvResetNextTaskUnblockTime+0x44>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4a05      	ldr	r2, [pc, #20]	; (80031e0 <prvResetNextTaskUnblockTime+0x48>)
 80031cc:	6013      	str	r3, [r2, #0]
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000198 	.word	0x20000198
 80031e0:	20000200 	.word	0x20000200

080031e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <xTaskGetSchedulerState+0x34>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80031f2:	2301      	movs	r3, #1
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	e008      	b.n	800320a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <xTaskGetSchedulerState+0x38>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003200:	2302      	movs	r3, #2
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	e001      	b.n	800320a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800320a:	687b      	ldr	r3, [r7, #4]
	}
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	200001ec 	.word	0x200001ec
 800321c:	20000208 	.word	0x20000208

08003220 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d073      	beq.n	800331e <xTaskPriorityDisinherit+0xfe>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003236:	4b3c      	ldr	r3, [pc, #240]	; (8003328 <xTaskPriorityDisinherit+0x108>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	429a      	cmp	r2, r3
 800323e:	d00a      	beq.n	8003256 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	60fb      	str	r3, [r7, #12]
}
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10a      	bne.n	8003274 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800325e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	60bb      	str	r3, [r7, #8]
}
 8003270:	bf00      	nop
 8003272:	e7fe      	b.n	8003272 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003278:	1e5a      	subs	r2, r3, #1
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003286:	429a      	cmp	r2, r3
 8003288:	d049      	beq.n	800331e <xTaskPriorityDisinherit+0xfe>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328e:	2b00      	cmp	r3, #0
 8003290:	d145      	bne.n	800331e <xTaskPriorityDisinherit+0xfe>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	3304      	adds	r3, #4
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fbd2 	bl	8001a40 <uxListRemove>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d115      	bne.n	80032ce <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a6:	4921      	ldr	r1, [pc, #132]	; (800332c <xTaskPriorityDisinherit+0x10c>)
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <xTaskPriorityDisinherit+0xae>
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	2201      	movs	r2, #1
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43da      	mvns	r2, r3
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <xTaskPriorityDisinherit+0x110>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4013      	ands	r3, r2
 80032ca:	4a19      	ldr	r2, [pc, #100]	; (8003330 <xTaskPriorityDisinherit+0x110>)
 80032cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4619      	mov	r1, r3
 80032d2:	204a      	movs	r0, #74	; 0x4a
 80032d4:	f001 fcfc 	bl	8004cd0 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	f1c3 0205 	rsb	r2, r3, #5
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	2201      	movs	r2, #1
 80032f2:	409a      	lsls	r2, r3
 80032f4:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <xTaskPriorityDisinherit+0x110>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	4a0d      	ldr	r2, [pc, #52]	; (8003330 <xTaskPriorityDisinherit+0x110>)
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4a08      	ldr	r2, [pc, #32]	; (800332c <xTaskPriorityDisinherit+0x10c>)
 800330c:	441a      	add	r2, r3
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	3304      	adds	r3, #4
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f7fe fb36 	bl	8001986 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800331a:	2301      	movs	r3, #1
 800331c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800331e:	697b      	ldr	r3, [r7, #20]
	}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20000108 	.word	0x20000108
 800332c:	2000010c 	.word	0x2000010c
 8003330:	200001e8 	.word	0x200001e8

08003334 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800333e:	4b32      	ldr	r3, [pc, #200]	; (8003408 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003344:	4b31      	ldr	r3, [pc, #196]	; (800340c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3304      	adds	r3, #4
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe fb78 	bl	8001a40 <uxListRemove>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10b      	bne.n	800336e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003356:	4b2d      	ldr	r3, [pc, #180]	; (800340c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	2201      	movs	r2, #1
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43da      	mvns	r2, r3
 8003364:	4b2a      	ldr	r3, [pc, #168]	; (8003410 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4013      	ands	r3, r2
 800336a:	4a29      	ldr	r2, [pc, #164]	; (8003410 <prvAddCurrentTaskToDelayedList+0xdc>)
 800336c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d110      	bne.n	8003398 <prvAddCurrentTaskToDelayedList+0x64>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00d      	beq.n	8003398 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800337c:	4b23      	ldr	r3, [pc, #140]	; (800340c <prvAddCurrentTaskToDelayedList+0xd8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	211b      	movs	r1, #27
 8003382:	4618      	mov	r0, r3
 8003384:	f002 fa66 	bl	8005854 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003388:	4b20      	ldr	r3, [pc, #128]	; (800340c <prvAddCurrentTaskToDelayedList+0xd8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3304      	adds	r3, #4
 800338e:	4619      	mov	r1, r3
 8003390:	4820      	ldr	r0, [pc, #128]	; (8003414 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003392:	f7fe faf8 	bl	8001986 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003396:	e032      	b.n	80033fe <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033a0:	4b1a      	ldr	r3, [pc, #104]	; (800340c <prvAddCurrentTaskToDelayedList+0xd8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d20f      	bcs.n	80033d0 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80033b0:	4b16      	ldr	r3, [pc, #88]	; (800340c <prvAddCurrentTaskToDelayedList+0xd8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2104      	movs	r1, #4
 80033b6:	4618      	mov	r0, r3
 80033b8:	f002 fa4c 	bl	8005854 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033bc:	4b16      	ldr	r3, [pc, #88]	; (8003418 <prvAddCurrentTaskToDelayedList+0xe4>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b12      	ldr	r3, [pc, #72]	; (800340c <prvAddCurrentTaskToDelayedList+0xd8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3304      	adds	r3, #4
 80033c6:	4619      	mov	r1, r3
 80033c8:	4610      	mov	r0, r2
 80033ca:	f7fe fb00 	bl	80019ce <vListInsert>
}
 80033ce:	e016      	b.n	80033fe <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 80033d0:	4b0e      	ldr	r3, [pc, #56]	; (800340c <prvAddCurrentTaskToDelayedList+0xd8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2104      	movs	r1, #4
 80033d6:	4618      	mov	r0, r3
 80033d8:	f002 fa3c 	bl	8005854 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <prvAddCurrentTaskToDelayedList+0xe8>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b0a      	ldr	r3, [pc, #40]	; (800340c <prvAddCurrentTaskToDelayedList+0xd8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3304      	adds	r3, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f7fe faf0 	bl	80019ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033ee:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <prvAddCurrentTaskToDelayedList+0xec>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d202      	bcs.n	80033fe <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80033f8:	4a09      	ldr	r2, [pc, #36]	; (8003420 <prvAddCurrentTaskToDelayedList+0xec>)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6013      	str	r3, [r2, #0]
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200001e4 	.word	0x200001e4
 800340c:	20000108 	.word	0x20000108
 8003410:	200001e8 	.word	0x200001e8
 8003414:	200001cc 	.word	0x200001cc
 8003418:	2000019c 	.word	0x2000019c
 800341c:	20000198 	.word	0x20000198
 8003420:	20000200 	.word	0x20000200

08003424 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800342a:	2300      	movs	r3, #0
 800342c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800342e:	f000 fa95 	bl	800395c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <xTimerCreateTimerTask+0x54>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800343a:	4b10      	ldr	r3, [pc, #64]	; (800347c <xTimerCreateTimerTask+0x58>)
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	2302      	movs	r3, #2
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	2300      	movs	r3, #0
 8003444:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003448:	490d      	ldr	r1, [pc, #52]	; (8003480 <xTimerCreateTimerTask+0x5c>)
 800344a:	480e      	ldr	r0, [pc, #56]	; (8003484 <xTimerCreateTimerTask+0x60>)
 800344c:	f7ff f8e0 	bl	8002610 <xTaskCreate>
 8003450:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10a      	bne.n	800346e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8003458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	603b      	str	r3, [r7, #0]
}
 800346a:	bf00      	nop
 800346c:	e7fe      	b.n	800346c <xTimerCreateTimerTask+0x48>
	return xReturn;
 800346e:	687b      	ldr	r3, [r7, #4]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	2000023c 	.word	0x2000023c
 800347c:	20000240 	.word	0x20000240
 8003480:	08005fcc 	.word	0x08005fcc
 8003484:	080035a5 	.word	0x080035a5

08003488 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	; 0x28
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	623b      	str	r3, [r7, #32]
}
 80034b2:	bf00      	nop
 80034b4:	e7fe      	b.n	80034b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80034b6:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <xTimerGenericCommand+0x98>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d02a      	beq.n	8003514 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	dc18      	bgt.n	8003502 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80034d0:	f7ff fe88 	bl	80031e4 <xTaskGetSchedulerState>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d109      	bne.n	80034ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034da:	4b11      	ldr	r3, [pc, #68]	; (8003520 <xTimerGenericCommand+0x98>)
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	f107 0114 	add.w	r1, r7, #20
 80034e2:	2300      	movs	r3, #0
 80034e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e6:	f7fe fba3 	bl	8001c30 <xQueueGenericSend>
 80034ea:	6278      	str	r0, [r7, #36]	; 0x24
 80034ec:	e012      	b.n	8003514 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034ee:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <xTimerGenericCommand+0x98>)
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	f107 0114 	add.w	r1, r7, #20
 80034f6:	2300      	movs	r3, #0
 80034f8:	2200      	movs	r2, #0
 80034fa:	f7fe fb99 	bl	8001c30 <xQueueGenericSend>
 80034fe:	6278      	str	r0, [r7, #36]	; 0x24
 8003500:	e008      	b.n	8003514 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <xTimerGenericCommand+0x98>)
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	f107 0114 	add.w	r1, r7, #20
 800350a:	2300      	movs	r3, #0
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	f7fe fcc7 	bl	8001ea0 <xQueueGenericSendFromISR>
 8003512:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003516:	4618      	mov	r0, r3
 8003518:	3728      	adds	r7, #40	; 0x28
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	2000023c 	.word	0x2000023c

08003524 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af02      	add	r7, sp, #8
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800352e:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <prvProcessExpiredTimer+0x7c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3304      	adds	r3, #4
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe fa7f 	bl	8001a40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d122      	bne.n	8003590 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	18d1      	adds	r1, r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	f000 f8c8 	bl	80036ec <prvInsertTimerInActiveList>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003562:	2300      	movs	r3, #0
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	2300      	movs	r3, #0
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	2100      	movs	r1, #0
 800356c:	6978      	ldr	r0, [r7, #20]
 800356e:	f7ff ff8b 	bl	8003488 <xTimerGenericCommand>
 8003572:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	60fb      	str	r3, [r7, #12]
}
 800358c:	bf00      	nop
 800358e:	e7fe      	b.n	800358e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	6978      	ldr	r0, [r7, #20]
 8003596:	4798      	blx	r3
}
 8003598:	bf00      	nop
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	20000234 	.word	0x20000234

080035a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035ac:	f107 0308 	add.w	r3, r7, #8
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 f857 	bl	8003664 <prvGetNextExpireTime>
 80035b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4619      	mov	r1, r3
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f803 	bl	80035c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80035c2:	f000 f8d5 	bl	8003770 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035c6:	e7f1      	b.n	80035ac <prvTimerTask+0x8>

080035c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80035d2:	f7ff fa11 	bl	80029f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f866 	bl	80036ac <prvSampleTimeNow>
 80035e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d130      	bne.n	800364a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <prvProcessTimerOrBlockTask+0x3c>
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d806      	bhi.n	8003604 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80035f6:	f7ff fa0d 	bl	8002a14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80035fa:	68f9      	ldr	r1, [r7, #12]
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ff91 	bl	8003524 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003602:	e024      	b.n	800364e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <prvProcessTimerOrBlockTask+0x90>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <prvProcessTimerOrBlockTask+0x94>)
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	4619      	mov	r1, r3
 800362a:	f7fe ff57 	bl	80024dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800362e:	f7ff f9f1 	bl	8002a14 <xTaskResumeAll>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <prvProcessTimerOrBlockTask+0x98>)
 800363a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	f3bf 8f6f 	isb	sy
}
 8003648:	e001      	b.n	800364e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800364a:	f7ff f9e3 	bl	8002a14 <xTaskResumeAll>
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000238 	.word	0x20000238
 800365c:	2000023c 	.word	0x2000023c
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800366c:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <prvGetNextExpireTime+0x44>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	bf0c      	ite	eq
 8003676:	2301      	moveq	r3, #1
 8003678:	2300      	movne	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d105      	bne.n	8003696 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800368a:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <prvGetNextExpireTime+0x44>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	e001      	b.n	800369a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	20000234 	.word	0x20000234

080036ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80036b4:	f7ff fa4e 	bl	8002b54 <xTaskGetTickCount>
 80036b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <prvSampleTimeNow+0x3c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d205      	bcs.n	80036d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80036c4:	f000 f8e8 	bl	8003898 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e002      	b.n	80036d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80036d6:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <prvSampleTimeNow+0x3c>)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80036dc:	68fb      	ldr	r3, [r7, #12]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000244 	.word	0x20000244

080036ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	d812      	bhi.n	8003738 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	1ad2      	subs	r2, r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	429a      	cmp	r2, r3
 800371e:	d302      	bcc.n	8003726 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003720:	2301      	movs	r3, #1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e01b      	b.n	800375e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <prvInsertTimerInActiveList+0x7c>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3304      	adds	r3, #4
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f7fe f94c 	bl	80019ce <vListInsert>
 8003736:	e012      	b.n	800375e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d206      	bcs.n	800374e <prvInsertTimerInActiveList+0x62>
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d302      	bcc.n	800374e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003748:	2301      	movs	r3, #1
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e007      	b.n	800375e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <prvInsertTimerInActiveList+0x80>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3304      	adds	r3, #4
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f7fe f938 	bl	80019ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800375e:	697b      	ldr	r3, [r7, #20]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000238 	.word	0x20000238
 800376c:	20000234 	.word	0x20000234

08003770 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08c      	sub	sp, #48	; 0x30
 8003774:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003776:	e07c      	b.n	8003872 <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	db79      	blt.n	8003872 <prvProcessReceivedCommands+0x102>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	3304      	adds	r3, #4
 800378e:	4618      	mov	r0, r3
 8003790:	f7fe f956 	bl	8001a40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003794:	1d3b      	adds	r3, r7, #4
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff ff88 	bl	80036ac <prvSampleTimeNow>
 800379c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b09      	cmp	r3, #9
 80037a2:	d865      	bhi.n	8003870 <prvProcessReceivedCommands+0x100>
 80037a4:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <prvProcessReceivedCommands+0x3c>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	080037d5 	.word	0x080037d5
 80037b0:	080037d5 	.word	0x080037d5
 80037b4:	080037d5 	.word	0x080037d5
 80037b8:	08003873 	.word	0x08003873
 80037bc:	08003831 	.word	0x08003831
 80037c0:	08003869 	.word	0x08003869
 80037c4:	080037d5 	.word	0x080037d5
 80037c8:	080037d5 	.word	0x080037d5
 80037cc:	08003873 	.word	0x08003873
 80037d0:	08003831 	.word	0x08003831
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	18d1      	adds	r1, r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a3a      	ldr	r2, [r7, #32]
 80037e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037e2:	f7ff ff83 	bl	80036ec <prvInsertTimerInActiveList>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d042      	beq.n	8003872 <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037f2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d13a      	bne.n	8003872 <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	441a      	add	r2, r3
 8003804:	2300      	movs	r3, #0
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	2300      	movs	r3, #0
 800380a:	2100      	movs	r1, #0
 800380c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800380e:	f7ff fe3b 	bl	8003488 <xTimerGenericCommand>
 8003812:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d12b      	bne.n	8003872 <prvProcessReceivedCommands+0x102>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	61bb      	str	r3, [r7, #24]
}
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	617b      	str	r3, [r7, #20]
}
 8003850:	bf00      	nop
 8003852:	e7fe      	b.n	8003852 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	699a      	ldr	r2, [r3, #24]
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	18d1      	adds	r1, r2, r3
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	6a3a      	ldr	r2, [r7, #32]
 8003860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003862:	f7ff ff43 	bl	80036ec <prvInsertTimerInActiveList>
					break;
 8003866:	e004      	b.n	8003872 <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8003868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800386a:	f000 fbc9 	bl	8004000 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800386e:	e000      	b.n	8003872 <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
 8003870:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003872:	4b08      	ldr	r3, [pc, #32]	; (8003894 <prvProcessReceivedCommands+0x124>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f107 0108 	add.w	r1, r7, #8
 800387a:	2200      	movs	r2, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe fbcd 	bl	800201c <xQueueReceive>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	f47f af77 	bne.w	8003778 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800388a:	bf00      	nop
 800388c:	bf00      	nop
 800388e:	3728      	adds	r7, #40	; 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	2000023c 	.word	0x2000023c

08003898 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800389e:	e045      	b.n	800392c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038a0:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <prvSwitchTimerLists+0xbc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038aa:	4b2a      	ldr	r3, [pc, #168]	; (8003954 <prvSwitchTimerLists+0xbc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3304      	adds	r3, #4
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe f8c1 	bl	8001a40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d12e      	bne.n	800392c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4413      	add	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d90e      	bls.n	80038fe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <prvSwitchTimerLists+0xbc>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	4610      	mov	r0, r2
 80038f8:	f7fe f869 	bl	80019ce <vListInsert>
 80038fc:	e016      	b.n	800392c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038fe:	2300      	movs	r3, #0
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	2300      	movs	r3, #0
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	2100      	movs	r1, #0
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff fdbd 	bl	8003488 <xTimerGenericCommand>
 800390e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <prvSwitchTimerLists+0x94>
	__asm volatile
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	603b      	str	r3, [r7, #0]
}
 8003928:	bf00      	nop
 800392a:	e7fe      	b.n	800392a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <prvSwitchTimerLists+0xbc>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1b4      	bne.n	80038a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <prvSwitchTimerLists+0xbc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <prvSwitchTimerLists+0xc0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a04      	ldr	r2, [pc, #16]	; (8003954 <prvSwitchTimerLists+0xbc>)
 8003942:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003944:	4a04      	ldr	r2, [pc, #16]	; (8003958 <prvSwitchTimerLists+0xc0>)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	6013      	str	r3, [r2, #0]
}
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000234 	.word	0x20000234
 8003958:	20000238 	.word	0x20000238

0800395c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003960:	f000 f960 	bl	8003c24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003964:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <prvCheckForValidListAndQueue+0x54>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d11d      	bne.n	80039a8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800396c:	4811      	ldr	r0, [pc, #68]	; (80039b4 <prvCheckForValidListAndQueue+0x58>)
 800396e:	f7fd ffdd 	bl	800192c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003972:	4811      	ldr	r0, [pc, #68]	; (80039b8 <prvCheckForValidListAndQueue+0x5c>)
 8003974:	f7fd ffda 	bl	800192c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003978:	4b10      	ldr	r3, [pc, #64]	; (80039bc <prvCheckForValidListAndQueue+0x60>)
 800397a:	4a0e      	ldr	r2, [pc, #56]	; (80039b4 <prvCheckForValidListAndQueue+0x58>)
 800397c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <prvCheckForValidListAndQueue+0x64>)
 8003980:	4a0d      	ldr	r2, [pc, #52]	; (80039b8 <prvCheckForValidListAndQueue+0x5c>)
 8003982:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003984:	2200      	movs	r2, #0
 8003986:	210c      	movs	r1, #12
 8003988:	200a      	movs	r0, #10
 800398a:	f7fe f8eb 	bl	8001b64 <xQueueGenericCreate>
 800398e:	4603      	mov	r3, r0
 8003990:	4a07      	ldr	r2, [pc, #28]	; (80039b0 <prvCheckForValidListAndQueue+0x54>)
 8003992:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <prvCheckForValidListAndQueue+0x54>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800399c:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <prvCheckForValidListAndQueue+0x54>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4908      	ldr	r1, [pc, #32]	; (80039c4 <prvCheckForValidListAndQueue+0x68>)
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe fd68 	bl	8002478 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039a8:	f000 f96c 	bl	8003c84 <vPortExitCritical>
}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	2000023c 	.word	0x2000023c
 80039b4:	2000020c 	.word	0x2000020c
 80039b8:	20000220 	.word	0x20000220
 80039bc:	20000234 	.word	0x20000234
 80039c0:	20000238 	.word	0x20000238
 80039c4:	08005fd4 	.word	0x08005fd4

080039c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3b04      	subs	r3, #4
 80039d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3b04      	subs	r3, #4
 80039e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f023 0201 	bic.w	r2, r3, #1
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3b04      	subs	r3, #4
 80039f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80039f8:	4a0c      	ldr	r2, [pc, #48]	; (8003a2c <pxPortInitialiseStack+0x64>)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3b14      	subs	r3, #20
 8003a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3b04      	subs	r3, #4
 8003a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f06f 0202 	mvn.w	r2, #2
 8003a16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3b20      	subs	r3, #32
 8003a1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	08003a31 	.word	0x08003a31

08003a30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <prvTaskExitError+0x54>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d00a      	beq.n	8003a5a <prvTaskExitError+0x2a>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	60fb      	str	r3, [r7, #12]
}
 8003a56:	bf00      	nop
 8003a58:	e7fe      	b.n	8003a58 <prvTaskExitError+0x28>
	__asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	60bb      	str	r3, [r7, #8]
}
 8003a6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a6e:	bf00      	nop
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0fc      	beq.n	8003a70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a76:	bf00      	nop
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	2000000c 	.word	0x2000000c
	...

08003a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <pxCurrentTCBConst2>)
 8003a92:	6819      	ldr	r1, [r3, #0]
 8003a94:	6808      	ldr	r0, [r1, #0]
 8003a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a9a:	f380 8809 	msr	PSP, r0
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f04f 0000 	mov.w	r0, #0
 8003aa6:	f380 8811 	msr	BASEPRI, r0
 8003aaa:	4770      	bx	lr
 8003aac:	f3af 8000 	nop.w

08003ab0 <pxCurrentTCBConst2>:
 8003ab0:	20000108 	.word	0x20000108
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop

08003ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ab8:	4808      	ldr	r0, [pc, #32]	; (8003adc <prvPortStartFirstTask+0x24>)
 8003aba:	6800      	ldr	r0, [r0, #0]
 8003abc:	6800      	ldr	r0, [r0, #0]
 8003abe:	f380 8808 	msr	MSP, r0
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f380 8814 	msr	CONTROL, r0
 8003aca:	b662      	cpsie	i
 8003acc:	b661      	cpsie	f
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	df00      	svc	0
 8003ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003ada:	bf00      	nop
 8003adc:	e000ed08 	.word	0xe000ed08

08003ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ae6:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <xPortStartScheduler+0x120>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a46      	ldr	r2, [pc, #280]	; (8003c04 <xPortStartScheduler+0x124>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10a      	bne.n	8003b06 <xPortStartScheduler+0x26>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	613b      	str	r3, [r7, #16]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b06:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <xPortStartScheduler+0x120>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a3f      	ldr	r2, [pc, #252]	; (8003c08 <xPortStartScheduler+0x128>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d10a      	bne.n	8003b26 <xPortStartScheduler+0x46>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	60fb      	str	r3, [r7, #12]
}
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b26:	4b39      	ldr	r3, [pc, #228]	; (8003c0c <xPortStartScheduler+0x12c>)
 8003b28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	22ff      	movs	r2, #255	; 0xff
 8003b36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <xPortStartScheduler+0x130>)
 8003b4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b4e:	4b31      	ldr	r3, [pc, #196]	; (8003c14 <xPortStartScheduler+0x134>)
 8003b50:	2207      	movs	r2, #7
 8003b52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b54:	e009      	b.n	8003b6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003b56:	4b2f      	ldr	r3, [pc, #188]	; (8003c14 <xPortStartScheduler+0x134>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	4a2d      	ldr	r2, [pc, #180]	; (8003c14 <xPortStartScheduler+0x134>)
 8003b5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b80      	cmp	r3, #128	; 0x80
 8003b74:	d0ef      	beq.n	8003b56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b76:	4b27      	ldr	r3, [pc, #156]	; (8003c14 <xPortStartScheduler+0x134>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f1c3 0307 	rsb	r3, r3, #7
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d00a      	beq.n	8003b98 <xPortStartScheduler+0xb8>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	60bb      	str	r3, [r7, #8]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b98:	4b1e      	ldr	r3, [pc, #120]	; (8003c14 <xPortStartScheduler+0x134>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <xPortStartScheduler+0x134>)
 8003ba0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <xPortStartScheduler+0x134>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003baa:	4a1a      	ldr	r2, [pc, #104]	; (8003c14 <xPortStartScheduler+0x134>)
 8003bac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <xPortStartScheduler+0x138>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a17      	ldr	r2, [pc, #92]	; (8003c18 <xPortStartScheduler+0x138>)
 8003bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003bc2:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <xPortStartScheduler+0x138>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <xPortStartScheduler+0x138>)
 8003bc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003bcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003bce:	f000 f8e5 	bl	8003d9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <xPortStartScheduler+0x13c>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003bd8:	f000 f904 	bl	8003de4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003bdc:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <xPortStartScheduler+0x140>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0f      	ldr	r2, [pc, #60]	; (8003c20 <xPortStartScheduler+0x140>)
 8003be2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003be6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003be8:	f7ff ff66 	bl	8003ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003bec:	f7ff f896 	bl	8002d1c <vTaskSwitchContext>
	prvTaskExitError();
 8003bf0:	f7ff ff1e 	bl	8003a30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	e000ed00 	.word	0xe000ed00
 8003c04:	410fc271 	.word	0x410fc271
 8003c08:	410fc270 	.word	0x410fc270
 8003c0c:	e000e400 	.word	0xe000e400
 8003c10:	20000248 	.word	0x20000248
 8003c14:	2000024c 	.word	0x2000024c
 8003c18:	e000ed20 	.word	0xe000ed20
 8003c1c:	2000000c 	.word	0x2000000c
 8003c20:	e000ef34 	.word	0xe000ef34

08003c24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
	__asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	607b      	str	r3, [r7, #4]
}
 8003c3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <vPortEnterCritical+0x58>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3301      	adds	r3, #1
 8003c44:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <vPortEnterCritical+0x58>)
 8003c46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <vPortEnterCritical+0x58>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d10f      	bne.n	8003c70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <vPortEnterCritical+0x5c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <vPortEnterCritical+0x4c>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	603b      	str	r3, [r7, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	e7fe      	b.n	8003c6e <vPortEnterCritical+0x4a>
	}
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	2000000c 	.word	0x2000000c
 8003c80:	e000ed04 	.word	0xe000ed04

08003c84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003c8a:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <vPortExitCritical+0x50>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <vPortExitCritical+0x24>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	607b      	str	r3, [r7, #4]
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <vPortExitCritical+0x50>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <vPortExitCritical+0x50>)
 8003cb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <vPortExitCritical+0x50>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d105      	bne.n	8003cc6 <vPortExitCritical+0x42>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	f383 8811 	msr	BASEPRI, r3
}
 8003cc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	2000000c 	.word	0x2000000c
	...

08003ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ce0:	f3ef 8009 	mrs	r0, PSP
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <pxCurrentTCBConst>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	f01e 0f10 	tst.w	lr, #16
 8003cf0:	bf08      	it	eq
 8003cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfa:	6010      	str	r0, [r2, #0]
 8003cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d04:	f380 8811 	msr	BASEPRI, r0
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f7ff f804 	bl	8002d1c <vTaskSwitchContext>
 8003d14:	f04f 0000 	mov.w	r0, #0
 8003d18:	f380 8811 	msr	BASEPRI, r0
 8003d1c:	bc09      	pop	{r0, r3}
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	6808      	ldr	r0, [r1, #0]
 8003d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d26:	f01e 0f10 	tst.w	lr, #16
 8003d2a:	bf08      	it	eq
 8003d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d30:	f380 8809 	msr	PSP, r0
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	f3af 8000 	nop.w

08003d40 <pxCurrentTCBConst>:
 8003d40:	20000108 	.word	0x20000108
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop

08003d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	607b      	str	r3, [r7, #4]
}
 8003d60:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8003d62:	f001 fc1b 	bl	800559c <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d66:	f7fe ff17 	bl	8002b98 <xTaskIncrementTick>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d006      	beq.n	8003d7e <SysTick_Handler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8003d70:	f001 fc72 	bl	8005658 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <SysTick_Handler+0x50>)
 8003d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e001      	b.n	8003d82 <SysTick_Handler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 8003d7e:	f001 fc4f 	bl	8005620 <SEGGER_SYSVIEW_RecordExitISR>
 8003d82:	2300      	movs	r3, #0
 8003d84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f383 8811 	msr	BASEPRI, r3
}
 8003d8c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <vPortSetupTimerInterrupt+0x34>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <vPortSetupTimerInterrupt+0x38>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <vPortSetupTimerInterrupt+0x3c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0a      	ldr	r2, [pc, #40]	; (8003ddc <vPortSetupTimerInterrupt+0x40>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <vPortSetupTimerInterrupt+0x44>)
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dbe:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <vPortSetupTimerInterrupt+0x34>)
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	601a      	str	r2, [r3, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	e000e010 	.word	0xe000e010
 8003dd4:	e000e018 	.word	0xe000e018
 8003dd8:	20000000 	.word	0x20000000
 8003ddc:	10624dd3 	.word	0x10624dd3
 8003de0:	e000e014 	.word	0xe000e014

08003de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003de4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003df4 <vPortEnableVFP+0x10>
 8003de8:	6801      	ldr	r1, [r0, #0]
 8003dea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003dee:	6001      	str	r1, [r0, #0]
 8003df0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003df2:	bf00      	nop
 8003df4:	e000ed88 	.word	0xe000ed88

08003df8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003dfe:	f3ef 8305 	mrs	r3, IPSR
 8003e02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b0f      	cmp	r3, #15
 8003e08:	d914      	bls.n	8003e34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e0a:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <vPortValidateInterruptPriority+0x70>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e14:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <vPortValidateInterruptPriority+0x74>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	7afa      	ldrb	r2, [r7, #11]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d20a      	bcs.n	8003e34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	607b      	str	r3, [r7, #4]
}
 8003e30:	bf00      	nop
 8003e32:	e7fe      	b.n	8003e32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e34:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <vPortValidateInterruptPriority+0x78>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e3c:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <vPortValidateInterruptPriority+0x7c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d90a      	bls.n	8003e5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	603b      	str	r3, [r7, #0]
}
 8003e56:	bf00      	nop
 8003e58:	e7fe      	b.n	8003e58 <vPortValidateInterruptPriority+0x60>
	}
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	e000e3f0 	.word	0xe000e3f0
 8003e6c:	20000248 	.word	0x20000248
 8003e70:	e000ed0c 	.word	0xe000ed0c
 8003e74:	2000024c 	.word	0x2000024c

08003e78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e84:	f7fe fdb8 	bl	80029f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e88:	4b58      	ldr	r3, [pc, #352]	; (8003fec <pvPortMalloc+0x174>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e90:	f000 f910 	bl	80040b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e94:	4b56      	ldr	r3, [pc, #344]	; (8003ff0 <pvPortMalloc+0x178>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f040 808e 	bne.w	8003fbe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01d      	beq.n	8003ee4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4413      	add	r3, r2
 8003eae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d014      	beq.n	8003ee4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f023 0307 	bic.w	r3, r3, #7
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <pvPortMalloc+0x6c>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	617b      	str	r3, [r7, #20]
}
 8003ee0:	bf00      	nop
 8003ee2:	e7fe      	b.n	8003ee2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d069      	beq.n	8003fbe <pvPortMalloc+0x146>
 8003eea:	4b42      	ldr	r3, [pc, #264]	; (8003ff4 <pvPortMalloc+0x17c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d864      	bhi.n	8003fbe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ef4:	4b40      	ldr	r3, [pc, #256]	; (8003ff8 <pvPortMalloc+0x180>)
 8003ef6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ef8:	4b3f      	ldr	r3, [pc, #252]	; (8003ff8 <pvPortMalloc+0x180>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003efe:	e004      	b.n	8003f0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d903      	bls.n	8003f1c <pvPortMalloc+0xa4>
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f1      	bne.n	8003f00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f1c:	4b33      	ldr	r3, [pc, #204]	; (8003fec <pvPortMalloc+0x174>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d04b      	beq.n	8003fbe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2208      	movs	r2, #8
 8003f2c:	4413      	add	r3, r2
 8003f2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	1ad2      	subs	r2, r2, r3
 8003f40:	2308      	movs	r3, #8
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d91f      	bls.n	8003f88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <pvPortMalloc+0xf8>
	__asm volatile
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	613b      	str	r3, [r7, #16]
}
 8003f6c:	bf00      	nop
 8003f6e:	e7fe      	b.n	8003f6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	1ad2      	subs	r2, r2, r3
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f82:	69b8      	ldr	r0, [r7, #24]
 8003f84:	f000 f8f8 	bl	8004178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f88:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <pvPortMalloc+0x17c>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	4a18      	ldr	r2, [pc, #96]	; (8003ff4 <pvPortMalloc+0x17c>)
 8003f94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f96:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <pvPortMalloc+0x17c>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <pvPortMalloc+0x184>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d203      	bcs.n	8003faa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <pvPortMalloc+0x17c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a15      	ldr	r2, [pc, #84]	; (8003ffc <pvPortMalloc+0x184>)
 8003fa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <pvPortMalloc+0x178>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fbe:	f7fe fd29 	bl	8002a14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <pvPortMalloc+0x16a>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	60fb      	str	r3, [r7, #12]
}
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <pvPortMalloc+0x168>
	return pvReturn;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3728      	adds	r7, #40	; 0x28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20012e58 	.word	0x20012e58
 8003ff0:	20012e64 	.word	0x20012e64
 8003ff4:	20012e5c 	.word	0x20012e5c
 8003ff8:	20012e50 	.word	0x20012e50
 8003ffc:	20012e60 	.word	0x20012e60

08004000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d048      	beq.n	80040a4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004012:	2308      	movs	r3, #8
 8004014:	425b      	negs	r3, r3
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4413      	add	r3, r2
 800401a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	4b21      	ldr	r3, [pc, #132]	; (80040ac <vPortFree+0xac>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <vPortFree+0x44>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	60fb      	str	r3, [r7, #12]
}
 8004040:	bf00      	nop
 8004042:	e7fe      	b.n	8004042 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <vPortFree+0x62>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	60bb      	str	r3, [r7, #8]
}
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <vPortFree+0xac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d019      	beq.n	80040a4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d115      	bne.n	80040a4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <vPortFree+0xac>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	43db      	mvns	r3, r3
 8004082:	401a      	ands	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004088:	f7fe fcb6 	bl	80029f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <vPortFree+0xb0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4413      	add	r3, r2
 8004096:	4a06      	ldr	r2, [pc, #24]	; (80040b0 <vPortFree+0xb0>)
 8004098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800409a:	6938      	ldr	r0, [r7, #16]
 800409c:	f000 f86c 	bl	8004178 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80040a0:	f7fe fcb8 	bl	8002a14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040a4:	bf00      	nop
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20012e64 	.word	0x20012e64
 80040b0:	20012e5c 	.word	0x20012e5c

080040b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040ba:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80040be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040c0:	4b27      	ldr	r3, [pc, #156]	; (8004160 <prvHeapInit+0xac>)
 80040c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00c      	beq.n	80040e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3307      	adds	r3, #7
 80040d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0307 	bic.w	r3, r3, #7
 80040da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	4a1f      	ldr	r2, [pc, #124]	; (8004160 <prvHeapInit+0xac>)
 80040e4:	4413      	add	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80040ec:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <prvHeapInit+0xb0>)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80040f2:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <prvHeapInit+0xb0>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	4413      	add	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004100:	2208      	movs	r2, #8
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0307 	bic.w	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a15      	ldr	r2, [pc, #84]	; (8004168 <prvHeapInit+0xb4>)
 8004114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004116:	4b14      	ldr	r3, [pc, #80]	; (8004168 <prvHeapInit+0xb4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2200      	movs	r2, #0
 800411c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <prvHeapInit+0xb4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	1ad2      	subs	r2, r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004134:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <prvHeapInit+0xb4>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	4a0a      	ldr	r2, [pc, #40]	; (800416c <prvHeapInit+0xb8>)
 8004142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	4a09      	ldr	r2, [pc, #36]	; (8004170 <prvHeapInit+0xbc>)
 800414a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <prvHeapInit+0xc0>)
 800414e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004152:	601a      	str	r2, [r3, #0]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	20000250 	.word	0x20000250
 8004164:	20012e50 	.word	0x20012e50
 8004168:	20012e58 	.word	0x20012e58
 800416c:	20012e60 	.word	0x20012e60
 8004170:	20012e5c 	.word	0x20012e5c
 8004174:	20012e64 	.word	0x20012e64

08004178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004180:	4b28      	ldr	r3, [pc, #160]	; (8004224 <prvInsertBlockIntoFreeList+0xac>)
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e002      	b.n	800418c <prvInsertBlockIntoFreeList+0x14>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	429a      	cmp	r2, r3
 8004194:	d8f7      	bhi.n	8004186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	4413      	add	r3, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d108      	bne.n	80041ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	441a      	add	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	441a      	add	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d118      	bne.n	8004200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <prvInsertBlockIntoFreeList+0xb0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d00d      	beq.n	80041f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	441a      	add	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	e008      	b.n	8004208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <prvInsertBlockIntoFreeList+0xb0>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e003      	b.n	8004208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	d002      	beq.n	8004216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	20012e50 	.word	0x20012e50
 8004228:	20012e58 	.word	0x20012e58

0800422c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004230:	4803      	ldr	r0, [pc, #12]	; (8004240 <_cbSendSystemDesc+0x14>)
 8004232:	f001 f95d 	bl	80054f0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004236:	4803      	ldr	r0, [pc, #12]	; (8004244 <_cbSendSystemDesc+0x18>)
 8004238:	f001 f95a 	bl	80054f0 <SEGGER_SYSVIEW_SendSysDesc>
}
 800423c:	bf00      	nop
 800423e:	bd80      	pop	{r7, pc}
 8004240:	08005fdc 	.word	0x08005fdc
 8004244:	0800600c 	.word	0x0800600c

08004248 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <SEGGER_SYSVIEW_Conf+0x20>)
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <SEGGER_SYSVIEW_Conf+0x20>)
 8004252:	6819      	ldr	r1, [r3, #0]
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <SEGGER_SYSVIEW_Conf+0x24>)
 8004256:	4a06      	ldr	r2, [pc, #24]	; (8004270 <SEGGER_SYSVIEW_Conf+0x28>)
 8004258:	f000 fcc8 	bl	8004bec <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800425c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004260:	f000 fd08 	bl	8004c74 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004264:	bf00      	nop
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000000 	.word	0x20000000
 800426c:	0800422d 	.word	0x0800422d
 8004270:	080060c8 	.word	0x080060c8

08004274 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800427a:	4b26      	ldr	r3, [pc, #152]	; (8004314 <_DoInit+0xa0>)
 800427c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800427e:	22a8      	movs	r2, #168	; 0xa8
 8004280:	2100      	movs	r1, #0
 8004282:	6838      	ldr	r0, [r7, #0]
 8004284:	f001 fe19 	bl	8005eba <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2203      	movs	r2, #3
 800428c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2203      	movs	r2, #3
 8004292:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	4a20      	ldr	r2, [pc, #128]	; (8004318 <_DoInit+0xa4>)
 8004298:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	4a1f      	ldr	r2, [pc, #124]	; (800431c <_DoInit+0xa8>)
 800429e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042a6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2200      	movs	r2, #0
 80042ac:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2200      	movs	r2, #0
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2200      	movs	r2, #0
 80042b8:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	4a16      	ldr	r2, [pc, #88]	; (8004318 <_DoInit+0xa4>)
 80042be:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	4a17      	ldr	r2, [pc, #92]	; (8004320 <_DoInit+0xac>)
 80042c4:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2210      	movs	r2, #16
 80042ca:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2200      	movs	r2, #0
 80042d6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80042de:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80042e2:	2300      	movs	r3, #0
 80042e4:	607b      	str	r3, [r7, #4]
 80042e6:	e00c      	b.n	8004302 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f1c3 030f 	rsb	r3, r3, #15
 80042ee:	4a0d      	ldr	r2, [pc, #52]	; (8004324 <_DoInit+0xb0>)
 80042f0:	5cd1      	ldrb	r1, [r2, r3]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4413      	add	r3, r2
 80042f8:	460a      	mov	r2, r1
 80042fa:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3301      	adds	r3, #1
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b0f      	cmp	r3, #15
 8004306:	d9ef      	bls.n	80042e8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004308:	f3bf 8f5f 	dmb	sy
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20012e68 	.word	0x20012e68
 8004318:	0800601c 	.word	0x0800601c
 800431c:	20012f10 	.word	0x20012f10
 8004320:	20013310 	.word	0x20013310
 8004324:	080060a8 	.word	0x080060a8

08004328 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004328:	b580      	push	{r7, lr}
 800432a:	b08c      	sub	sp, #48	; 0x30
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004334:	4b3e      	ldr	r3, [pc, #248]	; (8004430 <SEGGER_RTT_ReadNoLock+0x108>)
 8004336:	623b      	str	r3, [r7, #32]
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <SEGGER_RTT_ReadNoLock+0x1e>
 8004342:	f7ff ff97 	bl	8004274 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4613      	mov	r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	3360      	adds	r3, #96	; 0x60
 8004352:	4a37      	ldr	r2, [pc, #220]	; (8004430 <SEGGER_RTT_ReadNoLock+0x108>)
 8004354:	4413      	add	r3, r2
 8004356:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004368:	2300      	movs	r3, #0
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800436c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	429a      	cmp	r2, r3
 8004372:	d92b      	bls.n	80043cc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4293      	cmp	r3, r2
 8004384:	bf28      	it	cs
 8004386:	4613      	movcs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	4413      	add	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	6939      	ldr	r1, [r7, #16]
 8004398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800439a:	f001 fdbb 	bl	8005f14 <memcpy>
    NumBytesRead += NumBytesRem;
 800439e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	4413      	add	r3, r2
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80043a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4413      	add	r3, r2
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80043b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4413      	add	r3, r2
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d101      	bne.n	80043cc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80043c8:	2300      	movs	r3, #0
 80043ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4293      	cmp	r3, r2
 80043da:	bf28      	it	cs
 80043dc:	4613      	movcs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d019      	beq.n	800441a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	4413      	add	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	6939      	ldr	r1, [r7, #16]
 80043f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043f6:	f001 fd8d 	bl	8005f14 <memcpy>
    NumBytesRead += NumBytesRem;
 80043fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	4413      	add	r3, r2
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	4413      	add	r3, r2
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	4413      	add	r3, r2
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800441a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004424:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004428:	4618      	mov	r0, r3
 800442a:	3730      	adds	r7, #48	; 0x30
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20012e68 	.word	0x20012e68

08004434 <SEGGER_RTT_ASM_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
//#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004434:	b580      	push	{r7, lr}
 8004436:	b08c      	sub	sp, #48	; 0x30
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  //   4) RdOff >  WrOff => Space is sufficient
  //   5) RdOff >  WrOff => No space in buf
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	4a38      	ldr	r2, [pc, #224]	; (8004534 <SEGGER_RTT_ASM_WriteSkipNoLock+0x100>)
 8004452:	4413      	add	r3, r2
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
  RdOff = pRing->RdOff;
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
  WrOff = pRing->WrOff;
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	623b      	str	r3, [r7, #32]
  pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	4413      	add	r3, r2
 800446a:	61fb      	str	r3, [r7, #28]
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 800446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	429a      	cmp	r2, r3
 8004472:	d842      	bhi.n	80044fa <SEGGER_RTT_ASM_WriteSkipNoLock+0xc6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 1)?
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	429a      	cmp	r2, r3
 8004486:	d30d      	bcc.n	80044a4 <SEGGER_RTT_ASM_WriteSkipNoLock+0x70>
      memcpy((void*)pDst, pData, NumBytes);
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800448c:	69f8      	ldr	r0, [r7, #28]
 800448e:	f001 fd41 	bl	8005f14 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004492:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = WrOff + NumBytes;
 8004496:	6a3a      	ldr	r2, [r7, #32]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	441a      	add	r2, r3
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	60da      	str	r2, [r3, #12]
      return 1;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e042      	b.n	800452a <SEGGER_RTT_ASM_WriteSkipNoLock+0xf6>
    }
    Avail += RdOff;                                     // Space incl. wrap-around
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	4413      	add	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d339      	bcc.n	8004528 <SEGGER_RTT_ASM_WriteSkipNoLock+0xf4>
      Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	617b      	str	r3, [r7, #20]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044c2:	69f8      	ldr	r0, [r7, #28]
 80044c4:	f001 fd26 	bl	8005f14 <memcpy>
      NumBytes -= Rem;
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	607b      	str	r3, [r7, #4]
      // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
      // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
      // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <SEGGER_RTT_ASM_WriteSkipNoLock+0xb8>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	61fb      	str	r3, [r7, #28]
        memcpy((void*)pDst, pData + Rem, NumBytes);
 80044dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	4413      	add	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4619      	mov	r1, r3
 80044e6:	69f8      	ldr	r0, [r7, #28]
 80044e8:	f001 fd14 	bl	8005f14 <memcpy>
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80044ec:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = NumBytes;
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	60da      	str	r2, [r3, #12]
      return 1;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e017      	b.n	800452a <SEGGER_RTT_ASM_WriteSkipNoLock+0xf6>
    }
  } else {                                             // Potential case 4)
    Avail = RdOff - WrOff - 1u;
 80044fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	429a      	cmp	r2, r3
 800450a:	d30d      	bcc.n	8004528 <SEGGER_RTT_ASM_WriteSkipNoLock+0xf4>
      memcpy((void*)pDst, pData, NumBytes);
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004510:	69f8      	ldr	r0, [r7, #28]
 8004512:	f001 fcff 	bl	8005f14 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004516:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = WrOff + NumBytes;
 800451a:	6a3a      	ldr	r2, [r7, #32]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	441a      	add	r2, r3
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	60da      	str	r2, [r3, #12]
      return 1;
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <SEGGER_RTT_ASM_WriteSkipNoLock+0xf6>
    }
  }
  return 0;     // No space in buffer
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3730      	adds	r7, #48	; 0x30
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20012e68 	.word	0x20012e68

08004538 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004546:	4b3d      	ldr	r3, [pc, #244]	; (800463c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004548:	61bb      	str	r3, [r7, #24]
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004554:	f7ff fe8e 	bl	8004274 <_DoInit>
  SEGGER_RTT_LOCK();
 8004558:	f3ef 8311 	mrs	r3, BASEPRI
 800455c:	f04f 0120 	mov.w	r1, #32
 8004560:	f381 8811 	msr	BASEPRI, r1
 8004564:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004566:	4b35      	ldr	r3, [pc, #212]	; (800463c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004568:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800456e:	6939      	ldr	r1, [r7, #16]
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	4613      	mov	r3, r2
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	4413      	add	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	440b      	add	r3, r1
 800457e:	3304      	adds	r3, #4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	3301      	adds	r3, #1
 800458a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	429a      	cmp	r2, r3
 8004594:	dbeb      	blt.n	800456e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004596:	e000      	b.n	800459a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004598:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	da3f      	bge.n	8004624 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80045a4:	6939      	ldr	r1, [r7, #16]
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	4613      	mov	r3, r2
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	4413      	add	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	440b      	add	r3, r1
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80045b8:	6939      	ldr	r1, [r7, #16]
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	4613      	mov	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	4413      	add	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	440b      	add	r3, r1
 80045c8:	3304      	adds	r3, #4
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80045ce:	6939      	ldr	r1, [r7, #16]
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	4613      	mov	r3, r2
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	4413      	add	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	440b      	add	r3, r1
 80045dc:	3320      	adds	r3, #32
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80045e2:	6939      	ldr	r1, [r7, #16]
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	4613      	mov	r3, r2
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4413      	add	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	440b      	add	r3, r1
 80045f0:	3328      	adds	r3, #40	; 0x28
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80045f6:	6939      	ldr	r1, [r7, #16]
 80045f8:	69fa      	ldr	r2, [r7, #28]
 80045fa:	4613      	mov	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4413      	add	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	440b      	add	r3, r1
 8004604:	3324      	adds	r3, #36	; 0x24
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800460a:	6939      	ldr	r1, [r7, #16]
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	4613      	mov	r3, r2
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	4413      	add	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	440b      	add	r3, r1
 8004618:	332c      	adds	r3, #44	; 0x2c
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800461e:	f3bf 8f5f 	dmb	sy
 8004622:	e002      	b.n	800462a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004624:	f04f 33ff 	mov.w	r3, #4294967295
 8004628:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004630:	69fb      	ldr	r3, [r7, #28]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3720      	adds	r7, #32
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20012e68 	.word	0x20012e68

08004640 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	; 0x28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800464e:	4b21      	ldr	r3, [pc, #132]	; (80046d4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004650:	623b      	str	r3, [r7, #32]
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800465c:	f7ff fe0a 	bl	8004274 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004660:	4b1c      	ldr	r3, [pc, #112]	; (80046d4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004662:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d82c      	bhi.n	80046c4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800466a:	f3ef 8311 	mrs	r3, BASEPRI
 800466e:	f04f 0120 	mov.w	r1, #32
 8004672:	f381 8811 	msr	BASEPRI, r1
 8004676:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4613      	mov	r3, r2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	4413      	add	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	3360      	adds	r3, #96	; 0x60
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	4413      	add	r3, r2
 8004688:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00e      	beq.n	80046ae <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2200      	movs	r2, #0
 80046a6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2200      	movs	r2, #0
 80046ac:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046b2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046b4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80046be:	2300      	movs	r3, #0
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
 80046c2:	e002      	b.n	80046ca <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80046c4:	f04f 33ff 	mov.w	r3, #4294967295
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3728      	adds	r7, #40	; 0x28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20012e68 	.word	0x20012e68

080046d8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	60fa      	str	r2, [r7, #12]
 80046ee:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b80      	cmp	r3, #128	; 0x80
 80046f4:	d90a      	bls.n	800470c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80046fa:	e007      	b.n	800470c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	1c53      	adds	r3, r2, #1
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1c59      	adds	r1, r3, #1
 8004706:	60f9      	str	r1, [r7, #12]
 8004708:	7812      	ldrb	r2, [r2, #0]
 800470a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	1e5a      	subs	r2, r3, #1
 8004710:	607a      	str	r2, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <_EncodeStr+0x46>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1ee      	bne.n	80046fc <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	b2da      	uxtb	r2, r3
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800472a:	68fb      	ldr	r3, [r7, #12]
}
 800472c:	4618      	mov	r0, r3
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3307      	adds	r3, #7
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004756:	4b34      	ldr	r3, [pc, #208]	; (8004828 <_HandleIncomingPacket+0xd8>)
 8004758:	7e1b      	ldrb	r3, [r3, #24]
 800475a:	4618      	mov	r0, r3
 800475c:	1cfb      	adds	r3, r7, #3
 800475e:	2201      	movs	r2, #1
 8004760:	4619      	mov	r1, r3
 8004762:	f7ff fde1 	bl	8004328 <SEGGER_RTT_ReadNoLock>
 8004766:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d057      	beq.n	800481e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	2b80      	cmp	r3, #128	; 0x80
 8004772:	d031      	beq.n	80047d8 <_HandleIncomingPacket+0x88>
 8004774:	2b80      	cmp	r3, #128	; 0x80
 8004776:	dc40      	bgt.n	80047fa <_HandleIncomingPacket+0xaa>
 8004778:	2b07      	cmp	r3, #7
 800477a:	dc15      	bgt.n	80047a8 <_HandleIncomingPacket+0x58>
 800477c:	2b00      	cmp	r3, #0
 800477e:	dd3c      	ble.n	80047fa <_HandleIncomingPacket+0xaa>
 8004780:	3b01      	subs	r3, #1
 8004782:	2b06      	cmp	r3, #6
 8004784:	d839      	bhi.n	80047fa <_HandleIncomingPacket+0xaa>
 8004786:	a201      	add	r2, pc, #4	; (adr r2, 800478c <_HandleIncomingPacket+0x3c>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	080047af 	.word	0x080047af
 8004790:	080047b5 	.word	0x080047b5
 8004794:	080047bb 	.word	0x080047bb
 8004798:	080047c1 	.word	0x080047c1
 800479c:	080047c7 	.word	0x080047c7
 80047a0:	080047cd 	.word	0x080047cd
 80047a4:	080047d3 	.word	0x080047d3
 80047a8:	2b7f      	cmp	r3, #127	; 0x7f
 80047aa:	d033      	beq.n	8004814 <_HandleIncomingPacket+0xc4>
 80047ac:	e025      	b.n	80047fa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80047ae:	f000 fc2d 	bl	800500c <SEGGER_SYSVIEW_Start>
      break;
 80047b2:	e034      	b.n	800481e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80047b4:	f000 fce4 	bl	8005180 <SEGGER_SYSVIEW_Stop>
      break;
 80047b8:	e031      	b.n	800481e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80047ba:	f000 febd 	bl	8005538 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80047be:	e02e      	b.n	800481e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80047c0:	f000 fe82 	bl	80054c8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80047c4:	e02b      	b.n	800481e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80047c6:	f000 fd01 	bl	80051cc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80047ca:	e028      	b.n	800481e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80047cc:	f001 f95a 	bl	8005a84 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80047d0:	e025      	b.n	800481e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80047d2:	f001 f939 	bl	8005a48 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80047d6:	e022      	b.n	800481e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80047d8:	4b13      	ldr	r3, [pc, #76]	; (8004828 <_HandleIncomingPacket+0xd8>)
 80047da:	7e1b      	ldrb	r3, [r3, #24]
 80047dc:	4618      	mov	r0, r3
 80047de:	1cfb      	adds	r3, r7, #3
 80047e0:	2201      	movs	r2, #1
 80047e2:	4619      	mov	r1, r3
 80047e4:	f7ff fda0 	bl	8004328 <SEGGER_RTT_ReadNoLock>
 80047e8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d013      	beq.n	8004818 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 f89e 	bl	8005934 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80047f8:	e00e      	b.n	8004818 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	b25b      	sxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	da0c      	bge.n	800481c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004802:	4b09      	ldr	r3, [pc, #36]	; (8004828 <_HandleIncomingPacket+0xd8>)
 8004804:	7e1b      	ldrb	r3, [r3, #24]
 8004806:	4618      	mov	r0, r3
 8004808:	1cfb      	adds	r3, r7, #3
 800480a:	2201      	movs	r2, #1
 800480c:	4619      	mov	r1, r3
 800480e:	f7ff fd8b 	bl	8004328 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004812:	e003      	b.n	800481c <_HandleIncomingPacket+0xcc>
      break;
 8004814:	bf00      	nop
 8004816:	e002      	b.n	800481e <_HandleIncomingPacket+0xce>
      break;
 8004818:	bf00      	nop
 800481a:	e000      	b.n	800481e <_HandleIncomingPacket+0xce>
      break;
 800481c:	bf00      	nop
    }
  }
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20013728 	.word	0x20013728

0800482c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800482c:	b580      	push	{r7, lr}
 800482e:	b08c      	sub	sp, #48	; 0x30
 8004830:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004832:	2301      	movs	r3, #1
 8004834:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004836:	1d3b      	adds	r3, r7, #4
 8004838:	3301      	adds	r3, #1
 800483a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004840:	4b31      	ldr	r3, [pc, #196]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	62bb      	str	r3, [r7, #40]	; 0x28
 8004846:	e00b      	b.n	8004860 <_TrySendOverflowPacket+0x34>
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	b2da      	uxtb	r2, r3
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	1c59      	adds	r1, r3, #1
 8004850:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004852:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	09db      	lsrs	r3, r3, #7
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	2b7f      	cmp	r3, #127	; 0x7f
 8004864:	d8f0      	bhi.n	8004848 <_TrySendOverflowPacket+0x1c>
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800486c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004876:	4b25      	ldr	r3, [pc, #148]	; (800490c <_TrySendOverflowPacket+0xe0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800487c:	4b22      	ldr	r3, [pc, #136]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	e00b      	b.n	80048a8 <_TrySendOverflowPacket+0x7c>
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	b2da      	uxtb	r2, r3
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	1c59      	adds	r1, r3, #1
 8004898:	6279      	str	r1, [r7, #36]	; 0x24
 800489a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	09db      	lsrs	r3, r3, #7
 80048a6:	623b      	str	r3, [r7, #32]
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	2b7f      	cmp	r3, #127	; 0x7f
 80048ac:	d8f0      	bhi.n	8004890 <_TrySendOverflowPacket+0x64>
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	627a      	str	r2, [r7, #36]	; 0x24
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80048be:	4b12      	ldr	r3, [pc, #72]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 80048c0:	785b      	ldrb	r3, [r3, #1]
 80048c2:	4618      	mov	r0, r3
 80048c4:	1d3b      	adds	r3, r7, #4
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	1d3b      	adds	r3, r7, #4
 80048ce:	4619      	mov	r1, r3
 80048d0:	f7ff fdb0 	bl	8004434 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80048d4:	4603      	mov	r3, r0
 80048d6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80048de:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	e004      	b.n	80048fc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	3301      	adds	r3, #1
 80048f8:	4a03      	ldr	r2, [pc, #12]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 80048fa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80048fc:	693b      	ldr	r3, [r7, #16]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3730      	adds	r7, #48	; 0x30
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20013728 	.word	0x20013728
 800490c:	e0001004 	.word	0xe0001004

08004910 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800491c:	4b98      	ldr	r3, [pc, #608]	; (8004b80 <_SendPacket+0x270>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d010      	beq.n	8004946 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004924:	4b96      	ldr	r3, [pc, #600]	; (8004b80 <_SendPacket+0x270>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 812d 	beq.w	8004b88 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800492e:	4b94      	ldr	r3, [pc, #592]	; (8004b80 <_SendPacket+0x270>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d109      	bne.n	800494a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004936:	f7ff ff79 	bl	800482c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800493a:	4b91      	ldr	r3, [pc, #580]	; (8004b80 <_SendPacket+0x270>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b01      	cmp	r3, #1
 8004940:	f040 8124 	bne.w	8004b8c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004944:	e001      	b.n	800494a <_SendPacket+0x3a>
    goto Send;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <_SendPacket+0x3c>
Send:
 800494a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b1f      	cmp	r3, #31
 8004950:	d809      	bhi.n	8004966 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004952:	4b8b      	ldr	r3, [pc, #556]	; (8004b80 <_SendPacket+0x270>)
 8004954:	69da      	ldr	r2, [r3, #28]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	f040 8115 	bne.w	8004b90 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b17      	cmp	r3, #23
 800496a:	d807      	bhi.n	800497c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3b01      	subs	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	b2da      	uxtb	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	e0c4      	b.n	8004b06 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2b7f      	cmp	r3, #127	; 0x7f
 8004988:	d912      	bls.n	80049b0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	09da      	lsrs	r2, r3, #7
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3b01      	subs	r3, #1
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	3a01      	subs	r2, #1
 80049a2:	60fa      	str	r2, [r7, #12]
 80049a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	e006      	b.n	80049be <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b7e      	cmp	r3, #126	; 0x7e
 80049c2:	d807      	bhi.n	80049d4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e098      	b.n	8004b06 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049da:	d212      	bcs.n	8004a02 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	09da      	lsrs	r2, r3, #7
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	3a01      	subs	r2, #1
 80049f4:	60fa      	str	r2, [r7, #12]
 80049f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	e081      	b.n	8004b06 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a08:	d21d      	bcs.n	8004a46 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	0b9a      	lsrs	r2, r3, #14
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	09db      	lsrs	r3, r3, #7
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	3a01      	subs	r2, #1
 8004a24:	60fa      	str	r2, [r7, #12]
 8004a26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	3a01      	subs	r2, #1
 8004a38:	60fa      	str	r2, [r7, #12]
 8004a3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	e05f      	b.n	8004b06 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a4c:	d228      	bcs.n	8004aa0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	0d5a      	lsrs	r2, r3, #21
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0b9b      	lsrs	r3, r3, #14
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	3a01      	subs	r2, #1
 8004a68:	60fa      	str	r2, [r7, #12]
 8004a6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	09db      	lsrs	r3, r3, #7
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	3a01      	subs	r2, #1
 8004a7e:	60fa      	str	r2, [r7, #12]
 8004a80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	3a01      	subs	r2, #1
 8004a92:	60fa      	str	r2, [r7, #12]
 8004a94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	701a      	strb	r2, [r3, #0]
 8004a9e:	e032      	b.n	8004b06 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	0f1a      	lsrs	r2, r3, #28
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	0d5b      	lsrs	r3, r3, #21
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	3a01      	subs	r2, #1
 8004aba:	60fa      	str	r2, [r7, #12]
 8004abc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	0b9b      	lsrs	r3, r3, #14
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	3a01      	subs	r2, #1
 8004ad0:	60fa      	str	r2, [r7, #12]
 8004ad2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	09db      	lsrs	r3, r3, #7
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	3a01      	subs	r2, #1
 8004ae6:	60fa      	str	r2, [r7, #12]
 8004ae8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	3a01      	subs	r2, #1
 8004afa:	60fa      	str	r2, [r7, #12]
 8004afc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b06:	4b1f      	ldr	r3, [pc, #124]	; (8004b84 <_SendPacket+0x274>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <_SendPacket+0x270>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	623b      	str	r3, [r7, #32]
 8004b1e:	e00b      	b.n	8004b38 <_SendPacket+0x228>
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	1c59      	adds	r1, r3, #1
 8004b28:	6279      	str	r1, [r7, #36]	; 0x24
 8004b2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	09db      	lsrs	r3, r3, #7
 8004b36:	623b      	str	r3, [r7, #32]
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b3c:	d8f0      	bhi.n	8004b20 <_SendPacket+0x210>
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	627a      	str	r2, [r7, #36]	; 0x24
 8004b44:	6a3a      	ldr	r2, [r7, #32]
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <_SendPacket+0x270>)
 8004b50:	785b      	ldrb	r3, [r3, #1]
 8004b52:	4618      	mov	r0, r3
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	f7ff fc69 	bl	8004434 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004b62:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b6a:	4a05      	ldr	r2, [pc, #20]	; (8004b80 <_SendPacket+0x270>)
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	60d3      	str	r3, [r2, #12]
 8004b70:	e00f      	b.n	8004b92 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004b72:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <_SendPacket+0x270>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	3301      	adds	r3, #1
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	4b01      	ldr	r3, [pc, #4]	; (8004b80 <_SendPacket+0x270>)
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	e008      	b.n	8004b92 <_SendPacket+0x282>
 8004b80:	20013728 	.word	0x20013728
 8004b84:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004b88:	bf00      	nop
 8004b8a:	e002      	b.n	8004b92 <_SendPacket+0x282>
      goto SendDone;
 8004b8c:	bf00      	nop
 8004b8e:	e000      	b.n	8004b92 <_SendPacket+0x282>
      goto SendDone;
 8004b90:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004b92:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <_SendPacket+0x2d4>)
 8004b94:	7e1b      	ldrb	r3, [r3, #24]
 8004b96:	4619      	mov	r1, r3
 8004b98:	4a13      	ldr	r2, [pc, #76]	; (8004be8 <_SendPacket+0x2d8>)
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	440b      	add	r3, r1
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	4413      	add	r3, r2
 8004ba4:	336c      	adds	r3, #108	; 0x6c
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <_SendPacket+0x2d4>)
 8004baa:	7e1b      	ldrb	r3, [r3, #24]
 8004bac:	4618      	mov	r0, r3
 8004bae:	490e      	ldr	r1, [pc, #56]	; (8004be8 <_SendPacket+0x2d8>)
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	4403      	add	r3, r0
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	440b      	add	r3, r1
 8004bba:	3370      	adds	r3, #112	; 0x70
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d00b      	beq.n	8004bda <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004bc2:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <_SendPacket+0x2d4>)
 8004bc4:	789b      	ldrb	r3, [r3, #2]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d107      	bne.n	8004bda <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <_SendPacket+0x2d4>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004bd0:	f7ff fdbe 	bl	8004750 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004bd4:	4b03      	ldr	r3, [pc, #12]	; (8004be4 <_SendPacket+0x2d4>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004bda:	bf00      	nop
 8004bdc:	3728      	adds	r7, #40	; 0x28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20013728 	.word	0x20013728
 8004be8:	20012e68 	.word	0x20012e68

08004bec <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c00:	4917      	ldr	r1, [pc, #92]	; (8004c60 <SEGGER_SYSVIEW_Init+0x74>)
 8004c02:	4818      	ldr	r0, [pc, #96]	; (8004c64 <SEGGER_SYSVIEW_Init+0x78>)
 8004c04:	f7ff fc98 	bl	8004538 <SEGGER_RTT_AllocUpBuffer>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	4b16      	ldr	r3, [pc, #88]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c0e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004c10:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c12:	785a      	ldrb	r2, [r3, #1]
 8004c14:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c16:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c18:	4b13      	ldr	r3, [pc, #76]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c1a:	7e1b      	ldrb	r3, [r3, #24]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	2308      	movs	r3, #8
 8004c24:	4a11      	ldr	r2, [pc, #68]	; (8004c6c <SEGGER_SYSVIEW_Init+0x80>)
 8004c26:	490f      	ldr	r1, [pc, #60]	; (8004c64 <SEGGER_SYSVIEW_Init+0x78>)
 8004c28:	f7ff fd0a 	bl	8004640 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c32:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <SEGGER_SYSVIEW_Init+0x84>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a0c      	ldr	r2, [pc, #48]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c38:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c3a:	4a0b      	ldr	r2, [pc, #44]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004c40:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004c46:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004c4c:	4a06      	ldr	r2, [pc, #24]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c58:	bf00      	nop
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20013320 	.word	0x20013320
 8004c64:	08006030 	.word	0x08006030
 8004c68:	20013728 	.word	0x20013728
 8004c6c:	20013720 	.word	0x20013720
 8004c70:	e0001004 	.word	0xe0001004

08004c74 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004c7c:	4a04      	ldr	r2, [pc, #16]	; (8004c90 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6113      	str	r3, [r2, #16]
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	20013728 	.word	0x20013728

08004c94 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004ca0:	f04f 0120 	mov.w	r1, #32
 8004ca4:	f381 8811 	msr	BASEPRI, r1
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	4808      	ldr	r0, [pc, #32]	; (8004ccc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004cac:	f7ff fd44 	bl	8004738 <_PreparePacket>
 8004cb0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	68b8      	ldr	r0, [r7, #8]
 8004cb8:	f7ff fe2a 	bl	8004910 <_SendPacket>
  RECORD_END();
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f383 8811 	msr	BASEPRI, r3
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20013758 	.word	0x20013758

08004cd0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cda:	f3ef 8311 	mrs	r3, BASEPRI
 8004cde:	f04f 0120 	mov.w	r1, #32
 8004ce2:	f381 8811 	msr	BASEPRI, r1
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	4816      	ldr	r0, [pc, #88]	; (8004d44 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004cea:	f7ff fd25 	bl	8004738 <_PreparePacket>
 8004cee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	e00b      	b.n	8004d16 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	1c59      	adds	r1, r3, #1
 8004d06:	61f9      	str	r1, [r7, #28]
 8004d08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	09db      	lsrs	r3, r3, #7
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b7f      	cmp	r3, #127	; 0x7f
 8004d1a:	d8f0      	bhi.n	8004cfe <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	61fa      	str	r2, [r7, #28]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	68f9      	ldr	r1, [r7, #12]
 8004d30:	6938      	ldr	r0, [r7, #16]
 8004d32:	f7ff fded 	bl	8004910 <_SendPacket>
  RECORD_END();
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f383 8811 	msr	BASEPRI, r3
}
 8004d3c:	bf00      	nop
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20013758 	.word	0x20013758

08004d48 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08c      	sub	sp, #48	; 0x30
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d54:	f3ef 8311 	mrs	r3, BASEPRI
 8004d58:	f04f 0120 	mov.w	r1, #32
 8004d5c:	f381 8811 	msr	BASEPRI, r1
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	4825      	ldr	r0, [pc, #148]	; (8004df8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d64:	f7ff fce8 	bl	8004738 <_PreparePacket>
 8004d68:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d76:	e00b      	b.n	8004d90 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	1c59      	adds	r1, r3, #1
 8004d80:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	09db      	lsrs	r3, r3, #7
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	2b7f      	cmp	r3, #127	; 0x7f
 8004d94:	d8f0      	bhi.n	8004d78 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	623b      	str	r3, [r7, #32]
 8004dae:	e00b      	b.n	8004dc8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	1c59      	adds	r1, r3, #1
 8004db8:	6279      	str	r1, [r7, #36]	; 0x24
 8004dba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	09db      	lsrs	r3, r3, #7
 8004dc6:	623b      	str	r3, [r7, #32]
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	2b7f      	cmp	r3, #127	; 0x7f
 8004dcc:	d8f0      	bhi.n	8004db0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	627a      	str	r2, [r7, #36]	; 0x24
 8004dd4:	6a3a      	ldr	r2, [r7, #32]
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	6979      	ldr	r1, [r7, #20]
 8004de2:	69b8      	ldr	r0, [r7, #24]
 8004de4:	f7ff fd94 	bl	8004910 <_SendPacket>
  RECORD_END();
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f383 8811 	msr	BASEPRI, r3
}
 8004dee:	bf00      	nop
 8004df0:	3730      	adds	r7, #48	; 0x30
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20013758 	.word	0x20013758

08004dfc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08e      	sub	sp, #56	; 0x38
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e0e:	f04f 0120 	mov.w	r1, #32
 8004e12:	f381 8811 	msr	BASEPRI, r1
 8004e16:	61fb      	str	r3, [r7, #28]
 8004e18:	4832      	ldr	r0, [pc, #200]	; (8004ee4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004e1a:	f7ff fc8d 	bl	8004738 <_PreparePacket>
 8004e1e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	637b      	str	r3, [r7, #52]	; 0x34
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e2c:	e00b      	b.n	8004e46 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e34:	1c59      	adds	r1, r3, #1
 8004e36:	6379      	str	r1, [r7, #52]	; 0x34
 8004e38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	09db      	lsrs	r3, r3, #7
 8004e44:	633b      	str	r3, [r7, #48]	; 0x30
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	2b7f      	cmp	r3, #127	; 0x7f
 8004e4a:	d8f0      	bhi.n	8004e2e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	637a      	str	r2, [r7, #52]	; 0x34
 8004e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e64:	e00b      	b.n	8004e7e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	1c59      	adds	r1, r3, #1
 8004e6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	09db      	lsrs	r3, r3, #7
 8004e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	2b7f      	cmp	r3, #127	; 0x7f
 8004e82:	d8f0      	bhi.n	8004e66 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	623b      	str	r3, [r7, #32]
 8004e9c:	e00b      	b.n	8004eb6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	1c59      	adds	r1, r3, #1
 8004ea6:	6279      	str	r1, [r7, #36]	; 0x24
 8004ea8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	09db      	lsrs	r3, r3, #7
 8004eb4:	623b      	str	r3, [r7, #32]
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8004eba:	d8f0      	bhi.n	8004e9e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	627a      	str	r2, [r7, #36]	; 0x24
 8004ec2:	6a3a      	ldr	r2, [r7, #32]
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	6979      	ldr	r1, [r7, #20]
 8004ed0:	69b8      	ldr	r0, [r7, #24]
 8004ed2:	f7ff fd1d 	bl	8004910 <_SendPacket>
  RECORD_END();
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f383 8811 	msr	BASEPRI, r3
}
 8004edc:	bf00      	nop
 8004ede:	3738      	adds	r7, #56	; 0x38
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20013758 	.word	0x20013758

08004ee8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b090      	sub	sp, #64	; 0x40
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8004efa:	f04f 0120 	mov.w	r1, #32
 8004efe:	f381 8811 	msr	BASEPRI, r1
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	4840      	ldr	r0, [pc, #256]	; (8005008 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004f06:	f7ff fc17 	bl	8004738 <_PreparePacket>
 8004f0a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f18:	e00b      	b.n	8004f32 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f20:	1c59      	adds	r1, r3, #1
 8004f22:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004f24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2e:	09db      	lsrs	r3, r3, #7
 8004f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f34:	2b7f      	cmp	r3, #127	; 0x7f
 8004f36:	d8f0      	bhi.n	8004f1a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]
 8004f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f50:	e00b      	b.n	8004f6a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f58:	1c59      	adds	r1, r3, #1
 8004f5a:	6379      	str	r1, [r7, #52]	; 0x34
 8004f5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	09db      	lsrs	r3, r3, #7
 8004f68:	633b      	str	r3, [r7, #48]	; 0x30
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f6e:	d8f0      	bhi.n	8004f52 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	637a      	str	r2, [r7, #52]	; 0x34
 8004f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	701a      	strb	r2, [r3, #0]
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f88:	e00b      	b.n	8004fa2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	1c59      	adds	r1, r3, #1
 8004f92:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	09db      	lsrs	r3, r3, #7
 8004fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa6:	d8f0      	bhi.n	8004f8a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
 8004fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fbe:	623b      	str	r3, [r7, #32]
 8004fc0:	e00b      	b.n	8004fda <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	1c59      	adds	r1, r3, #1
 8004fca:	6279      	str	r1, [r7, #36]	; 0x24
 8004fcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	09db      	lsrs	r3, r3, #7
 8004fd8:	623b      	str	r3, [r7, #32]
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8004fde:	d8f0      	bhi.n	8004fc2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	627a      	str	r2, [r7, #36]	; 0x24
 8004fe6:	6a3a      	ldr	r2, [r7, #32]
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	6979      	ldr	r1, [r7, #20]
 8004ff4:	69b8      	ldr	r0, [r7, #24]
 8004ff6:	f7ff fc8b 	bl	8004910 <_SendPacket>
  RECORD_END();
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f383 8811 	msr	BASEPRI, r3
}
 8005000:	bf00      	nop
 8005002:	3740      	adds	r7, #64	; 0x40
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20013758 	.word	0x20013758

0800500c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b08c      	sub	sp, #48	; 0x30
 8005010:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005012:	4b58      	ldr	r3, [pc, #352]	; (8005174 <SEGGER_SYSVIEW_Start+0x168>)
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005018:	f3ef 8311 	mrs	r3, BASEPRI
 800501c:	f04f 0120 	mov.w	r1, #32
 8005020:	f381 8811 	msr	BASEPRI, r1
 8005024:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005026:	4b53      	ldr	r3, [pc, #332]	; (8005174 <SEGGER_SYSVIEW_Start+0x168>)
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	220a      	movs	r2, #10
 800502c:	4952      	ldr	r1, [pc, #328]	; (8005178 <SEGGER_SYSVIEW_Start+0x16c>)
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fa00 	bl	8004434 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800503a:	200a      	movs	r0, #10
 800503c:	f7ff fe2a 	bl	8004c94 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005040:	f3ef 8311 	mrs	r3, BASEPRI
 8005044:	f04f 0120 	mov.w	r1, #32
 8005048:	f381 8811 	msr	BASEPRI, r1
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	484b      	ldr	r0, [pc, #300]	; (800517c <SEGGER_SYSVIEW_Start+0x170>)
 8005050:	f7ff fb72 	bl	8004738 <_PreparePacket>
 8005054:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800505e:	4b45      	ldr	r3, [pc, #276]	; (8005174 <SEGGER_SYSVIEW_Start+0x168>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
 8005064:	e00b      	b.n	800507e <SEGGER_SYSVIEW_Start+0x72>
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	b2da      	uxtb	r2, r3
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	1c59      	adds	r1, r3, #1
 800506e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005070:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	09db      	lsrs	r3, r3, #7
 800507c:	62bb      	str	r3, [r7, #40]	; 0x28
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	2b7f      	cmp	r3, #127	; 0x7f
 8005082:	d8f0      	bhi.n	8005066 <SEGGER_SYSVIEW_Start+0x5a>
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	62fa      	str	r2, [r7, #44]	; 0x2c
 800508a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005092:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
 8005098:	4b36      	ldr	r3, [pc, #216]	; (8005174 <SEGGER_SYSVIEW_Start+0x168>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	623b      	str	r3, [r7, #32]
 800509e:	e00b      	b.n	80050b8 <SEGGER_SYSVIEW_Start+0xac>
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	1c59      	adds	r1, r3, #1
 80050a8:	6279      	str	r1, [r7, #36]	; 0x24
 80050aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	09db      	lsrs	r3, r3, #7
 80050b6:	623b      	str	r3, [r7, #32]
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	2b7f      	cmp	r3, #127	; 0x7f
 80050bc:	d8f0      	bhi.n	80050a0 <SEGGER_SYSVIEW_Start+0x94>
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	627a      	str	r2, [r7, #36]	; 0x24
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	4b28      	ldr	r3, [pc, #160]	; (8005174 <SEGGER_SYSVIEW_Start+0x168>)
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	e00b      	b.n	80050f2 <SEGGER_SYSVIEW_Start+0xe6>
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	1c59      	adds	r1, r3, #1
 80050e2:	61f9      	str	r1, [r7, #28]
 80050e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	09db      	lsrs	r3, r3, #7
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b7f      	cmp	r3, #127	; 0x7f
 80050f6:	d8f0      	bhi.n	80050da <SEGGER_SYSVIEW_Start+0xce>
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	61fa      	str	r2, [r7, #28]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	2300      	movs	r3, #0
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	e00b      	b.n	800512a <SEGGER_SYSVIEW_Start+0x11e>
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	1c59      	adds	r1, r3, #1
 800511a:	6179      	str	r1, [r7, #20]
 800511c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	09db      	lsrs	r3, r3, #7
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b7f      	cmp	r3, #127	; 0x7f
 800512e:	d8f0      	bhi.n	8005112 <SEGGER_SYSVIEW_Start+0x106>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	617a      	str	r2, [r7, #20]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005140:	2218      	movs	r2, #24
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff fbe3 	bl	8004910 <_SendPacket>
      RECORD_END();
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005150:	4b08      	ldr	r3, [pc, #32]	; (8005174 <SEGGER_SYSVIEW_Start+0x168>)
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <SEGGER_SYSVIEW_Start+0x168>)
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800515e:	f000 f9eb 	bl	8005538 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005162:	f000 f9b1 	bl	80054c8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005166:	f000 fc8d 	bl	8005a84 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800516a:	bf00      	nop
 800516c:	3730      	adds	r7, #48	; 0x30
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20013728 	.word	0x20013728
 8005178:	080060bc 	.word	0x080060bc
 800517c:	20013758 	.word	0x20013758

08005180 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005186:	f3ef 8311 	mrs	r3, BASEPRI
 800518a:	f04f 0120 	mov.w	r1, #32
 800518e:	f381 8811 	msr	BASEPRI, r1
 8005192:	607b      	str	r3, [r7, #4]
 8005194:	480b      	ldr	r0, [pc, #44]	; (80051c4 <SEGGER_SYSVIEW_Stop+0x44>)
 8005196:	f7ff facf 	bl	8004738 <_PreparePacket>
 800519a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80051a4:	220b      	movs	r2, #11
 80051a6:	6839      	ldr	r1, [r7, #0]
 80051a8:	6838      	ldr	r0, [r7, #0]
 80051aa:	f7ff fbb1 	bl	8004910 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80051ae:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <SEGGER_SYSVIEW_Stop+0x48>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f383 8811 	msr	BASEPRI, r3
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20013758 	.word	0x20013758
 80051c8:	20013728 	.word	0x20013728

080051cc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08c      	sub	sp, #48	; 0x30
 80051d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051d2:	f3ef 8311 	mrs	r3, BASEPRI
 80051d6:	f04f 0120 	mov.w	r1, #32
 80051da:	f381 8811 	msr	BASEPRI, r1
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	4845      	ldr	r0, [pc, #276]	; (80052f8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80051e2:	f7ff faa9 	bl	8004738 <_PreparePacket>
 80051e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051f0:	4b42      	ldr	r3, [pc, #264]	; (80052fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f6:	e00b      	b.n	8005210 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	1c59      	adds	r1, r3, #1
 8005200:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005202:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	09db      	lsrs	r3, r3, #7
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	2b7f      	cmp	r3, #127	; 0x7f
 8005214:	d8f0      	bhi.n	80051f8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800521c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
 800522a:	4b34      	ldr	r3, [pc, #208]	; (80052fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	623b      	str	r3, [r7, #32]
 8005230:	e00b      	b.n	800524a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	b2da      	uxtb	r2, r3
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	1c59      	adds	r1, r3, #1
 800523a:	6279      	str	r1, [r7, #36]	; 0x24
 800523c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	09db      	lsrs	r3, r3, #7
 8005248:	623b      	str	r3, [r7, #32]
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	2b7f      	cmp	r3, #127	; 0x7f
 800524e:	d8f0      	bhi.n	8005232 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	627a      	str	r2, [r7, #36]	; 0x24
 8005256:	6a3a      	ldr	r2, [r7, #32]
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	61fb      	str	r3, [r7, #28]
 8005264:	4b25      	ldr	r3, [pc, #148]	; (80052fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	e00b      	b.n	8005284 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	b2da      	uxtb	r2, r3
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	1c59      	adds	r1, r3, #1
 8005274:	61f9      	str	r1, [r7, #28]
 8005276:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	09db      	lsrs	r3, r3, #7
 8005282:	61bb      	str	r3, [r7, #24]
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b7f      	cmp	r3, #127	; 0x7f
 8005288:	d8f0      	bhi.n	800526c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	61fa      	str	r2, [r7, #28]
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	2300      	movs	r3, #0
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	e00b      	b.n	80052bc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	1c59      	adds	r1, r3, #1
 80052ac:	6179      	str	r1, [r7, #20]
 80052ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	09db      	lsrs	r3, r3, #7
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2b7f      	cmp	r3, #127	; 0x7f
 80052c0:	d8f0      	bhi.n	80052a4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	617a      	str	r2, [r7, #20]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80052d2:	2218      	movs	r2, #24
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	68b8      	ldr	r0, [r7, #8]
 80052d8:	f7ff fb1a 	bl	8004910 <_SendPacket>
  RECORD_END();
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80052ea:	4b04      	ldr	r3, [pc, #16]	; (80052fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	4798      	blx	r3
  }
}
 80052f0:	bf00      	nop
 80052f2:	3730      	adds	r7, #48	; 0x30
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	20013758 	.word	0x20013758
 80052fc:	20013728 	.word	0x20013728

08005300 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005300:	b580      	push	{r7, lr}
 8005302:	b092      	sub	sp, #72	; 0x48
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005308:	f3ef 8311 	mrs	r3, BASEPRI
 800530c:	f04f 0120 	mov.w	r1, #32
 8005310:	f381 8811 	msr	BASEPRI, r1
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	486a      	ldr	r0, [pc, #424]	; (80054c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005318:	f7ff fa0e 	bl	8004738 <_PreparePacket>
 800531c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	647b      	str	r3, [r7, #68]	; 0x44
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b66      	ldr	r3, [pc, #408]	; (80054c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	643b      	str	r3, [r7, #64]	; 0x40
 8005332:	e00b      	b.n	800534c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005336:	b2da      	uxtb	r2, r3
 8005338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533a:	1c59      	adds	r1, r3, #1
 800533c:	6479      	str	r1, [r7, #68]	; 0x44
 800533e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]
 8005346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005348:	09db      	lsrs	r3, r3, #7
 800534a:	643b      	str	r3, [r7, #64]	; 0x40
 800534c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800534e:	2b7f      	cmp	r3, #127	; 0x7f
 8005350:	d8f0      	bhi.n	8005334 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	647a      	str	r2, [r7, #68]	; 0x44
 8005358:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005360:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	63bb      	str	r3, [r7, #56]	; 0x38
 800536c:	e00b      	b.n	8005386 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	b2da      	uxtb	r2, r3
 8005372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005374:	1c59      	adds	r1, r3, #1
 8005376:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]
 8005380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005382:	09db      	lsrs	r3, r3, #7
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	2b7f      	cmp	r3, #127	; 0x7f
 800538a:	d8f0      	bhi.n	800536e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800538c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	4619      	mov	r1, r3
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff f997 	bl	80046d8 <_EncodeStr>
 80053aa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80053ac:	2209      	movs	r2, #9
 80053ae:	68f9      	ldr	r1, [r7, #12]
 80053b0:	6938      	ldr	r0, [r7, #16]
 80053b2:	f7ff faad 	bl	8004910 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	637b      	str	r3, [r7, #52]	; 0x34
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b40      	ldr	r3, [pc, #256]	; (80054c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	633b      	str	r3, [r7, #48]	; 0x30
 80053ca:	e00b      	b.n	80053e4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d2:	1c59      	adds	r1, r3, #1
 80053d4:	6379      	str	r1, [r7, #52]	; 0x34
 80053d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	09db      	lsrs	r3, r3, #7
 80053e2:	633b      	str	r3, [r7, #48]	; 0x30
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	2b7f      	cmp	r3, #127	; 0x7f
 80053e8:	d8f0      	bhi.n	80053cc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80053ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	637a      	str	r2, [r7, #52]	; 0x34
 80053f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
 8005404:	e00b      	b.n	800541e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	b2da      	uxtb	r2, r3
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	1c59      	adds	r1, r3, #1
 800540e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005410:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	09db      	lsrs	r3, r3, #7
 800541c:	62bb      	str	r3, [r7, #40]	; 0x28
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	2b7f      	cmp	r3, #127	; 0x7f
 8005422:	d8f0      	bhi.n	8005406 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	62fa      	str	r2, [r7, #44]	; 0x2c
 800542a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	701a      	strb	r2, [r3, #0]
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	623b      	str	r3, [r7, #32]
 800543e:	e00b      	b.n	8005458 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	b2da      	uxtb	r2, r3
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	1c59      	adds	r1, r3, #1
 8005448:	6279      	str	r1, [r7, #36]	; 0x24
 800544a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	09db      	lsrs	r3, r3, #7
 8005456:	623b      	str	r3, [r7, #32]
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	2b7f      	cmp	r3, #127	; 0x7f
 800545c:	d8f0      	bhi.n	8005440 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	627a      	str	r2, [r7, #36]	; 0x24
 8005464:	6a3a      	ldr	r2, [r7, #32]
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	61fb      	str	r3, [r7, #28]
 8005472:	2300      	movs	r3, #0
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	e00b      	b.n	8005490 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	b2da      	uxtb	r2, r3
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	1c59      	adds	r1, r3, #1
 8005480:	61f9      	str	r1, [r7, #28]
 8005482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	09db      	lsrs	r3, r3, #7
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b7f      	cmp	r3, #127	; 0x7f
 8005494:	d8f0      	bhi.n	8005478 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	61fa      	str	r2, [r7, #28]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80054a6:	2215      	movs	r2, #21
 80054a8:	68f9      	ldr	r1, [r7, #12]
 80054aa:	6938      	ldr	r0, [r7, #16]
 80054ac:	f7ff fa30 	bl	8004910 <_SendPacket>
  RECORD_END();
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f383 8811 	msr	BASEPRI, r3
}
 80054b6:	bf00      	nop
 80054b8:	3748      	adds	r7, #72	; 0x48
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20013758 	.word	0x20013758
 80054c4:	20013728 	.word	0x20013728

080054c8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80054cc:	4b07      	ldr	r3, [pc, #28]	; (80054ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80054de:	4b03      	ldr	r3, [pc, #12]	; (80054ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4798      	blx	r3
  }
}
 80054e6:	bf00      	nop
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20013728 	.word	0x20013728

080054f0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054f8:	f3ef 8311 	mrs	r3, BASEPRI
 80054fc:	f04f 0120 	mov.w	r1, #32
 8005500:	f381 8811 	msr	BASEPRI, r1
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	480b      	ldr	r0, [pc, #44]	; (8005534 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005508:	f7ff f916 	bl	8004738 <_PreparePacket>
 800550c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800550e:	2280      	movs	r2, #128	; 0x80
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	6938      	ldr	r0, [r7, #16]
 8005514:	f7ff f8e0 	bl	80046d8 <_EncodeStr>
 8005518:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800551a:	220e      	movs	r2, #14
 800551c:	68f9      	ldr	r1, [r7, #12]
 800551e:	6938      	ldr	r0, [r7, #16]
 8005520:	f7ff f9f6 	bl	8004910 <_SendPacket>
  RECORD_END();
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f383 8811 	msr	BASEPRI, r3
}
 800552a:	bf00      	nop
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20013758 	.word	0x20013758

08005538 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005538:	b590      	push	{r4, r7, lr}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800553e:	4b15      	ldr	r3, [pc, #84]	; (8005594 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d01a      	beq.n	800557c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d015      	beq.n	800557c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005550:	4b10      	ldr	r3, [pc, #64]	; (8005594 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4798      	blx	r3
 8005558:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800555c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800555e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	000a      	movs	r2, r1
 800556c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800556e:	4613      	mov	r3, r2
 8005570:	461a      	mov	r2, r3
 8005572:	4621      	mov	r1, r4
 8005574:	200d      	movs	r0, #13
 8005576:	f7ff fbe7 	bl	8004d48 <SEGGER_SYSVIEW_RecordU32x2>
 800557a:	e006      	b.n	800558a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4619      	mov	r1, r3
 8005582:	200c      	movs	r0, #12
 8005584:	f7ff fba4 	bl	8004cd0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005588:	bf00      	nop
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	bd90      	pop	{r4, r7, pc}
 8005592:	bf00      	nop
 8005594:	20013728 	.word	0x20013728
 8005598:	e0001004 	.word	0xe0001004

0800559c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055a2:	f3ef 8311 	mrs	r3, BASEPRI
 80055a6:	f04f 0120 	mov.w	r1, #32
 80055aa:	f381 8811 	msr	BASEPRI, r1
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	4819      	ldr	r0, [pc, #100]	; (8005618 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80055b2:	f7ff f8c1 	bl	8004738 <_PreparePacket>
 80055b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80055bc:	4b17      	ldr	r3, [pc, #92]	; (800561c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	e00b      	b.n	80055e8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	1c59      	adds	r1, r3, #1
 80055d8:	6179      	str	r1, [r7, #20]
 80055da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	09db      	lsrs	r3, r3, #7
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b7f      	cmp	r3, #127	; 0x7f
 80055ec:	d8f0      	bhi.n	80055d0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	617a      	str	r2, [r7, #20]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80055fe:	2202      	movs	r2, #2
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	68b8      	ldr	r0, [r7, #8]
 8005604:	f7ff f984 	bl	8004910 <_SendPacket>
  RECORD_END();
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f383 8811 	msr	BASEPRI, r3
}
 800560e:	bf00      	nop
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20013758 	.word	0x20013758
 800561c:	e000ed04 	.word	0xe000ed04

08005620 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005626:	f3ef 8311 	mrs	r3, BASEPRI
 800562a:	f04f 0120 	mov.w	r1, #32
 800562e:	f381 8811 	msr	BASEPRI, r1
 8005632:	607b      	str	r3, [r7, #4]
 8005634:	4807      	ldr	r0, [pc, #28]	; (8005654 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005636:	f7ff f87f 	bl	8004738 <_PreparePacket>
 800563a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800563c:	2203      	movs	r2, #3
 800563e:	6839      	ldr	r1, [r7, #0]
 8005640:	6838      	ldr	r0, [r7, #0]
 8005642:	f7ff f965 	bl	8004910 <_SendPacket>
  RECORD_END();
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f383 8811 	msr	BASEPRI, r3
}
 800564c:	bf00      	nop
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	20013758 	.word	0x20013758

08005658 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800565e:	f3ef 8311 	mrs	r3, BASEPRI
 8005662:	f04f 0120 	mov.w	r1, #32
 8005666:	f381 8811 	msr	BASEPRI, r1
 800566a:	607b      	str	r3, [r7, #4]
 800566c:	4807      	ldr	r0, [pc, #28]	; (800568c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800566e:	f7ff f863 	bl	8004738 <_PreparePacket>
 8005672:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005674:	2212      	movs	r2, #18
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6838      	ldr	r0, [r7, #0]
 800567a:	f7ff f949 	bl	8004910 <_SendPacket>
  RECORD_END();
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f383 8811 	msr	BASEPRI, r3
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20013758 	.word	0x20013758

08005690 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005696:	f3ef 8311 	mrs	r3, BASEPRI
 800569a:	f04f 0120 	mov.w	r1, #32
 800569e:	f381 8811 	msr	BASEPRI, r1
 80056a2:	607b      	str	r3, [r7, #4]
 80056a4:	4807      	ldr	r0, [pc, #28]	; (80056c4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80056a6:	f7ff f847 	bl	8004738 <_PreparePacket>
 80056aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80056ac:	2211      	movs	r2, #17
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	6838      	ldr	r0, [r7, #0]
 80056b2:	f7ff f92d 	bl	8004910 <_SendPacket>
  RECORD_END();
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f383 8811 	msr	BASEPRI, r3
}
 80056bc:	bf00      	nop
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20013758 	.word	0x20013758

080056c8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056d0:	f3ef 8311 	mrs	r3, BASEPRI
 80056d4:	f04f 0120 	mov.w	r1, #32
 80056d8:	f381 8811 	msr	BASEPRI, r1
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	4819      	ldr	r0, [pc, #100]	; (8005744 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80056e0:	f7ff f82a 	bl	8004738 <_PreparePacket>
 80056e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056ea:	4b17      	ldr	r3, [pc, #92]	; (8005748 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	e00b      	b.n	8005716 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	1c59      	adds	r1, r3, #1
 8005706:	61f9      	str	r1, [r7, #28]
 8005708:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	09db      	lsrs	r3, r3, #7
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2b7f      	cmp	r3, #127	; 0x7f
 800571a:	d8f0      	bhi.n	80056fe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	61fa      	str	r2, [r7, #28]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800572c:	2208      	movs	r2, #8
 800572e:	68f9      	ldr	r1, [r7, #12]
 8005730:	6938      	ldr	r0, [r7, #16]
 8005732:	f7ff f8ed 	bl	8004910 <_SendPacket>
  RECORD_END();
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f383 8811 	msr	BASEPRI, r3
}
 800573c:	bf00      	nop
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20013758 	.word	0x20013758
 8005748:	20013728 	.word	0x20013728

0800574c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005754:	f3ef 8311 	mrs	r3, BASEPRI
 8005758:	f04f 0120 	mov.w	r1, #32
 800575c:	f381 8811 	msr	BASEPRI, r1
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	4819      	ldr	r0, [pc, #100]	; (80057c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005764:	f7fe ffe8 	bl	8004738 <_PreparePacket>
 8005768:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800576e:	4b17      	ldr	r3, [pc, #92]	; (80057cc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	61bb      	str	r3, [r7, #24]
 8005780:	e00b      	b.n	800579a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	b2da      	uxtb	r2, r3
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	1c59      	adds	r1, r3, #1
 800578a:	61f9      	str	r1, [r7, #28]
 800578c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	701a      	strb	r2, [r3, #0]
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	09db      	lsrs	r3, r3, #7
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	2b7f      	cmp	r3, #127	; 0x7f
 800579e:	d8f0      	bhi.n	8005782 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	61fa      	str	r2, [r7, #28]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80057b0:	2204      	movs	r2, #4
 80057b2:	68f9      	ldr	r1, [r7, #12]
 80057b4:	6938      	ldr	r0, [r7, #16]
 80057b6:	f7ff f8ab 	bl	8004910 <_SendPacket>
  RECORD_END();
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f383 8811 	msr	BASEPRI, r3
}
 80057c0:	bf00      	nop
 80057c2:	3720      	adds	r7, #32
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	20013758 	.word	0x20013758
 80057cc:	20013728 	.word	0x20013728

080057d0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057d8:	f3ef 8311 	mrs	r3, BASEPRI
 80057dc:	f04f 0120 	mov.w	r1, #32
 80057e0:	f381 8811 	msr	BASEPRI, r1
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	4819      	ldr	r0, [pc, #100]	; (800584c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80057e8:	f7fe ffa6 	bl	8004738 <_PreparePacket>
 80057ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057f2:	4b17      	ldr	r3, [pc, #92]	; (8005850 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	61fb      	str	r3, [r7, #28]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	e00b      	b.n	800581e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	b2da      	uxtb	r2, r3
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	1c59      	adds	r1, r3, #1
 800580e:	61f9      	str	r1, [r7, #28]
 8005810:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	09db      	lsrs	r3, r3, #7
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b7f      	cmp	r3, #127	; 0x7f
 8005822:	d8f0      	bhi.n	8005806 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	61fa      	str	r2, [r7, #28]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005834:	2206      	movs	r2, #6
 8005836:	68f9      	ldr	r1, [r7, #12]
 8005838:	6938      	ldr	r0, [r7, #16]
 800583a:	f7ff f869 	bl	8004910 <_SendPacket>
  RECORD_END();
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f383 8811 	msr	BASEPRI, r3
}
 8005844:	bf00      	nop
 8005846:	3720      	adds	r7, #32
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20013758 	.word	0x20013758
 8005850:	20013728 	.word	0x20013728

08005854 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	; 0x28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800585e:	f3ef 8311 	mrs	r3, BASEPRI
 8005862:	f04f 0120 	mov.w	r1, #32
 8005866:	f381 8811 	msr	BASEPRI, r1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	4827      	ldr	r0, [pc, #156]	; (800590c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800586e:	f7fe ff63 	bl	8004738 <_PreparePacket>
 8005872:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005878:	4b25      	ldr	r3, [pc, #148]	; (8005910 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	623b      	str	r3, [r7, #32]
 800588a:	e00b      	b.n	80058a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	b2da      	uxtb	r2, r3
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	1c59      	adds	r1, r3, #1
 8005894:	6279      	str	r1, [r7, #36]	; 0x24
 8005896:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	09db      	lsrs	r3, r3, #7
 80058a2:	623b      	str	r3, [r7, #32]
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	2b7f      	cmp	r3, #127	; 0x7f
 80058a8:	d8f0      	bhi.n	800588c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	627a      	str	r2, [r7, #36]	; 0x24
 80058b0:	6a3a      	ldr	r2, [r7, #32]
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	61fb      	str	r3, [r7, #28]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	e00b      	b.n	80058dc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	1c59      	adds	r1, r3, #1
 80058cc:	61f9      	str	r1, [r7, #28]
 80058ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	09db      	lsrs	r3, r3, #7
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	2b7f      	cmp	r3, #127	; 0x7f
 80058e0:	d8f0      	bhi.n	80058c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	61fa      	str	r2, [r7, #28]
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80058f2:	2207      	movs	r2, #7
 80058f4:	68f9      	ldr	r1, [r7, #12]
 80058f6:	6938      	ldr	r0, [r7, #16]
 80058f8:	f7ff f80a 	bl	8004910 <_SendPacket>
  RECORD_END();
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f383 8811 	msr	BASEPRI, r3
}
 8005902:	bf00      	nop
 8005904:	3728      	adds	r7, #40	; 0x28
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20013758 	.word	0x20013758
 8005910:	20013728 	.word	0x20013728

08005914 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800591c:	4b04      	ldr	r3, [pc, #16]	; (8005930 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	1ad3      	subs	r3, r2, r3
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	20013728 	.word	0x20013728

08005934 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005934:	b580      	push	{r7, lr}
 8005936:	b08c      	sub	sp, #48	; 0x30
 8005938:	af00      	add	r7, sp, #0
 800593a:	4603      	mov	r3, r0
 800593c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800593e:	4b40      	ldr	r3, [pc, #256]	; (8005a40 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d077      	beq.n	8005a36 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005946:	4b3e      	ldr	r3, [pc, #248]	; (8005a40 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800594c:	2300      	movs	r3, #0
 800594e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005950:	e008      	b.n	8005964 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d007      	beq.n	800596e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005960:	3301      	adds	r3, #1
 8005962:	62bb      	str	r3, [r7, #40]	; 0x28
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005968:	429a      	cmp	r2, r3
 800596a:	d3f2      	bcc.n	8005952 <SEGGER_SYSVIEW_SendModule+0x1e>
 800596c:	e000      	b.n	8005970 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800596e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d055      	beq.n	8005a22 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005976:	f3ef 8311 	mrs	r3, BASEPRI
 800597a:	f04f 0120 	mov.w	r1, #32
 800597e:	f381 8811 	msr	BASEPRI, r1
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	482f      	ldr	r0, [pc, #188]	; (8005a44 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005986:	f7fe fed7 	bl	8004738 <_PreparePacket>
 800598a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	623b      	str	r3, [r7, #32]
 8005998:	e00b      	b.n	80059b2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	b2da      	uxtb	r2, r3
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	1c59      	adds	r1, r3, #1
 80059a2:	6279      	str	r1, [r7, #36]	; 0x24
 80059a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	701a      	strb	r2, [r3, #0]
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	09db      	lsrs	r3, r3, #7
 80059b0:	623b      	str	r3, [r7, #32]
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	2b7f      	cmp	r3, #127	; 0x7f
 80059b6:	d8f0      	bhi.n	800599a <SEGGER_SYSVIEW_SendModule+0x66>
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	627a      	str	r2, [r7, #36]	; 0x24
 80059be:	6a3a      	ldr	r2, [r7, #32]
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	61bb      	str	r3, [r7, #24]
 80059d2:	e00b      	b.n	80059ec <SEGGER_SYSVIEW_SendModule+0xb8>
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	1c59      	adds	r1, r3, #1
 80059dc:	61f9      	str	r1, [r7, #28]
 80059de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	09db      	lsrs	r3, r3, #7
 80059ea:	61bb      	str	r3, [r7, #24]
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	2b7f      	cmp	r3, #127	; 0x7f
 80059f0:	d8f0      	bhi.n	80059d4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	61fa      	str	r2, [r7, #28]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2280      	movs	r2, #128	; 0x80
 8005a08:	4619      	mov	r1, r3
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f7fe fe64 	bl	80046d8 <_EncodeStr>
 8005a10:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005a12:	2216      	movs	r2, #22
 8005a14:	68f9      	ldr	r1, [r7, #12]
 8005a16:	6938      	ldr	r0, [r7, #16]
 8005a18:	f7fe ff7a 	bl	8004910 <_SendPacket>
      RECORD_END();
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d006      	beq.n	8005a36 <SEGGER_SYSVIEW_SendModule+0x102>
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	4798      	blx	r3
    }
  }
}
 8005a36:	bf00      	nop
 8005a38:	3730      	adds	r7, #48	; 0x30
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20013750 	.word	0x20013750
 8005a44:	20013758 	.word	0x20013758

08005a48 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005a4e:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00f      	beq.n	8005a76 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1f2      	bne.n	8005a5c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20013750 	.word	0x20013750

08005a84 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005a8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a8e:	f04f 0120 	mov.w	r1, #32
 8005a92:	f381 8811 	msr	BASEPRI, r1
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	4817      	ldr	r0, [pc, #92]	; (8005af8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005a9a:	f7fe fe4d 	bl	8004738 <_PreparePacket>
 8005a9e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	4b14      	ldr	r3, [pc, #80]	; (8005afc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	e00b      	b.n	8005ac8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1c59      	adds	r1, r3, #1
 8005ab8:	6179      	str	r1, [r7, #20]
 8005aba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	09db      	lsrs	r3, r3, #7
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	2b7f      	cmp	r3, #127	; 0x7f
 8005acc:	d8f0      	bhi.n	8005ab0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	617a      	str	r2, [r7, #20]
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005ade:	221b      	movs	r2, #27
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	68b8      	ldr	r0, [r7, #8]
 8005ae4:	f7fe ff14 	bl	8004910 <_SendPacket>
  RECORD_END();
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f383 8811 	msr	BASEPRI, r3
}
 8005aee:	bf00      	nop
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20013758 	.word	0x20013758
 8005afc:	20013754 	.word	0x20013754

08005b00 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	; 0x28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b08:	f3ef 8311 	mrs	r3, BASEPRI
 8005b0c:	f04f 0120 	mov.w	r1, #32
 8005b10:	f381 8811 	msr	BASEPRI, r1
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	4827      	ldr	r0, [pc, #156]	; (8005bb4 <SEGGER_SYSVIEW_Print+0xb4>)
 8005b18:	f7fe fe0e 	bl	8004738 <_PreparePacket>
 8005b1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b1e:	2280      	movs	r2, #128	; 0x80
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	6938      	ldr	r0, [r7, #16]
 8005b24:	f7fe fdd8 	bl	80046d8 <_EncodeStr>
 8005b28:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2e:	2300      	movs	r3, #0
 8005b30:	623b      	str	r3, [r7, #32]
 8005b32:	e00b      	b.n	8005b4c <SEGGER_SYSVIEW_Print+0x4c>
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	1c59      	adds	r1, r3, #1
 8005b3c:	6279      	str	r1, [r7, #36]	; 0x24
 8005b3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	09db      	lsrs	r3, r3, #7
 8005b4a:	623b      	str	r3, [r7, #32]
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b50:	d8f0      	bhi.n	8005b34 <SEGGER_SYSVIEW_Print+0x34>
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	627a      	str	r2, [r7, #36]	; 0x24
 8005b58:	6a3a      	ldr	r2, [r7, #32]
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	2300      	movs	r3, #0
 8005b68:	61bb      	str	r3, [r7, #24]
 8005b6a:	e00b      	b.n	8005b84 <SEGGER_SYSVIEW_Print+0x84>
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	1c59      	adds	r1, r3, #1
 8005b74:	61f9      	str	r1, [r7, #28]
 8005b76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	09db      	lsrs	r3, r3, #7
 8005b82:	61bb      	str	r3, [r7, #24]
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b7f      	cmp	r3, #127	; 0x7f
 8005b88:	d8f0      	bhi.n	8005b6c <SEGGER_SYSVIEW_Print+0x6c>
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	61fa      	str	r2, [r7, #28]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b9a:	221a      	movs	r2, #26
 8005b9c:	68f9      	ldr	r1, [r7, #12]
 8005b9e:	6938      	ldr	r0, [r7, #16]
 8005ba0:	f7fe feb6 	bl	8004910 <_SendPacket>
  RECORD_END();
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f383 8811 	msr	BASEPRI, r3
}
 8005baa:	bf00      	nop
 8005bac:	3728      	adds	r7, #40	; 0x28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20013758 	.word	0x20013758

08005bb8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08a      	sub	sp, #40	; 0x28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bc0:	f3ef 8311 	mrs	r3, BASEPRI
 8005bc4:	f04f 0120 	mov.w	r1, #32
 8005bc8:	f381 8811 	msr	BASEPRI, r1
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	4827      	ldr	r0, [pc, #156]	; (8005c6c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005bd0:	f7fe fdb2 	bl	8004738 <_PreparePacket>
 8005bd4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bd6:	2280      	movs	r2, #128	; 0x80
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	6938      	ldr	r0, [r7, #16]
 8005bdc:	f7fe fd7c 	bl	80046d8 <_EncodeStr>
 8005be0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
 8005be6:	2301      	movs	r3, #1
 8005be8:	623b      	str	r3, [r7, #32]
 8005bea:	e00b      	b.n	8005c04 <SEGGER_SYSVIEW_Warn+0x4c>
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	1c59      	adds	r1, r3, #1
 8005bf4:	6279      	str	r1, [r7, #36]	; 0x24
 8005bf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	09db      	lsrs	r3, r3, #7
 8005c02:	623b      	str	r3, [r7, #32]
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	2b7f      	cmp	r3, #127	; 0x7f
 8005c08:	d8f0      	bhi.n	8005bec <SEGGER_SYSVIEW_Warn+0x34>
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	627a      	str	r2, [r7, #36]	; 0x24
 8005c10:	6a3a      	ldr	r2, [r7, #32]
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	e00b      	b.n	8005c3c <SEGGER_SYSVIEW_Warn+0x84>
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	1c59      	adds	r1, r3, #1
 8005c2c:	61f9      	str	r1, [r7, #28]
 8005c2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	09db      	lsrs	r3, r3, #7
 8005c3a:	61bb      	str	r3, [r7, #24]
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c40:	d8f0      	bhi.n	8005c24 <SEGGER_SYSVIEW_Warn+0x6c>
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	61fa      	str	r2, [r7, #28]
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c52:	221a      	movs	r2, #26
 8005c54:	68f9      	ldr	r1, [r7, #12]
 8005c56:	6938      	ldr	r0, [r7, #16]
 8005c58:	f7fe fe5a 	bl	8004910 <_SendPacket>
  RECORD_END();
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f383 8811 	msr	BASEPRI, r3
}
 8005c62:	bf00      	nop
 8005c64:	3728      	adds	r7, #40	; 0x28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20013758 	.word	0x20013758

08005c70 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005c76:	2300      	movs	r3, #0
 8005c78:	607b      	str	r3, [r7, #4]
 8005c7a:	e033      	b.n	8005ce4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005c7c:	491e      	ldr	r1, [pc, #120]	; (8005cf8 <_cbSendTaskList+0x88>)
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	491a      	ldr	r1, [pc, #104]	; (8005cf8 <_cbSendTaskList+0x88>)
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	6819      	ldr	r1, [r3, #0]
 8005c9e:	4c16      	ldr	r4, [pc, #88]	; (8005cf8 <_cbSendTaskList+0x88>)
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4423      	add	r3, r4
 8005cac:	3308      	adds	r3, #8
 8005cae:	681c      	ldr	r4, [r3, #0]
 8005cb0:	4d11      	ldr	r5, [pc, #68]	; (8005cf8 <_cbSendTaskList+0x88>)
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	442b      	add	r3, r5
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	681d      	ldr	r5, [r3, #0]
 8005cc2:	4e0d      	ldr	r6, [pc, #52]	; (8005cf8 <_cbSendTaskList+0x88>)
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4433      	add	r3, r6
 8005cd0:	3310      	adds	r3, #16
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	462b      	mov	r3, r5
 8005cd8:	4622      	mov	r2, r4
 8005cda:	f000 f8bd 	bl	8005e58 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	607b      	str	r3, [r7, #4]
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <_cbSendTaskList+0x8c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d3c6      	bcc.n	8005c7c <_cbSendTaskList+0xc>
  }
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf8:	2001383c 	.word	0x2001383c
 8005cfc:	200138dc 	.word	0x200138dc

08005d00 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d04:	b082      	sub	sp, #8
 8005d06:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005d08:	f7fc ff34 	bl	8002b74 <xTaskGetTickCountFromISR>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2200      	movs	r2, #0
 8005d10:	469a      	mov	sl, r3
 8005d12:	4693      	mov	fp, r2
 8005d14:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	f04f 0a00 	mov.w	sl, #0
 8005d24:	f04f 0b00 	mov.w	fp, #0
 8005d28:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005d2c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005d30:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005d34:	4652      	mov	r2, sl
 8005d36:	465b      	mov	r3, fp
 8005d38:	1a14      	subs	r4, r2, r0
 8005d3a:	eb63 0501 	sbc.w	r5, r3, r1
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	00ab      	lsls	r3, r5, #2
 8005d48:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005d4c:	00a2      	lsls	r2, r4, #2
 8005d4e:	4614      	mov	r4, r2
 8005d50:	461d      	mov	r5, r3
 8005d52:	eb14 0800 	adds.w	r8, r4, r0
 8005d56:	eb45 0901 	adc.w	r9, r5, r1
 8005d5a:	f04f 0200 	mov.w	r2, #0
 8005d5e:	f04f 0300 	mov.w	r3, #0
 8005d62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d6e:	4690      	mov	r8, r2
 8005d70:	4699      	mov	r9, r3
 8005d72:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005d76:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005d88 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005d96:	2205      	movs	r2, #5
 8005d98:	492b      	ldr	r1, [pc, #172]	; (8005e48 <SYSVIEW_AddTask+0xc0>)
 8005d9a:	68b8      	ldr	r0, [r7, #8]
 8005d9c:	f000 f87d 	bl	8005e9a <memcmp>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d04b      	beq.n	8005e3e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005da6:	4b29      	ldr	r3, [pc, #164]	; (8005e4c <SYSVIEW_AddTask+0xc4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b07      	cmp	r3, #7
 8005dac:	d903      	bls.n	8005db6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005dae:	4828      	ldr	r0, [pc, #160]	; (8005e50 <SYSVIEW_AddTask+0xc8>)
 8005db0:	f7ff ff02 	bl	8005bb8 <SEGGER_SYSVIEW_Warn>
    return;
 8005db4:	e044      	b.n	8005e40 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005db6:	4b25      	ldr	r3, [pc, #148]	; (8005e4c <SYSVIEW_AddTask+0xc4>)
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	4926      	ldr	r1, [pc, #152]	; (8005e54 <SYSVIEW_AddTask+0xcc>)
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005dca:	4b20      	ldr	r3, [pc, #128]	; (8005e4c <SYSVIEW_AddTask+0xc4>)
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4921      	ldr	r1, [pc, #132]	; (8005e54 <SYSVIEW_AddTask+0xcc>)
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	3304      	adds	r3, #4
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005de0:	4b1a      	ldr	r3, [pc, #104]	; (8005e4c <SYSVIEW_AddTask+0xc4>)
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	491b      	ldr	r1, [pc, #108]	; (8005e54 <SYSVIEW_AddTask+0xcc>)
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	3308      	adds	r3, #8
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005df6:	4b15      	ldr	r3, [pc, #84]	; (8005e4c <SYSVIEW_AddTask+0xc4>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4916      	ldr	r1, [pc, #88]	; (8005e54 <SYSVIEW_AddTask+0xcc>)
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	440b      	add	r3, r1
 8005e06:	330c      	adds	r3, #12
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <SYSVIEW_AddTask+0xc4>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	4910      	ldr	r1, [pc, #64]	; (8005e54 <SYSVIEW_AddTask+0xcc>)
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	440b      	add	r3, r1
 8005e1c:	3310      	adds	r3, #16
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005e22:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <SYSVIEW_AddTask+0xc4>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3301      	adds	r3, #1
 8005e28:	4a08      	ldr	r2, [pc, #32]	; (8005e4c <SYSVIEW_AddTask+0xc4>)
 8005e2a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f80e 	bl	8005e58 <SYSVIEW_SendTaskInfo>
 8005e3c:	e000      	b.n	8005e40 <SYSVIEW_AddTask+0xb8>
    return;
 8005e3e:	bf00      	nop

}
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	08006038 	.word	0x08006038
 8005e4c:	200138dc 	.word	0x200138dc
 8005e50:	08006040 	.word	0x08006040
 8005e54:	2001383c 	.word	0x2001383c

08005e58 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	; 0x28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005e66:	f107 0314 	add.w	r3, r7, #20
 8005e6a:	2214      	movs	r2, #20
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 f823 	bl	8005eba <memset>
  TaskInfo.TaskID     = TaskID;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005e88:	f107 0314 	add.w	r3, r7, #20
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff fa37 	bl	8005300 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005e92:	bf00      	nop
 8005e94:	3728      	adds	r7, #40	; 0x28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <memcmp>:
 8005e9a:	b510      	push	{r4, lr}
 8005e9c:	3901      	subs	r1, #1
 8005e9e:	4402      	add	r2, r0
 8005ea0:	4290      	cmp	r0, r2
 8005ea2:	d101      	bne.n	8005ea8 <memcmp+0xe>
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	e005      	b.n	8005eb4 <memcmp+0x1a>
 8005ea8:	7803      	ldrb	r3, [r0, #0]
 8005eaa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005eae:	42a3      	cmp	r3, r4
 8005eb0:	d001      	beq.n	8005eb6 <memcmp+0x1c>
 8005eb2:	1b18      	subs	r0, r3, r4
 8005eb4:	bd10      	pop	{r4, pc}
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	e7f2      	b.n	8005ea0 <memcmp+0x6>

08005eba <memset>:
 8005eba:	4402      	add	r2, r0
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d100      	bne.n	8005ec4 <memset+0xa>
 8005ec2:	4770      	bx	lr
 8005ec4:	f803 1b01 	strb.w	r1, [r3], #1
 8005ec8:	e7f9      	b.n	8005ebe <memset+0x4>
	...

08005ecc <__libc_init_array>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	4d0d      	ldr	r5, [pc, #52]	; (8005f04 <__libc_init_array+0x38>)
 8005ed0:	4c0d      	ldr	r4, [pc, #52]	; (8005f08 <__libc_init_array+0x3c>)
 8005ed2:	1b64      	subs	r4, r4, r5
 8005ed4:	10a4      	asrs	r4, r4, #2
 8005ed6:	2600      	movs	r6, #0
 8005ed8:	42a6      	cmp	r6, r4
 8005eda:	d109      	bne.n	8005ef0 <__libc_init_array+0x24>
 8005edc:	4d0b      	ldr	r5, [pc, #44]	; (8005f0c <__libc_init_array+0x40>)
 8005ede:	4c0c      	ldr	r4, [pc, #48]	; (8005f10 <__libc_init_array+0x44>)
 8005ee0:	f000 f826 	bl	8005f30 <_init>
 8005ee4:	1b64      	subs	r4, r4, r5
 8005ee6:	10a4      	asrs	r4, r4, #2
 8005ee8:	2600      	movs	r6, #0
 8005eea:	42a6      	cmp	r6, r4
 8005eec:	d105      	bne.n	8005efa <__libc_init_array+0x2e>
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef4:	4798      	blx	r3
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7ee      	b.n	8005ed8 <__libc_init_array+0xc>
 8005efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efe:	4798      	blx	r3
 8005f00:	3601      	adds	r6, #1
 8005f02:	e7f2      	b.n	8005eea <__libc_init_array+0x1e>
 8005f04:	080060d8 	.word	0x080060d8
 8005f08:	080060d8 	.word	0x080060d8
 8005f0c:	080060d8 	.word	0x080060d8
 8005f10:	080060dc 	.word	0x080060dc

08005f14 <memcpy>:
 8005f14:	440a      	add	r2, r1
 8005f16:	4291      	cmp	r1, r2
 8005f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f1c:	d100      	bne.n	8005f20 <memcpy+0xc>
 8005f1e:	4770      	bx	lr
 8005f20:	b510      	push	{r4, lr}
 8005f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f2a:	4291      	cmp	r1, r2
 8005f2c:	d1f9      	bne.n	8005f22 <memcpy+0xe>
 8005f2e:	bd10      	pop	{r4, pc}

08005f30 <_init>:
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	bf00      	nop
 8005f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f36:	bc08      	pop	{r3}
 8005f38:	469e      	mov	lr, r3
 8005f3a:	4770      	bx	lr

08005f3c <_fini>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	bf00      	nop
 8005f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f42:	bc08      	pop	{r3}
 8005f44:	469e      	mov	lr, r3
 8005f46:	4770      	bx	lr
