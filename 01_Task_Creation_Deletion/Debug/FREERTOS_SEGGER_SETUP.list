
FREERTOS_SEGGER_SETUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08006e9c  08006e9c  00016e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007078  08007078  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  08007078  08007078  00017078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007080  08007080  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007080  08007080  00017080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007084  08007084  00017084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08007088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020130  2**0
                  CONTENTS
 10 .bss          00013a4c  20000130  20000130  00020130  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013b7c  20013b7c  00020130  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 14 .debug_info   000178b6  00000000  00000000  000201a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003470  00000000  00000000  00037a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015d0  00000000  00000000  0003aed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001104  00000000  00000000  0003c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002665e  00000000  00000000  0003d5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019c87  00000000  00000000  00063c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7905  00000000  00000000  0007d889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006144  00000000  00000000  00165190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  0016b2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000130 	.word	0x20000130
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006e84 	.word	0x08006e84

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000134 	.word	0x20000134
 80001ec:	08006e84 	.word	0x08006e84

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Task1_Handler>:
char Buffer[35];
Queue_Data Local_Queue = {.Data_1 = 1, .Data_2 = 2, .Data_3 = 3, .Buffer = {4,5,6,7,8,9,10,11,12,13}};
Queue_Data LocalQueue_ = {.Data_1 = 3, .Data_2 = 2, .Data_3 = 1, .Buffer = {10,11,12,13}};

void Task1_Handler(void* Parameters)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	UBaseType_t Priority_Get;
	Priority_Get = uxTaskPriorityGet(NULL);
 8000594:	2000      	movs	r0, #0
 8000596:	f002 fd09 	bl	8002fac <uxTaskPriorityGet>
 800059a:	60f8      	str	r0, [r7, #12]

	for(;;)
	{
		SEGGER_SYSVIEW_Print("Red Led Task!!");
 800059c:	4809      	ldr	r0, [pc, #36]	; (80005c4 <Task1_Handler+0x38>)
 800059e:	f005 fdef 	bl	8006180 <SEGGER_SYSVIEW_Print>
		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 80005a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <Task1_Handler+0x3c>)
 80005a8:	f000 fdfb 	bl	80011a2 <HAL_GPIO_TogglePin>
		xQueueSendToBack(Queue_Handle_1, &Local_Queue, pdMS_TO_TICKS(0));
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <Task1_Handler+0x40>)
 80005ae:	6818      	ldr	r0, [r3, #0]
 80005b0:	2300      	movs	r3, #0
 80005b2:	2200      	movs	r2, #0
 80005b4:	4906      	ldr	r1, [pc, #24]	; (80005d0 <Task1_Handler+0x44>)
 80005b6:	f001 fe39 	bl	800222c <xQueueGenericSend>
		vTaskDelay(10);
 80005ba:	200a      	movs	r0, #10
 80005bc:	f002 fcbe 	bl	8002f3c <vTaskDelay>
		SEGGER_SYSVIEW_Print("Red Led Task!!");
 80005c0:	e7ec      	b.n	800059c <Task1_Handler+0x10>
 80005c2:	bf00      	nop
 80005c4:	08006e9c 	.word	0x08006e9c
 80005c8:	40021800 	.word	0x40021800
 80005cc:	20000204 	.word	0x20000204
 80005d0:	20000000 	.word	0x20000000

080005d4 <Task2_Handler>:
	}
}

void Task2_Handler(void* Parameters)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	UBaseType_t Priority_Get;
	Priority_Get = uxTaskPriorityGet(NULL);
 80005dc:	2000      	movs	r0, #0
 80005de:	f002 fce5 	bl	8002fac <uxTaskPriorityGet>
 80005e2:	60f8      	str	r0, [r7, #12]

	for(;;)
	{
		SEGGER_SYSVIEW_Print("Green Led Task!!");
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <Task2_Handler+0x38>)
 80005e6:	f005 fdcb 	bl	8006180 <SEGGER_SYSVIEW_Print>
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 80005ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <Task2_Handler+0x3c>)
 80005f0:	f000 fdd7 	bl	80011a2 <HAL_GPIO_TogglePin>
		xQueueSendToBack(Queue_Handle_2, &LocalQueue_, pdMS_TO_TICKS(0));
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <Task2_Handler+0x40>)
 80005f6:	6818      	ldr	r0, [r3, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	2200      	movs	r2, #0
 80005fc:	4906      	ldr	r1, [pc, #24]	; (8000618 <Task2_Handler+0x44>)
 80005fe:	f001 fe15 	bl	800222c <xQueueGenericSend>
		vTaskDelay(10);
 8000602:	200a      	movs	r0, #10
 8000604:	f002 fc9a 	bl	8002f3c <vTaskDelay>
		SEGGER_SYSVIEW_Print("Green Led Task!!");
 8000608:	e7ec      	b.n	80005e4 <Task2_Handler+0x10>
 800060a:	bf00      	nop
 800060c:	08006eac 	.word	0x08006eac
 8000610:	40021800 	.word	0x40021800
 8000614:	20000208 	.word	0x20000208
 8000618:	20000068 	.word	0x20000068

0800061c <Task3_Handler>:
	}
}

void Task3_Handler(void* Parameters)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
	QueueHandle_t Receive_Queue;
	Queue_Data* Rx_Queue;

	for(;;)
	{
		Receive_Queue = xQueueSelectFromSet(Queue_Set_Handle, pdMS_TO_TICKS(20));
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <Task3_Handler+0x54>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2114      	movs	r1, #20
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fab8 	bl	8002ba0 <xQueueSelectFromSet>
 8000630:	60f8      	str	r0, [r7, #12]
		xQueueReceive(Receive_Queue, &Rx_Queue, pdMS_TO_TICKS(0));
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	2200      	movs	r2, #0
 8000638:	4619      	mov	r1, r3
 800063a:	68f8      	ldr	r0, [r7, #12]
 800063c:	f001 ffec 	bl	8002618 <xQueueReceive>
		sprintf(Buffer, "1:%d, 2:%d, 3:%d, 4:%ld", Rx_Queue->Data_1,Rx_Queue->Data_2,Rx_Queue->Data_3, Rx_Queue->Buffer[3]);
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	4618      	mov	r0, r3
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	789b      	ldrb	r3, [r3, #2]
 8000650:	461a      	mov	r2, r3
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	691b      	ldr	r3, [r3, #16]
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	9200      	str	r2, [sp, #0]
 800065a:	4603      	mov	r3, r0
 800065c:	460a      	mov	r2, r1
 800065e:	4905      	ldr	r1, [pc, #20]	; (8000674 <Task3_Handler+0x58>)
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <Task3_Handler+0x5c>)
 8000662:	f005 ff5b 	bl	800651c <siprintf>
		SEGGER_SYSVIEW_Print(Buffer);
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <Task3_Handler+0x5c>)
 8000668:	f005 fd8a 	bl	8006180 <SEGGER_SYSVIEW_Print>
		Receive_Queue = xQueueSelectFromSet(Queue_Set_Handle, pdMS_TO_TICKS(20));
 800066c:	e7da      	b.n	8000624 <Task3_Handler+0x8>
 800066e:	bf00      	nop
 8000670:	2000020c 	.word	0x2000020c
 8000674:	08006ec0 	.word	0x08006ec0
 8000678:	2000014c 	.word	0x2000014c

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  //HAL_Init();

  /* USER CODE BEGIN Init */
	DWT->CTRL |= (1 << 0);
 8000682:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <main+0xbc>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a2c      	ldr	r2, [pc, #176]	; (8000738 <main+0xbc>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6013      	str	r3, [r2, #0]

  /* Configure the system clock */
  //SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  HAL_RCC_DeInit();
 800068e:	f000 fdd7 	bl	8001240 <HAL_RCC_DeInit>
  SystemCoreClockUpdate();
 8000692:	f000 f9f9 	bl	8000a88 <SystemCoreClockUpdate>
  SEGGER_SYSVIEW_Conf();
 8000696:	f004 f917 	bl	80048c8 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800069a:	f004 fff7 	bl	800568c <SEGGER_SYSVIEW_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 f8c3 	bl	8000828 <MX_GPIO_Init>
  MX_TIM6_Init();
 80006a2:	f000 f861 	bl	8000768 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80006a6:	f000 f895 	bl	80007d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Queue_Handle_1 = xQueueCreate(1, sizeof(Queue_Data*));
 80006aa:	2200      	movs	r2, #0
 80006ac:	2104      	movs	r1, #4
 80006ae:	2001      	movs	r0, #1
 80006b0:	f001 fd56 	bl	8002160 <xQueueGenericCreate>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a21      	ldr	r2, [pc, #132]	; (800073c <main+0xc0>)
 80006b8:	6013      	str	r3, [r2, #0]
  Queue_Handle_2 = xQueueCreate(1, sizeof(Queue_Data*));
 80006ba:	2200      	movs	r2, #0
 80006bc:	2104      	movs	r1, #4
 80006be:	2001      	movs	r0, #1
 80006c0:	f001 fd4e 	bl	8002160 <xQueueGenericCreate>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a1e      	ldr	r2, [pc, #120]	; (8000740 <main+0xc4>)
 80006c8:	6013      	str	r3, [r2, #0]
  Queue_Set_Handle = xQueueCreateSet(1 * 2);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f002 fa38 	bl	8002b40 <xQueueCreateSet>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <main+0xc8>)
 80006d4:	6013      	str	r3, [r2, #0]
  xQueueAddToSet(Queue_Handle_1, Queue_Set_Handle);
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <main+0xc0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a1a      	ldr	r2, [pc, #104]	; (8000744 <main+0xc8>)
 80006dc:	6812      	ldr	r2, [r2, #0]
 80006de:	4611      	mov	r1, r2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fa3c 	bl	8002b5e <xQueueAddToSet>
  xQueueAddToSet(Queue_Handle_2, Queue_Set_Handle);
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <main+0xc4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a16      	ldr	r2, [pc, #88]	; (8000744 <main+0xc8>)
 80006ec:	6812      	ldr	r2, [r2, #0]
 80006ee:	4611      	mov	r1, r2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fa34 	bl	8002b5e <xQueueAddToSet>

  xTaskCreate(Task1_Handler, "Task-1", configMINIMAL_STACK_SIZE, NULL, 1, &Task_Handle_1);
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <main+0xcc>)
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2301      	movs	r3, #1
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2300      	movs	r3, #0
 8000700:	2282      	movs	r2, #130	; 0x82
 8000702:	4912      	ldr	r1, [pc, #72]	; (800074c <main+0xd0>)
 8000704:	4812      	ldr	r0, [pc, #72]	; (8000750 <main+0xd4>)
 8000706:	f002 fac4 	bl	8002c92 <xTaskCreate>
  xTaskCreate(Task2_Handler, "Task-2", configMINIMAL_STACK_SIZE, NULL, 1, &Task_Handle_2);
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <main+0xd8>)
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	2301      	movs	r3, #1
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	2282      	movs	r2, #130	; 0x82
 8000716:	4910      	ldr	r1, [pc, #64]	; (8000758 <main+0xdc>)
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <main+0xe0>)
 800071a:	f002 faba 	bl	8002c92 <xTaskCreate>
  xTaskCreate(Task3_Handler, "Task-3", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 800071e:	2300      	movs	r3, #0
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	2302      	movs	r3, #2
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2300      	movs	r3, #0
 8000728:	2282      	movs	r2, #130	; 0x82
 800072a:	490d      	ldr	r1, [pc, #52]	; (8000760 <main+0xe4>)
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <main+0xe8>)
 800072e:	f002 fab0 	bl	8002c92 <xTaskCreate>
  Periodic_Timer_Handle = xTimerCreate("Periodic Timer", pdMS_TO_TICKS(500), pdTRUE, 0, Periodic_Callback);

  OneShot_Started = xTimerStart(One_Shot_Handle, 0);
  PeriodicTimer_Started = xTimerStart(Periodic_Timer_Handle, 0);*/

  vTaskStartScheduler();
 8000732:	f002 fc55 	bl	8002fe0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0xba>
 8000738:	e0001000 	.word	0xe0001000
 800073c:	20000204 	.word	0x20000204
 8000740:	20000208 	.word	0x20000208
 8000744:	2000020c 	.word	0x2000020c
 8000748:	200001fc 	.word	0x200001fc
 800074c:	08006f20 	.word	0x08006f20
 8000750:	0800058d 	.word	0x0800058d
 8000754:	20000200 	.word	0x20000200
 8000758:	08006f28 	.word	0x08006f28
 800075c:	080005d5 	.word	0x080005d5
 8000760:	08006f30 	.word	0x08006f30
 8000764:	0800061d 	.word	0x0800061d

08000768 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_TIM6_Init+0x64>)
 8000778:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_TIM6_Init+0x68>)
 800077a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000;
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_TIM6_Init+0x64>)
 800077e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000782:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_TIM6_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_TIM6_Init+0x64>)
 800078c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000790:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_TIM6_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_TIM6_Init+0x64>)
 800079a:	f000 fe49 	bl	8001430 <HAL_TIM_Base_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007a4:	f000 f892 	bl	80008cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a8:	2300      	movs	r3, #0
 80007aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_TIM6_Init+0x64>)
 80007b6:	f001 f865 	bl	8001884 <HAL_TIMEx_MasterConfigSynchronization>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007c0:	f000 f884 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000170 	.word	0x20000170
 80007d0:	40001000 	.word	0x40001000

080007d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART1_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 800080c:	f001 f8ca 	bl	80019a4 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f859 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200001b8 	.word	0x200001b8
 8000824:	40011000 	.word	0x40011000

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_GPIO_Init+0x80>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a18      	ldr	r2, [pc, #96]	; (80008a8 <MX_GPIO_Init+0x80>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_GPIO_Init+0x80>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_GPIO_Init+0x80>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <MX_GPIO_Init+0x80>)
 8000864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_GPIO_Init+0x80>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800087c:	480b      	ldr	r0, [pc, #44]	; (80008ac <MX_GPIO_Init+0x84>)
 800087e:	f000 fc77 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000882:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_GPIO_Init+0x84>)
 800089c:	f000 fabc 	bl	8000e18 <HAL_GPIO_Init>

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40021800 	.word	0x40021800

080008b0 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */
void vApplicationIdleHook(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
	Idle_Count++;
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <vApplicationIdleHook+0x18>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <vApplicationIdleHook+0x18>)
 80008bc:	6013      	str	r3, [r2, #0]
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	20000210 	.word	0x20000210

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_TIM_Base_MspInit+0x48>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d115      	bne.n	8000916 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_TIM_Base_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a0c      	ldr	r2, [pc, #48]	; (8000924 <HAL_TIM_Base_MspInit+0x4c>)
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_TIM_Base_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f003 0310 	and.w	r3, r3, #16
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2036      	movs	r0, #54	; 0x36
 800090c:	f000 fa4e 	bl	8000dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000910:	2036      	movs	r0, #54	; 0x36
 8000912:	f000 fa67 	bl	8000de4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40001000 	.word	0x40001000
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a19      	ldr	r2, [pc, #100]	; (80009ac <HAL_UART_MspInit+0x84>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d12c      	bne.n	80009a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <HAL_UART_MspInit+0x88>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <HAL_UART_MspInit+0x88>)
 8000954:	f043 0310 	orr.w	r3, r3, #16
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_UART_MspInit+0x88>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f003 0310 	and.w	r3, r3, #16
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <HAL_UART_MspInit+0x88>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_UART_MspInit+0x88>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000982:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000994:	2307      	movs	r3, #7
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_UART_MspInit+0x8c>)
 80009a0:	f000 fa3a 	bl	8000e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40011000 	.word	0x40011000
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <TIM6_DAC_IRQHandler+0x10>)
 80009ea:	f000 fd70 	bl	80014ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000170 	.word	0x20000170

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f005 fdb0 	bl	800658c <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20030000 	.word	0x20030000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	20000214 	.word	0x20000214
 8000a60:	20013b80 	.word	0x20013b80

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	2302      	movs	r3, #2
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000aa2:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <SystemCoreClockUpdate+0xec>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	f003 030c 	and.w	r3, r3, #12
 8000aaa:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	2b08      	cmp	r3, #8
 8000ab0:	d011      	beq.n	8000ad6 <SystemCoreClockUpdate+0x4e>
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	2b08      	cmp	r3, #8
 8000ab6:	d844      	bhi.n	8000b42 <SystemCoreClockUpdate+0xba>
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d003      	beq.n	8000ac6 <SystemCoreClockUpdate+0x3e>
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d004      	beq.n	8000ace <SystemCoreClockUpdate+0x46>
 8000ac4:	e03d      	b.n	8000b42 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000ac6:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <SystemCoreClockUpdate+0xf0>)
 8000ac8:	4a2c      	ldr	r2, [pc, #176]	; (8000b7c <SystemCoreClockUpdate+0xf4>)
 8000aca:	601a      	str	r2, [r3, #0]
      break;
 8000acc:	e03d      	b.n	8000b4a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000ace:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <SystemCoreClockUpdate+0xf0>)
 8000ad0:	4a2b      	ldr	r2, [pc, #172]	; (8000b80 <SystemCoreClockUpdate+0xf8>)
 8000ad2:	601a      	str	r2, [r3, #0]
      break;
 8000ad4:	e039      	b.n	8000b4a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <SystemCoreClockUpdate+0xec>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	0d9b      	lsrs	r3, r3, #22
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ae2:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <SystemCoreClockUpdate+0xec>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000aea:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d00c      	beq.n	8000b0c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000af2:	4a23      	ldr	r2, [pc, #140]	; (8000b80 <SystemCoreClockUpdate+0xf8>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4a1e      	ldr	r2, [pc, #120]	; (8000b74 <SystemCoreClockUpdate+0xec>)
 8000afc:	6852      	ldr	r2, [r2, #4]
 8000afe:	0992      	lsrs	r2, r2, #6
 8000b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b04:	fb02 f303 	mul.w	r3, r2, r3
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	e00b      	b.n	8000b24 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <SystemCoreClockUpdate+0xf4>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <SystemCoreClockUpdate+0xec>)
 8000b16:	6852      	ldr	r2, [r2, #4]
 8000b18:	0992      	lsrs	r2, r2, #6
 8000b1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b1e:	fb02 f303 	mul.w	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <SystemCoreClockUpdate+0xec>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	0c1b      	lsrs	r3, r3, #16
 8000b2a:	f003 0303 	and.w	r3, r3, #3
 8000b2e:	3301      	adds	r3, #1
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <SystemCoreClockUpdate+0xf0>)
 8000b3e:	6013      	str	r3, [r2, #0]
      break;
 8000b40:	e003      	b.n	8000b4a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <SystemCoreClockUpdate+0xf0>)
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <SystemCoreClockUpdate+0xf4>)
 8000b46:	601a      	str	r2, [r3, #0]
      break;
 8000b48:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <SystemCoreClockUpdate+0xec>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	f003 030f 	and.w	r3, r3, #15
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <SystemCoreClockUpdate+0xfc>)
 8000b56:	5cd3      	ldrb	r3, [r2, r3]
 8000b58:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <SystemCoreClockUpdate+0xf0>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	fa22 f303 	lsr.w	r3, r2, r3
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <SystemCoreClockUpdate+0xf0>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	371c      	adds	r7, #28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	40023800 	.word	0x40023800
 8000b78:	200000d0 	.word	0x200000d0
 8000b7c:	00f42400 	.word	0x00f42400
 8000b80:	007a1200 	.word	0x007a1200
 8000b84:	08007004 	.word	0x08007004

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb2:	f7ff ff57 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f005 fcef 	bl	8006598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bba:	f7ff fd5f 	bl	800067c <main>
  bx  lr    
 8000bbe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bc0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8000bcc:	08007088 	.word	0x08007088
  ldr r2, =_sbss
 8000bd0:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8000bd4:	20013b7c 	.word	0x20013b7c

08000bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>
	...

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_InitTick+0x54>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_InitTick+0x58>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f900 	bl	8000e00 <HAL_SYSTICK_Config>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00e      	b.n	8000c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	d80a      	bhi.n	8000c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f000 f8c8 	bl	8000dac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c1c:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <HAL_InitTick+0x5c>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200000d0 	.word	0x200000d0
 8000c34:	200000d8 	.word	0x200000d8
 8000c38:	200000d4 	.word	0x200000d4

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000218 	.word	0x20000218

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbe:	f7ff ff49 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000dc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	68b9      	ldr	r1, [r7, #8]
 8000dc8:	6978      	ldr	r0, [r7, #20]
 8000dca:	f7ff ff99 	bl	8000d00 <NVIC_EncodePriority>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff68 	bl	8000cac <__NVIC_SetPriority>
}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff3c 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ffad 	bl	8000d68 <SysTick_Config>
 8000e0e:	4603      	mov	r3, r0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	e177      	b.n	8001124 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 8166 	bne.w	800111e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d005      	beq.n	8000e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d130      	bne.n	8000ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	091b      	lsrs	r3, r3, #4
 8000eb6:	f003 0201 	and.w	r2, r3, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d017      	beq.n	8000f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d123      	bne.n	8000f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	08da      	lsrs	r2, r3, #3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3208      	adds	r2, #8
 8000f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	69b9      	ldr	r1, [r7, #24]
 8000f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0203 	and.w	r2, r3, #3
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80c0 	beq.w	800111e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b66      	ldr	r3, [pc, #408]	; (800113c <HAL_GPIO_Init+0x324>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a65      	ldr	r2, [pc, #404]	; (800113c <HAL_GPIO_Init+0x324>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b63      	ldr	r3, [pc, #396]	; (800113c <HAL_GPIO_Init+0x324>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fba:	4a61      	ldr	r2, [pc, #388]	; (8001140 <HAL_GPIO_Init+0x328>)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a58      	ldr	r2, [pc, #352]	; (8001144 <HAL_GPIO_Init+0x32c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d037      	beq.n	8001056 <HAL_GPIO_Init+0x23e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a57      	ldr	r2, [pc, #348]	; (8001148 <HAL_GPIO_Init+0x330>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d031      	beq.n	8001052 <HAL_GPIO_Init+0x23a>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a56      	ldr	r2, [pc, #344]	; (800114c <HAL_GPIO_Init+0x334>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d02b      	beq.n	800104e <HAL_GPIO_Init+0x236>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a55      	ldr	r2, [pc, #340]	; (8001150 <HAL_GPIO_Init+0x338>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d025      	beq.n	800104a <HAL_GPIO_Init+0x232>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a54      	ldr	r2, [pc, #336]	; (8001154 <HAL_GPIO_Init+0x33c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01f      	beq.n	8001046 <HAL_GPIO_Init+0x22e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a53      	ldr	r2, [pc, #332]	; (8001158 <HAL_GPIO_Init+0x340>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x22a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a52      	ldr	r2, [pc, #328]	; (800115c <HAL_GPIO_Init+0x344>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x226>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a51      	ldr	r2, [pc, #324]	; (8001160 <HAL_GPIO_Init+0x348>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x222>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a50      	ldr	r2, [pc, #320]	; (8001164 <HAL_GPIO_Init+0x34c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x21e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4f      	ldr	r2, [pc, #316]	; (8001168 <HAL_GPIO_Init+0x350>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x21a>
 800102e:	2309      	movs	r3, #9
 8001030:	e012      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001032:	230a      	movs	r3, #10
 8001034:	e010      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001036:	2308      	movs	r3, #8
 8001038:	e00e      	b.n	8001058 <HAL_GPIO_Init+0x240>
 800103a:	2307      	movs	r3, #7
 800103c:	e00c      	b.n	8001058 <HAL_GPIO_Init+0x240>
 800103e:	2306      	movs	r3, #6
 8001040:	e00a      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001042:	2305      	movs	r3, #5
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001046:	2304      	movs	r3, #4
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x240>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x240>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	4935      	ldr	r1, [pc, #212]	; (8001140 <HAL_GPIO_Init+0x328>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001076:	4b3d      	ldr	r3, [pc, #244]	; (800116c <HAL_GPIO_Init+0x354>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800109a:	4a34      	ldr	r2, [pc, #208]	; (800116c <HAL_GPIO_Init+0x354>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a0:	4b32      	ldr	r3, [pc, #200]	; (800116c <HAL_GPIO_Init+0x354>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c4:	4a29      	ldr	r2, [pc, #164]	; (800116c <HAL_GPIO_Init+0x354>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <HAL_GPIO_Init+0x354>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ee:	4a1f      	ldr	r2, [pc, #124]	; (800116c <HAL_GPIO_Init+0x354>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_GPIO_Init+0x354>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <HAL_GPIO_Init+0x354>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f ae84 	bls.w	8000e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40013800 	.word	0x40013800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020400 	.word	0x40020400
 800114c:	40020800 	.word	0x40020800
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40021400 	.word	0x40021400
 800115c:	40021800 	.word	0x40021800
 8001160:	40021c00 	.word	0x40021c00
 8001164:	40022000 	.word	0x40022000
 8001168:	40022400 	.word	0x40022400
 800116c:	40013c00 	.word	0x40013c00

08001170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800118c:	e003      	b.n	8001196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	041a      	lsls	r2, r3, #16
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	619a      	str	r2, [r3, #24]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b085      	sub	sp, #20
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b4:	887a      	ldrh	r2, [r7, #2]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4013      	ands	r3, r2
 80011ba:	041a      	lsls	r2, r3, #16
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43d9      	mvns	r1, r3
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	400b      	ands	r3, r1
 80011c4:	431a      	orrs	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <HAL_RCC_GetHCLKFreq+0x14>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	200000d0 	.word	0x200000d0

080011f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011f4:	f7ff fff0 	bl	80011d8 <HAL_RCC_GetHCLKFreq>
 80011f8:	4602      	mov	r2, r0
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	0a9b      	lsrs	r3, r3, #10
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	4903      	ldr	r1, [pc, #12]	; (8001214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001206:	5ccb      	ldrb	r3, [r1, r3]
 8001208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800120c:	4618      	mov	r0, r3
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40023800 	.word	0x40023800
 8001214:	08007014 	.word	0x08007014

08001218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800121c:	f7ff ffdc 	bl	80011d8 <HAL_RCC_GetHCLKFreq>
 8001220:	4602      	mov	r2, r0
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	0b5b      	lsrs	r3, r3, #13
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	4903      	ldr	r1, [pc, #12]	; (800123c <HAL_RCC_GetPCLK2Freq+0x24>)
 800122e:	5ccb      	ldrb	r3, [r1, r3]
 8001230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001234:	4618      	mov	r0, r3
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40023800 	.word	0x40023800
 800123c:	08007014 	.word	0x08007014

08001240 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001246:	f7ff fcf9 	bl	8000c3c <HAL_GetTick>
 800124a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800124c:	4b72      	ldr	r3, [pc, #456]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a71      	ldr	r2, [pc, #452]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125a:	f7ff fcef 	bl	8000c3c <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e0d0      	b.n	800140e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800126c:	4b6a      	ldr	r3, [pc, #424]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0f0      	beq.n	800125a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8001278:	4b67      	ldr	r3, [pc, #412]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a66      	ldr	r2, [pc, #408]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 800127e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001282:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001284:	f7ff fcda 	bl	8000c3c <HAL_GetTick>
 8001288:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800128a:	4b63      	ldr	r3, [pc, #396]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001292:	f7ff fcd3 	bl	8000c3c <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e0b2      	b.n	800140e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80012a8:	4b5b      	ldr	r3, [pc, #364]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1ee      	bne.n	8001292 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80012b4:	f7ff fcc2 	bl	8000c3c <HAL_GetTick>
 80012b8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80012ba:	4b57      	ldr	r3, [pc, #348]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a56      	ldr	r2, [pc, #344]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80012c0:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80012c4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fcb8 	bl	8000c3c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e099      	b.n	800140e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80012da:	4b4f      	ldr	r3, [pc, #316]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80012e6:	f7ff fca9 	bl	8000c3c <HAL_GetTick>
 80012ea:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80012ec:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a49      	ldr	r2, [pc, #292]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80012f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012f6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fa:	f7ff fc9f 	bl	8000c3c <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e080      	b.n	800140e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800130c:	4b42      	ldr	r3, [pc, #264]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f0      	bne.n	80012fa <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001318:	f7ff fc90 	bl	8000c3c <HAL_GetTick>
 800131c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800131e:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a3d      	ldr	r2, [pc, #244]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 8001324:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001328:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800132c:	f7ff fc86 	bl	8000c3c <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e067      	b.n	800140e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800134a:	f7ff fc77 	bl	8000c3c <HAL_GetTick>
 800134e:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8001350:	4b31      	ldr	r3, [pc, #196]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a30      	ldr	r2, [pc, #192]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 8001356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800135a:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800135e:	f7ff fc6d 	bl	8000c3c <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e04e      	b.n	800140e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001370:	4b29      	ldr	r3, [pc, #164]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f0      	bne.n	800135e <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 800137e:	4a27      	ldr	r2, [pc, #156]	; (800141c <HAL_RCC_DeInit+0x1dc>)
 8001380:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 8001384:	4a26      	ldr	r2, [pc, #152]	; (8001420 <HAL_RCC_DeInit+0x1e0>)
 8001386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 800138c:	4a24      	ldr	r2, [pc, #144]	; (8001420 <HAL_RCC_DeInit+0x1e0>)
 800138e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	4a20      	ldr	r2, [pc, #128]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 8001398:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800139c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80013a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80013b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	4a17      	ldr	r2, [pc, #92]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80013bc:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80013c0:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80013c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	4a11      	ldr	r2, [pc, #68]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80013d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80013dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80013e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <HAL_RCC_DeInit+0x1d8>)
 80013ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013f0:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_RCC_DeInit+0x1e4>)
 80013f4:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <HAL_RCC_DeInit+0x1e8>)
 80013f6:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_RCC_DeInit+0x1ec>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fbed 	bl	8000bdc <HAL_InitTick>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 800140c:	2300      	movs	r3, #0
  }
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	04003010 	.word	0x04003010
 8001420:	24003000 	.word	0x24003000
 8001424:	200000d0 	.word	0x200000d0
 8001428:	00f42400 	.word	0x00f42400
 800142c:	200000d4 	.word	0x200000d4

08001430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e041      	b.n	80014c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d106      	bne.n	800145c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fa3e 	bl	80008d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3304      	adds	r3, #4
 800146c:	4619      	mov	r1, r3
 800146e:	4610      	mov	r0, r2
 8001470:	f000 f968 	bl	8001744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d122      	bne.n	800152a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d11b      	bne.n	800152a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f06f 0202 	mvn.w	r2, #2
 80014fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f8f8 	bl	8001706 <HAL_TIM_IC_CaptureCallback>
 8001516:	e005      	b.n	8001524 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f8ea 	bl	80016f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f8fb 	bl	800171a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b04      	cmp	r3, #4
 8001536:	d122      	bne.n	800157e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	2b04      	cmp	r3, #4
 8001544:	d11b      	bne.n	800157e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f06f 0204 	mvn.w	r2, #4
 800154e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f8ce 	bl	8001706 <HAL_TIM_IC_CaptureCallback>
 800156a:	e005      	b.n	8001578 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f8c0 	bl	80016f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f8d1 	bl	800171a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b08      	cmp	r3, #8
 800158a:	d122      	bne.n	80015d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b08      	cmp	r3, #8
 8001598:	d11b      	bne.n	80015d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f06f 0208 	mvn.w	r2, #8
 80015a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2204      	movs	r2, #4
 80015a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f8a4 	bl	8001706 <HAL_TIM_IC_CaptureCallback>
 80015be:	e005      	b.n	80015cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f896 	bl	80016f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f8a7 	bl	800171a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b10      	cmp	r3, #16
 80015de:	d122      	bne.n	8001626 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d11b      	bne.n	8001626 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f06f 0210 	mvn.w	r2, #16
 80015f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2208      	movs	r2, #8
 80015fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f87a 	bl	8001706 <HAL_TIM_IC_CaptureCallback>
 8001612:	e005      	b.n	8001620 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f86c 	bl	80016f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f87d 	bl	800171a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b01      	cmp	r3, #1
 8001632:	d10e      	bne.n	8001652 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b01      	cmp	r3, #1
 8001640:	d107      	bne.n	8001652 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f06f 0201 	mvn.w	r2, #1
 800164a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f846 	bl	80016de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165c:	2b80      	cmp	r3, #128	; 0x80
 800165e:	d10e      	bne.n	800167e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166a:	2b80      	cmp	r3, #128	; 0x80
 800166c:	d107      	bne.n	800167e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f989 	bl	8001990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001688:	2b40      	cmp	r3, #64	; 0x40
 800168a:	d10e      	bne.n	80016aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001696:	2b40      	cmp	r3, #64	; 0x40
 8001698:	d107      	bne.n	80016aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f842 	bl	800172e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	d10e      	bne.n	80016d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f003 0320 	and.w	r3, r3, #32
 80016c2:	2b20      	cmp	r3, #32
 80016c4:	d107      	bne.n	80016d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f06f 0220 	mvn.w	r2, #32
 80016ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f953 	bl	800197c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a40      	ldr	r2, [pc, #256]	; (8001858 <TIM_Base_SetConfig+0x114>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d013      	beq.n	8001784 <TIM_Base_SetConfig+0x40>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001762:	d00f      	beq.n	8001784 <TIM_Base_SetConfig+0x40>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a3d      	ldr	r2, [pc, #244]	; (800185c <TIM_Base_SetConfig+0x118>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d00b      	beq.n	8001784 <TIM_Base_SetConfig+0x40>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a3c      	ldr	r2, [pc, #240]	; (8001860 <TIM_Base_SetConfig+0x11c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d007      	beq.n	8001784 <TIM_Base_SetConfig+0x40>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a3b      	ldr	r2, [pc, #236]	; (8001864 <TIM_Base_SetConfig+0x120>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d003      	beq.n	8001784 <TIM_Base_SetConfig+0x40>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a3a      	ldr	r2, [pc, #232]	; (8001868 <TIM_Base_SetConfig+0x124>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d108      	bne.n	8001796 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800178a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a2f      	ldr	r2, [pc, #188]	; (8001858 <TIM_Base_SetConfig+0x114>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d02b      	beq.n	80017f6 <TIM_Base_SetConfig+0xb2>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a4:	d027      	beq.n	80017f6 <TIM_Base_SetConfig+0xb2>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a2c      	ldr	r2, [pc, #176]	; (800185c <TIM_Base_SetConfig+0x118>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d023      	beq.n	80017f6 <TIM_Base_SetConfig+0xb2>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a2b      	ldr	r2, [pc, #172]	; (8001860 <TIM_Base_SetConfig+0x11c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01f      	beq.n	80017f6 <TIM_Base_SetConfig+0xb2>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a2a      	ldr	r2, [pc, #168]	; (8001864 <TIM_Base_SetConfig+0x120>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d01b      	beq.n	80017f6 <TIM_Base_SetConfig+0xb2>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a29      	ldr	r2, [pc, #164]	; (8001868 <TIM_Base_SetConfig+0x124>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d017      	beq.n	80017f6 <TIM_Base_SetConfig+0xb2>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a28      	ldr	r2, [pc, #160]	; (800186c <TIM_Base_SetConfig+0x128>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d013      	beq.n	80017f6 <TIM_Base_SetConfig+0xb2>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a27      	ldr	r2, [pc, #156]	; (8001870 <TIM_Base_SetConfig+0x12c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d00f      	beq.n	80017f6 <TIM_Base_SetConfig+0xb2>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a26      	ldr	r2, [pc, #152]	; (8001874 <TIM_Base_SetConfig+0x130>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00b      	beq.n	80017f6 <TIM_Base_SetConfig+0xb2>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a25      	ldr	r2, [pc, #148]	; (8001878 <TIM_Base_SetConfig+0x134>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <TIM_Base_SetConfig+0xb2>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a24      	ldr	r2, [pc, #144]	; (800187c <TIM_Base_SetConfig+0x138>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d003      	beq.n	80017f6 <TIM_Base_SetConfig+0xb2>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a23      	ldr	r2, [pc, #140]	; (8001880 <TIM_Base_SetConfig+0x13c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d108      	bne.n	8001808 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	4313      	orrs	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <TIM_Base_SetConfig+0x114>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d003      	beq.n	800183c <TIM_Base_SetConfig+0xf8>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a0c      	ldr	r2, [pc, #48]	; (8001868 <TIM_Base_SetConfig+0x124>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d103      	bne.n	8001844 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	615a      	str	r2, [r3, #20]
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40010000 	.word	0x40010000
 800185c:	40000400 	.word	0x40000400
 8001860:	40000800 	.word	0x40000800
 8001864:	40000c00 	.word	0x40000c00
 8001868:	40010400 	.word	0x40010400
 800186c:	40014000 	.word	0x40014000
 8001870:	40014400 	.word	0x40014400
 8001874:	40014800 	.word	0x40014800
 8001878:	40001800 	.word	0x40001800
 800187c:	40001c00 	.word	0x40001c00
 8001880:	40002000 	.word	0x40002000

08001884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001898:	2302      	movs	r3, #2
 800189a:	e05a      	b.n	8001952 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a21      	ldr	r2, [pc, #132]	; (8001960 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d022      	beq.n	8001926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e8:	d01d      	beq.n	8001926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d018      	beq.n	8001926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a1a      	ldr	r2, [pc, #104]	; (800196c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d00e      	beq.n	8001926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a18      	ldr	r2, [pc, #96]	; (8001970 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d009      	beq.n	8001926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a17      	ldr	r2, [pc, #92]	; (8001974 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d004      	beq.n	8001926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a15      	ldr	r2, [pc, #84]	; (8001978 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d10c      	bne.n	8001940 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800192c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	4313      	orrs	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40010000 	.word	0x40010000
 8001964:	40000400 	.word	0x40000400
 8001968:	40000800 	.word	0x40000800
 800196c:	40000c00 	.word	0x40000c00
 8001970:	40010400 	.word	0x40010400
 8001974:	40014000 	.word	0x40014000
 8001978:	40001800 	.word	0x40001800

0800197c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e03f      	b.n	8001a36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d106      	bne.n	80019d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7fe ffac 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2224      	movs	r2, #36	; 0x24
 80019d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f829 	bl	8001a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2220      	movs	r2, #32
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a44:	b0c0      	sub	sp, #256	; 0x100
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a5c:	68d9      	ldr	r1, [r3, #12]
 8001a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	ea40 0301 	orr.w	r3, r0, r1
 8001a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001a98:	f021 010c 	bic.w	r1, r1, #12
 8001a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aba:	6999      	ldr	r1, [r3, #24]
 8001abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	ea40 0301 	orr.w	r3, r0, r1
 8001ac6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b8f      	ldr	r3, [pc, #572]	; (8001d0c <UART_SetConfig+0x2cc>)
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d005      	beq.n	8001ae0 <UART_SetConfig+0xa0>
 8001ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b8d      	ldr	r3, [pc, #564]	; (8001d10 <UART_SetConfig+0x2d0>)
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d104      	bne.n	8001aea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ae0:	f7ff fb9a 	bl	8001218 <HAL_RCC_GetPCLK2Freq>
 8001ae4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ae8:	e003      	b.n	8001af2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001aea:	f7ff fb81 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
 8001aee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001afc:	f040 810c 	bne.w	8001d18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b04:	2200      	movs	r2, #0
 8001b06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001b0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001b0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001b12:	4622      	mov	r2, r4
 8001b14:	462b      	mov	r3, r5
 8001b16:	1891      	adds	r1, r2, r2
 8001b18:	65b9      	str	r1, [r7, #88]	; 0x58
 8001b1a:	415b      	adcs	r3, r3
 8001b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b22:	4621      	mov	r1, r4
 8001b24:	eb12 0801 	adds.w	r8, r2, r1
 8001b28:	4629      	mov	r1, r5
 8001b2a:	eb43 0901 	adc.w	r9, r3, r1
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b42:	4690      	mov	r8, r2
 8001b44:	4699      	mov	r9, r3
 8001b46:	4623      	mov	r3, r4
 8001b48:	eb18 0303 	adds.w	r3, r8, r3
 8001b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001b50:	462b      	mov	r3, r5
 8001b52:	eb49 0303 	adc.w	r3, r9, r3
 8001b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001b66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001b6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001b6e:	460b      	mov	r3, r1
 8001b70:	18db      	adds	r3, r3, r3
 8001b72:	653b      	str	r3, [r7, #80]	; 0x50
 8001b74:	4613      	mov	r3, r2
 8001b76:	eb42 0303 	adc.w	r3, r2, r3
 8001b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8001b7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001b84:	f7fe fb84 	bl	8000290 <__aeabi_uldivmod>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <UART_SetConfig+0x2d4>)
 8001b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	011c      	lsls	r4, r3, #4
 8001b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ba0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ba4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ba8:	4642      	mov	r2, r8
 8001baa:	464b      	mov	r3, r9
 8001bac:	1891      	adds	r1, r2, r2
 8001bae:	64b9      	str	r1, [r7, #72]	; 0x48
 8001bb0:	415b      	adcs	r3, r3
 8001bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bb8:	4641      	mov	r1, r8
 8001bba:	eb12 0a01 	adds.w	sl, r2, r1
 8001bbe:	4649      	mov	r1, r9
 8001bc0:	eb43 0b01 	adc.w	fp, r3, r1
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001bd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001bd8:	4692      	mov	sl, r2
 8001bda:	469b      	mov	fp, r3
 8001bdc:	4643      	mov	r3, r8
 8001bde:	eb1a 0303 	adds.w	r3, sl, r3
 8001be2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001be6:	464b      	mov	r3, r9
 8001be8:	eb4b 0303 	adc.w	r3, fp, r3
 8001bec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001bfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001c00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001c04:	460b      	mov	r3, r1
 8001c06:	18db      	adds	r3, r3, r3
 8001c08:	643b      	str	r3, [r7, #64]	; 0x40
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	eb42 0303 	adc.w	r3, r2, r3
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
 8001c12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001c1a:	f7fe fb39 	bl	8000290 <__aeabi_uldivmod>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4611      	mov	r1, r2
 8001c24:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <UART_SetConfig+0x2d4>)
 8001c26:	fba3 2301 	umull	r2, r3, r3, r1
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	2264      	movs	r2, #100	; 0x64
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	1acb      	subs	r3, r1, r3
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001c3a:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <UART_SetConfig+0x2d4>)
 8001c3c:	fba3 2302 	umull	r2, r3, r3, r2
 8001c40:	095b      	lsrs	r3, r3, #5
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c48:	441c      	add	r4, r3
 8001c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001c5c:	4642      	mov	r2, r8
 8001c5e:	464b      	mov	r3, r9
 8001c60:	1891      	adds	r1, r2, r2
 8001c62:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c64:	415b      	adcs	r3, r3
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c6c:	4641      	mov	r1, r8
 8001c6e:	1851      	adds	r1, r2, r1
 8001c70:	6339      	str	r1, [r7, #48]	; 0x30
 8001c72:	4649      	mov	r1, r9
 8001c74:	414b      	adcs	r3, r1
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001c84:	4659      	mov	r1, fp
 8001c86:	00cb      	lsls	r3, r1, #3
 8001c88:	4651      	mov	r1, sl
 8001c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c8e:	4651      	mov	r1, sl
 8001c90:	00ca      	lsls	r2, r1, #3
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	4603      	mov	r3, r0
 8001c98:	4642      	mov	r2, r8
 8001c9a:	189b      	adds	r3, r3, r2
 8001c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ca0:	464b      	mov	r3, r9
 8001ca2:	460a      	mov	r2, r1
 8001ca4:	eb42 0303 	adc.w	r3, r2, r3
 8001ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001cb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001cbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	18db      	adds	r3, r3, r3
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	eb42 0303 	adc.w	r3, r2, r3
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001cd6:	f7fe fadb 	bl	8000290 <__aeabi_uldivmod>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <UART_SetConfig+0x2d4>)
 8001ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ce4:	095b      	lsrs	r3, r3, #5
 8001ce6:	2164      	movs	r1, #100	; 0x64
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	3332      	adds	r3, #50	; 0x32
 8001cf2:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <UART_SetConfig+0x2d4>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	f003 0207 	and.w	r2, r3, #7
 8001cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4422      	add	r2, r4
 8001d06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001d08:	e106      	b.n	8001f18 <UART_SetConfig+0x4d8>
 8001d0a:	bf00      	nop
 8001d0c:	40011000 	.word	0x40011000
 8001d10:	40011400 	.word	0x40011400
 8001d14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001d26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001d2a:	4642      	mov	r2, r8
 8001d2c:	464b      	mov	r3, r9
 8001d2e:	1891      	adds	r1, r2, r2
 8001d30:	6239      	str	r1, [r7, #32]
 8001d32:	415b      	adcs	r3, r3
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
 8001d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d3a:	4641      	mov	r1, r8
 8001d3c:	1854      	adds	r4, r2, r1
 8001d3e:	4649      	mov	r1, r9
 8001d40:	eb43 0501 	adc.w	r5, r3, r1
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	00eb      	lsls	r3, r5, #3
 8001d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d52:	00e2      	lsls	r2, r4, #3
 8001d54:	4614      	mov	r4, r2
 8001d56:	461d      	mov	r5, r3
 8001d58:	4643      	mov	r3, r8
 8001d5a:	18e3      	adds	r3, r4, r3
 8001d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d60:	464b      	mov	r3, r9
 8001d62:	eb45 0303 	adc.w	r3, r5, r3
 8001d66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d86:	4629      	mov	r1, r5
 8001d88:	008b      	lsls	r3, r1, #2
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d90:	4621      	mov	r1, r4
 8001d92:	008a      	lsls	r2, r1, #2
 8001d94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001d98:	f7fe fa7a 	bl	8000290 <__aeabi_uldivmod>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4b60      	ldr	r3, [pc, #384]	; (8001f24 <UART_SetConfig+0x4e4>)
 8001da2:	fba3 2302 	umull	r2, r3, r3, r2
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	011c      	lsls	r4, r3, #4
 8001daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dae:	2200      	movs	r2, #0
 8001db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001db4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001db8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001dbc:	4642      	mov	r2, r8
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	1891      	adds	r1, r2, r2
 8001dc2:	61b9      	str	r1, [r7, #24]
 8001dc4:	415b      	adcs	r3, r3
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dcc:	4641      	mov	r1, r8
 8001dce:	1851      	adds	r1, r2, r1
 8001dd0:	6139      	str	r1, [r7, #16]
 8001dd2:	4649      	mov	r1, r9
 8001dd4:	414b      	adcs	r3, r1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001de4:	4659      	mov	r1, fp
 8001de6:	00cb      	lsls	r3, r1, #3
 8001de8:	4651      	mov	r1, sl
 8001dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dee:	4651      	mov	r1, sl
 8001df0:	00ca      	lsls	r2, r1, #3
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	4603      	mov	r3, r0
 8001df8:	4642      	mov	r2, r8
 8001dfa:	189b      	adds	r3, r3, r2
 8001dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e00:	464b      	mov	r3, r9
 8001e02:	460a      	mov	r2, r1
 8001e04:	eb42 0303 	adc.w	r3, r2, r3
 8001e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001e24:	4649      	mov	r1, r9
 8001e26:	008b      	lsls	r3, r1, #2
 8001e28:	4641      	mov	r1, r8
 8001e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e2e:	4641      	mov	r1, r8
 8001e30:	008a      	lsls	r2, r1, #2
 8001e32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001e36:	f7fe fa2b 	bl	8000290 <__aeabi_uldivmod>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <UART_SetConfig+0x4e4>)
 8001e42:	fba3 2301 	umull	r2, r3, r3, r1
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2264      	movs	r2, #100	; 0x64
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	1acb      	subs	r3, r1, r3
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	3332      	adds	r3, #50	; 0x32
 8001e54:	4a33      	ldr	r2, [pc, #204]	; (8001f24 <UART_SetConfig+0x4e4>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e60:	441c      	add	r4, r3
 8001e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e66:	2200      	movs	r2, #0
 8001e68:	673b      	str	r3, [r7, #112]	; 0x70
 8001e6a:	677a      	str	r2, [r7, #116]	; 0x74
 8001e6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001e70:	4642      	mov	r2, r8
 8001e72:	464b      	mov	r3, r9
 8001e74:	1891      	adds	r1, r2, r2
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	415b      	adcs	r3, r3
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e80:	4641      	mov	r1, r8
 8001e82:	1851      	adds	r1, r2, r1
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	4649      	mov	r1, r9
 8001e88:	414b      	adcs	r3, r1
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001e98:	4659      	mov	r1, fp
 8001e9a:	00cb      	lsls	r3, r1, #3
 8001e9c:	4651      	mov	r1, sl
 8001e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ea2:	4651      	mov	r1, sl
 8001ea4:	00ca      	lsls	r2, r1, #3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4642      	mov	r2, r8
 8001eae:	189b      	adds	r3, r3, r2
 8001eb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	eb42 0303 	adc.w	r3, r2, r3
 8001eba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	663b      	str	r3, [r7, #96]	; 0x60
 8001ec6:	667a      	str	r2, [r7, #100]	; 0x64
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001ed4:	4649      	mov	r1, r9
 8001ed6:	008b      	lsls	r3, r1, #2
 8001ed8:	4641      	mov	r1, r8
 8001eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ede:	4641      	mov	r1, r8
 8001ee0:	008a      	lsls	r2, r1, #2
 8001ee2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ee6:	f7fe f9d3 	bl	8000290 <__aeabi_uldivmod>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <UART_SetConfig+0x4e4>)
 8001ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	2164      	movs	r1, #100	; 0x64
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	3332      	adds	r3, #50	; 0x32
 8001f02:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <UART_SetConfig+0x4e4>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	f003 020f 	and.w	r2, r3, #15
 8001f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4422      	add	r2, r4
 8001f16:	609a      	str	r2, [r3, #8]
}
 8001f18:	bf00      	nop
 8001f1a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f24:	51eb851f 	.word	0x51eb851f

08001f28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f103 0208 	add.w	r2, r3, #8
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f103 0208 	add.w	r2, r3, #8
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f103 0208 	add.w	r2, r3, #8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	601a      	str	r2, [r3, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d103      	bne.n	8001fea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e00c      	b.n	8002004 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3308      	adds	r3, #8
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	e002      	b.n	8001ff8 <vListInsert+0x2e>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	429a      	cmp	r2, r3
 8002002:	d2f6      	bcs.n	8001ff2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	601a      	str	r2, [r3, #0]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6892      	ldr	r2, [r2, #8]
 8002052:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6852      	ldr	r2, [r2, #4]
 800205c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	d103      	bne.n	8002070 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	1e5a      	subs	r2, r3, #1
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10a      	bne.n	80020ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a8:	f383 8811 	msr	BASEPRI, r3
 80020ac:	f3bf 8f6f 	isb	sy
 80020b0:	f3bf 8f4f 	dsb	sy
 80020b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020b6:	bf00      	nop
 80020b8:	e7fe      	b.n	80020b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80020ba:	f002 f8f3 	bl	80042a4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c6:	68f9      	ldr	r1, [r7, #12]
 80020c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	441a      	add	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	3b01      	subs	r3, #1
 80020ec:	68f9      	ldr	r1, [r7, #12]
 80020ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	441a      	add	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	22ff      	movs	r2, #255	; 0xff
 80020fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	22ff      	movs	r2, #255	; 0xff
 8002106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d114      	bne.n	800213a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01a      	beq.n	800214e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	3310      	adds	r3, #16
 800211c:	4618      	mov	r0, r3
 800211e:	f001 f9fb 	bl	8003518 <xTaskRemoveFromEventList>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d012      	beq.n	800214e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <xQueueGenericReset+0xcc>)
 800212a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	f3bf 8f4f 	dsb	sy
 8002134:	f3bf 8f6f 	isb	sy
 8002138:	e009      	b.n	800214e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3310      	adds	r3, #16
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fef2 	bl	8001f28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3324      	adds	r3, #36	; 0x24
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff feed 	bl	8001f28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800214e:	f002 f8d9 	bl	8004304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002152:	2301      	movs	r3, #1
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	e000ed04 	.word	0xe000ed04

08002160 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af02      	add	r7, sp, #8
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	4613      	mov	r3, r2
 800216c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10a      	bne.n	800218a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	613b      	str	r3, [r7, #16]
}
 8002186:	bf00      	nop
 8002188:	e7fe      	b.n	8002188 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	e004      	b.n	80021a0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	3354      	adds	r3, #84	; 0x54
 80021a4:	4618      	mov	r0, r3
 80021a6:	f002 f9a7 	bl	80044f8 <pvPortMalloc>
 80021aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	3354      	adds	r3, #84	; 0x54
 80021b6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021b8:	79fa      	ldrb	r2, [r7, #7]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 f805 	bl	80021d4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80021ca:	69bb      	ldr	r3, [r7, #24]
	}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d103      	bne.n	80021f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e002      	b.n	80021f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002202:	2101      	movs	r1, #1
 8002204:	69b8      	ldr	r0, [r7, #24]
 8002206:	f7ff ff43 	bl	8002090 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2200      	movs	r2, #0
 8002216:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	68f9      	ldr	r1, [r7, #12]
 800221e:	2073      	movs	r0, #115	; 0x73
 8002220:	f003 f92c 	bl	800547c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b090      	sub	sp, #64	; 0x40
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800223a:	2300      	movs	r3, #0
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10a      	bne.n	800225e <xQueueGenericSend+0x32>
	__asm volatile
 8002248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224c:	f383 8811 	msr	BASEPRI, r3
 8002250:	f3bf 8f6f 	isb	sy
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800225a:	bf00      	nop
 800225c:	e7fe      	b.n	800225c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d103      	bne.n	800226c <xQueueGenericSend+0x40>
 8002264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <xQueueGenericSend+0x44>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <xQueueGenericSend+0x46>
 8002270:	2300      	movs	r3, #0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10a      	bne.n	800228c <xQueueGenericSend+0x60>
	__asm volatile
 8002276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227a:	f383 8811 	msr	BASEPRI, r3
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002288:	bf00      	nop
 800228a:	e7fe      	b.n	800228a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d103      	bne.n	800229a <xQueueGenericSend+0x6e>
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <xQueueGenericSend+0x72>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <xQueueGenericSend+0x74>
 800229e:	2300      	movs	r3, #0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10a      	bne.n	80022ba <xQueueGenericSend+0x8e>
	__asm volatile
 80022a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a8:	f383 8811 	msr	BASEPRI, r3
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	623b      	str	r3, [r7, #32]
}
 80022b6:	bf00      	nop
 80022b8:	e7fe      	b.n	80022b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022ba:	f001 fad5 	bl	8003868 <xTaskGetSchedulerState>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <xQueueGenericSend+0x9e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <xQueueGenericSend+0xa2>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <xQueueGenericSend+0xa4>
 80022ce:	2300      	movs	r3, #0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <xQueueGenericSend+0xbe>
	__asm volatile
 80022d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	61fb      	str	r3, [r7, #28]
}
 80022e6:	bf00      	nop
 80022e8:	e7fe      	b.n	80022e8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022ea:	f001 ffdb 	bl	80042a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d302      	bcc.n	8002300 <xQueueGenericSend+0xd4>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d149      	bne.n	8002394 <xQueueGenericSend+0x168>
			{
				traceQUEUE_SEND( pxQueue );
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	4618      	mov	r0, r3
 8002304:	f003 fe46 	bl	8005f94 <SEGGER_SYSVIEW_ShrinkId>
 8002308:	4601      	mov	r1, r0
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2300      	movs	r3, #0
 8002310:	2200      	movs	r2, #0
 8002312:	205a      	movs	r0, #90	; 0x5a
 8002314:	f003 f928 	bl	8005568 <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800231e:	f000 fa8b 	bl	8002838 <prvCopyDataToQueue>
 8002322:	62f8      	str	r0, [r7, #44]	; 0x2c

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00f      	beq.n	800234c <xQueueGenericSend+0x120>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 800232c:	6839      	ldr	r1, [r7, #0]
 800232e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002330:	f000 fc49 	bl	8002bc6 <prvNotifyQueueSetContainer>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d028      	beq.n	800238c <xQueueGenericSend+0x160>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 800233a:	4b57      	ldr	r3, [pc, #348]	; (8002498 <xQueueGenericSend+0x26c>)
 800233c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f3bf 8f4f 	dsb	sy
 8002346:	f3bf 8f6f 	isb	sy
 800234a:	e01f      	b.n	800238c <xQueueGenericSend+0x160>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <xQueueGenericSend+0x14a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	3324      	adds	r3, #36	; 0x24
 8002358:	4618      	mov	r0, r3
 800235a:	f001 f8dd 	bl	8003518 <xTaskRemoveFromEventList>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <xQueueGenericSend+0x160>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8002364:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <xQueueGenericSend+0x26c>)
 8002366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	f3bf 8f6f 	isb	sy
 8002374:	e00a      	b.n	800238c <xQueueGenericSend+0x160>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8002376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002378:	2b00      	cmp	r3, #0
 800237a:	d007      	beq.n	800238c <xQueueGenericSend+0x160>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 800237c:	4b46      	ldr	r3, [pc, #280]	; (8002498 <xQueueGenericSend+0x26c>)
 800237e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800238c:	f001 ffba 	bl	8004304 <vPortExitCritical>
				return pdPASS;
 8002390:	2301      	movs	r3, #1
 8002392:	e07d      	b.n	8002490 <xQueueGenericSend+0x264>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d110      	bne.n	80023bc <xQueueGenericSend+0x190>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800239a:	f001 ffb3 	bl	8004304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	4618      	mov	r0, r3
 80023a2:	f003 fdf7 	bl	8005f94 <SEGGER_SYSVIEW_ShrinkId>
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	460b      	mov	r3, r1
 80023b0:	4601      	mov	r1, r0
 80023b2:	205a      	movs	r0, #90	; 0x5a
 80023b4:	f003 f8d8 	bl	8005568 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	e069      	b.n	8002490 <xQueueGenericSend+0x264>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <xQueueGenericSend+0x1a4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	4618      	mov	r0, r3
 80023c8:	f001 f90c 	bl	80035e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023cc:	2301      	movs	r3, #1
 80023ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023d0:	f001 ff98 	bl	8004304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023d4:	f000 fe52 	bl	800307c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023d8:	f001 ff64 	bl	80042a4 <vPortEnterCritical>
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023e2:	b25b      	sxtb	r3, r3
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d103      	bne.n	80023f2 <xQueueGenericSend+0x1c6>
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023f8:	b25b      	sxtb	r3, r3
 80023fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fe:	d103      	bne.n	8002408 <xQueueGenericSend+0x1dc>
 8002400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002408:	f001 ff7c 	bl	8004304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800240c:	1d3a      	adds	r2, r7, #4
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f001 f8fb 	bl	8003610 <xTaskCheckForTimeOut>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d124      	bne.n	800246a <xQueueGenericSend+0x23e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002422:	f000 fb0f 	bl	8002a44 <prvIsQueueFull>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d018      	beq.n	800245e <xQueueGenericSend+0x232>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	3310      	adds	r3, #16
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f001 f81d 	bl	8003474 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800243a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800243c:	f000 fa8c 	bl	8002958 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002440:	f000 fe2a 	bl	8003098 <xTaskResumeAll>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	f47f af4f 	bne.w	80022ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <xQueueGenericSend+0x26c>)
 800244e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	e745      	b.n	80022ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800245e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002460:	f000 fa7a 	bl	8002958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002464:	f000 fe18 	bl	8003098 <xTaskResumeAll>
 8002468:	e73f      	b.n	80022ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800246a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800246c:	f000 fa74 	bl	8002958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002470:	f000 fe12 	bl	8003098 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	4618      	mov	r0, r3
 8002478:	f003 fd8c 	bl	8005f94 <SEGGER_SYSVIEW_ShrinkId>
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	460b      	mov	r3, r1
 8002486:	4601      	mov	r1, r0
 8002488:	205a      	movs	r0, #90	; 0x5a
 800248a:	f003 f86d 	bl	8005568 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800248e:	2300      	movs	r3, #0
		}
	}
}
 8002490:	4618      	mov	r0, r3
 8002492:	3738      	adds	r7, #56	; 0x38
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	e000ed04 	.word	0xe000ed04

0800249c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08e      	sub	sp, #56	; 0x38
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024c6:	bf00      	nop
 80024c8:	e7fe      	b.n	80024c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d103      	bne.n	80024d8 <xQueueGenericSendFromISR+0x3c>
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <xQueueGenericSendFromISR+0x40>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <xQueueGenericSendFromISR+0x42>
 80024dc:	2300      	movs	r3, #0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80024e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	623b      	str	r3, [r7, #32]
}
 80024f4:	bf00      	nop
 80024f6:	e7fe      	b.n	80024f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d103      	bne.n	8002506 <xQueueGenericSendFromISR+0x6a>
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <xQueueGenericSendFromISR+0x6e>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <xQueueGenericSendFromISR+0x70>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	61fb      	str	r3, [r7, #28]
}
 8002522:	bf00      	nop
 8002524:	e7fe      	b.n	8002524 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002526:	f001 ffa7 	bl	8004478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800252a:	f3ef 8211 	mrs	r2, BASEPRI
 800252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	61ba      	str	r2, [r7, #24]
 8002540:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002542:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	429a      	cmp	r2, r3
 8002550:	d302      	bcc.n	8002558 <xQueueGenericSendFromISR+0xbc>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d148      	bne.n	80025ea <xQueueGenericSendFromISR+0x14e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800255e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002564:	4618      	mov	r0, r3
 8002566:	f003 fd15 	bl	8005f94 <SEGGER_SYSVIEW_ShrinkId>
 800256a:	4601      	mov	r1, r0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	461a      	mov	r2, r3
 8002570:	2060      	movs	r0, #96	; 0x60
 8002572:	f002 ff29 	bl	80053c8 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800257c:	f000 f95c 	bl	8002838 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002580:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002588:	d124      	bne.n	80025d4 <xQueueGenericSendFromISR+0x138>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <xQueueGenericSendFromISR+0x112>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8002592:	6839      	ldr	r1, [r7, #0]
 8002594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002596:	f000 fb16 	bl	8002bc6 <prvNotifyQueueSetContainer>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d021      	beq.n	80025e4 <xQueueGenericSendFromISR+0x148>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d01e      	beq.n	80025e4 <xQueueGenericSendFromISR+0x148>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e01a      	b.n	80025e4 <xQueueGenericSendFromISR+0x148>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d016      	beq.n	80025e4 <xQueueGenericSendFromISR+0x148>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	3324      	adds	r3, #36	; 0x24
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 ffac 	bl	8003518 <xTaskRemoveFromEventList>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00e      	beq.n	80025e4 <xQueueGenericSendFromISR+0x148>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00b      	beq.n	80025e4 <xQueueGenericSendFromISR+0x148>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e007      	b.n	80025e4 <xQueueGenericSendFromISR+0x148>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80025d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025d8:	3301      	adds	r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	b25a      	sxtb	r2, r3
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80025e4:	2301      	movs	r3, #1
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80025e8:	e00b      	b.n	8002602 <xQueueGenericSendFromISR+0x166>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	4618      	mov	r0, r3
 80025ee:	f003 fcd1 	bl	8005f94 <SEGGER_SYSVIEW_ShrinkId>
 80025f2:	4601      	mov	r1, r0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	461a      	mov	r2, r3
 80025f8:	2060      	movs	r0, #96	; 0x60
 80025fa:	f002 fee5 	bl	80053c8 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800260c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800260e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002610:	4618      	mov	r0, r3
 8002612:	3738      	adds	r7, #56	; 0x38
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b08f      	sub	sp, #60	; 0x3c
 800261c:	af02      	add	r7, sp, #8
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002624:	2300      	movs	r3, #0
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10a      	bne.n	8002648 <xQueueReceive+0x30>
	__asm volatile
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	623b      	str	r3, [r7, #32]
}
 8002644:	bf00      	nop
 8002646:	e7fe      	b.n	8002646 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d103      	bne.n	8002656 <xQueueReceive+0x3e>
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <xQueueReceive+0x42>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <xQueueReceive+0x44>
 800265a:	2300      	movs	r3, #0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10a      	bne.n	8002676 <xQueueReceive+0x5e>
	__asm volatile
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	61fb      	str	r3, [r7, #28]
}
 8002672:	bf00      	nop
 8002674:	e7fe      	b.n	8002674 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002676:	f001 f8f7 	bl	8003868 <xTaskGetSchedulerState>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <xQueueReceive+0x6e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <xQueueReceive+0x72>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <xQueueReceive+0x74>
 800268a:	2300      	movs	r3, #0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10a      	bne.n	80026a6 <xQueueReceive+0x8e>
	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	61bb      	str	r3, [r7, #24]
}
 80026a2:	bf00      	nop
 80026a4:	e7fe      	b.n	80026a4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80026a6:	f001 fdfd 	bl	80042a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d02f      	beq.n	8002716 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026ba:	f000 f927 	bl	800290c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c0:	4618      	mov	r0, r3
 80026c2:	f003 fc67 	bl	8005f94 <SEGGER_SYSVIEW_ShrinkId>
 80026c6:	4604      	mov	r4, r0
 80026c8:	2000      	movs	r0, #0
 80026ca:	f003 fc63 	bl	8005f94 <SEGGER_SYSVIEW_ShrinkId>
 80026ce:	4602      	mov	r2, r0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2101      	movs	r1, #1
 80026d4:	9100      	str	r1, [sp, #0]
 80026d6:	4621      	mov	r1, r4
 80026d8:	205c      	movs	r0, #92	; 0x5c
 80026da:	f002 ff45 	bl	8005568 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	1e5a      	subs	r2, r3, #1
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00f      	beq.n	800270e <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	3310      	adds	r3, #16
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 ff10 	bl	8003518 <xTaskRemoveFromEventList>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80026fe:	4b4d      	ldr	r3, [pc, #308]	; (8002834 <xQueueReceive+0x21c>)
 8002700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800270e:	f001 fdf9 	bl	8004304 <vPortExitCritical>
				return pdPASS;
 8002712:	2301      	movs	r3, #1
 8002714:	e08a      	b.n	800282c <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d113      	bne.n	8002744 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800271c:	f001 fdf2 	bl	8004304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	4618      	mov	r0, r3
 8002724:	f003 fc36 	bl	8005f94 <SEGGER_SYSVIEW_ShrinkId>
 8002728:	4604      	mov	r4, r0
 800272a:	2000      	movs	r0, #0
 800272c:	f003 fc32 	bl	8005f94 <SEGGER_SYSVIEW_ShrinkId>
 8002730:	4602      	mov	r2, r0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2101      	movs	r1, #1
 8002736:	9100      	str	r1, [sp, #0]
 8002738:	4621      	mov	r1, r4
 800273a:	205c      	movs	r0, #92	; 0x5c
 800273c:	f002 ff14 	bl	8005568 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8002740:	2300      	movs	r3, #0
 8002742:	e073      	b.n	800282c <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002746:	2b00      	cmp	r3, #0
 8002748:	d106      	bne.n	8002758 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800274a:	f107 0310 	add.w	r3, r7, #16
 800274e:	4618      	mov	r0, r3
 8002750:	f000 ff48 	bl	80035e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002754:	2301      	movs	r3, #1
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002758:	f001 fdd4 	bl	8004304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800275c:	f000 fc8e 	bl	800307c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002760:	f001 fda0 	bl	80042a4 <vPortEnterCritical>
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800276a:	b25b      	sxtb	r3, r3
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d103      	bne.n	800277a <xQueueReceive+0x162>
 8002772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002780:	b25b      	sxtb	r3, r3
 8002782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002786:	d103      	bne.n	8002790 <xQueueReceive+0x178>
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002790:	f001 fdb8 	bl	8004304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002794:	1d3a      	adds	r2, r7, #4
 8002796:	f107 0310 	add.w	r3, r7, #16
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f000 ff37 	bl	8003610 <xTaskCheckForTimeOut>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d124      	bne.n	80027f2 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027aa:	f000 f935 	bl	8002a18 <prvIsQueueEmpty>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d018      	beq.n	80027e6 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b6:	3324      	adds	r3, #36	; 0x24
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fe59 	bl	8003474 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80027c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027c4:	f000 f8c8 	bl	8002958 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80027c8:	f000 fc66 	bl	8003098 <xTaskResumeAll>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f47f af69 	bne.w	80026a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <xQueueReceive+0x21c>)
 80027d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	e75f      	b.n	80026a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80027e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027e8:	f000 f8b6 	bl	8002958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027ec:	f000 fc54 	bl	8003098 <xTaskResumeAll>
 80027f0:	e759      	b.n	80026a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80027f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027f4:	f000 f8b0 	bl	8002958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027f8:	f000 fc4e 	bl	8003098 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027fe:	f000 f90b 	bl	8002a18 <prvIsQueueEmpty>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	f43f af4e 	beq.w	80026a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	4618      	mov	r0, r3
 800280e:	f003 fbc1 	bl	8005f94 <SEGGER_SYSVIEW_ShrinkId>
 8002812:	4604      	mov	r4, r0
 8002814:	2000      	movs	r0, #0
 8002816:	f003 fbbd 	bl	8005f94 <SEGGER_SYSVIEW_ShrinkId>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2101      	movs	r1, #1
 8002820:	9100      	str	r1, [sp, #0]
 8002822:	4621      	mov	r1, r4
 8002824:	205c      	movs	r0, #92	; 0x5c
 8002826:	f002 fe9f 	bl	8005568 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800282a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800282c:	4618      	mov	r0, r3
 800282e:	3734      	adds	r7, #52	; 0x34
 8002830:	46bd      	mov	sp, r7
 8002832:	bd90      	pop	{r4, r7, pc}
 8002834:	e000ed04 	.word	0xe000ed04

08002838 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10d      	bne.n	8002872 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d14d      	bne.n	80028fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4618      	mov	r0, r3
 8002864:	f001 f81e 	bl	80038a4 <xTaskPriorityDisinherit>
 8002868:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	e043      	b.n	80028fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d119      	bne.n	80028ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6898      	ldr	r0, [r3, #8]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	461a      	mov	r2, r3
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	f003 feae 	bl	80065e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	441a      	add	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d32b      	bcc.n	80028fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	e026      	b.n	80028fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	68d8      	ldr	r0, [r3, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	461a      	mov	r2, r3
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	f003 fe94 	bl	80065e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	425b      	negs	r3, r3
 80028c6:	441a      	add	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d207      	bcs.n	80028e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	425b      	negs	r3, r3
 80028e2:	441a      	add	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d105      	bne.n	80028fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002902:	697b      	ldr	r3, [r7, #20]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d018      	beq.n	8002950 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	441a      	add	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d303      	bcc.n	8002940 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68d9      	ldr	r1, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	461a      	mov	r2, r3
 800294a:	6838      	ldr	r0, [r7, #0]
 800294c:	f003 fe4a 	bl	80065e4 <memcpy>
	}
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002960:	f001 fca0 	bl	80042a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800296a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800296c:	e01f      	b.n	80029ae <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 8002976:	2100      	movs	r1, #0
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f924 	bl	8002bc6 <prvNotifyQueueSetContainer>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d010      	beq.n	80029a6 <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8002984:	f000 fea6 	bl	80036d4 <vTaskMissedYield>
 8002988:	e00d      	b.n	80029a6 <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	2b00      	cmp	r3, #0
 8002990:	d012      	beq.n	80029b8 <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3324      	adds	r3, #36	; 0x24
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fdbe 	bl	8003518 <xTaskRemoveFromEventList>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 80029a2:	f000 fe97 	bl	80036d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	dcdb      	bgt.n	800296e <prvUnlockQueue+0x16>
 80029b6:	e000      	b.n	80029ba <prvUnlockQueue+0x62>
						break;
 80029b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	22ff      	movs	r2, #255	; 0xff
 80029be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80029c2:	f001 fc9f 	bl	8004304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80029c6:	f001 fc6d 	bl	80042a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029d2:	e011      	b.n	80029f8 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d012      	beq.n	8002a02 <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3310      	adds	r3, #16
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fd99 	bl	8003518 <xTaskRemoveFromEventList>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 80029ec:	f000 fe72 	bl	80036d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80029f0:	7bbb      	ldrb	r3, [r7, #14]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	dce9      	bgt.n	80029d4 <prvUnlockQueue+0x7c>
 8002a00:	e000      	b.n	8002a04 <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 8002a02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	22ff      	movs	r2, #255	; 0xff
 8002a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a0c:	f001 fc7a 	bl	8004304 <vPortExitCritical>
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a20:	f001 fc40 	bl	80042a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e001      	b.n	8002a36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a36:	f001 fc65 	bl	8004304 <vPortExitCritical>

	return xReturn;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a4c:	f001 fc2a 	bl	80042a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d102      	bne.n	8002a62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	e001      	b.n	8002a66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a66:	f001 fc4d 	bl	8004304 <vPortExitCritical>

	return xReturn;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	e01e      	b.n	8002ac2 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <vQueueAddToRegistry+0x60>)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d115      	bne.n	8002abc <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002a90:	4910      	ldr	r1, [pc, #64]	; (8002ad4 <vQueueAddToRegistry+0x60>)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002a9a:	4a0e      	ldr	r2, [pc, #56]	; (8002ad4 <vQueueAddToRegistry+0x60>)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 fa73 	bl	8005f94 <SEGGER_SYSVIEW_ShrinkId>
 8002aae:	4601      	mov	r1, r0
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2071      	movs	r0, #113	; 0x71
 8002ab6:	f002 fc87 	bl	80053c8 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8002aba:	e006      	b.n	8002aca <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b07      	cmp	r3, #7
 8002ac6:	d9dd      	bls.n	8002a84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	2000021c 	.word	0x2000021c

08002ad8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ae8:	f001 fbdc 	bl	80042a4 <vPortEnterCritical>
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002af2:	b25b      	sxtb	r3, r3
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d103      	bne.n	8002b02 <vQueueWaitForMessageRestricted+0x2a>
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b08:	b25b      	sxtb	r3, r3
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0e:	d103      	bne.n	8002b18 <vQueueWaitForMessageRestricted+0x40>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b18:	f001 fbf4 	bl	8004304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d106      	bne.n	8002b32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3324      	adds	r3, #36	; 0x24
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fcc5 	bl	80034bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b32:	6978      	ldr	r0, [r7, #20]
 8002b34:	f7ff ff10 	bl	8002958 <prvUnlockQueue>
	}
 8002b38:	bf00      	nop
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2104      	movs	r1, #4
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff fb07 	bl	8002160 <xQueueGenericCreate>
 8002b52:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 8002b54:	68fb      	ldr	r3, [r7, #12]
	}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8002b68:	f001 fb9c 	bl	80042a4 <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	e00b      	b.n	8002b92 <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	e004      	b.n	8002b92 <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdPASS;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8002b92:	f001 fbb7 	bl	8004304 <vPortExitCritical>

		return xReturn;
 8002b96:	68fb      	ldr	r3, [r7, #12]
	}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 8002bae:	f107 030c 	add.w	r3, r7, #12
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff fd2e 	bl	8002618 <xQueueReceive>
		return xReturn;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
	}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b08a      	sub	sp, #40	; 0x28
 8002bca:	af02      	add	r7, sp, #8
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd4:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <prvNotifyQueueSetContainer+0x30>
	__asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	613b      	str	r3, [r7, #16]
}
 8002bf2:	bf00      	nop
 8002bf4:	e7fe      	b.n	8002bf4 <prvNotifyQueueSetContainer+0x2e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d30a      	bcc.n	8002c18 <prvNotifyQueueSetContainer+0x52>
	__asm volatile
 8002c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	60fb      	str	r3, [r7, #12]
}
 8002c14:	bf00      	nop
 8002c16:	e7fe      	b.n	8002c16 <prvNotifyQueueSetContainer+0x50>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d231      	bcs.n	8002c88 <prvNotifyQueueSetContainer+0xc2>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c2a:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f003 f9b0 	bl	8005f94 <SEGGER_SYSVIEW_ShrinkId>
 8002c34:	4601      	mov	r1, r0
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	205a      	movs	r0, #90	; 0x5a
 8002c40:	f002 fc92 	bl	8005568 <SEGGER_SYSVIEW_RecordU32x4>

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8002c44:	1d3b      	adds	r3, r7, #4
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	69b8      	ldr	r0, [r7, #24]
 8002c4c:	f7ff fdf4 	bl	8002838 <prvCopyDataToQueue>
 8002c50:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8002c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d10e      	bne.n	8002c7a <prvNotifyQueueSetContainer+0xb4>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d011      	beq.n	8002c88 <prvNotifyQueueSetContainer+0xc2>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	3324      	adds	r3, #36	; 0x24
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fc55 	bl	8003518 <xTaskRemoveFromEventList>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d009      	beq.n	8002c88 <prvNotifyQueueSetContainer+0xc2>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8002c74:	2301      	movs	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	e006      	b.n	8002c88 <prvNotifyQueueSetContainer+0xc2>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	b25a      	sxtb	r2, r3
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002c88:	69fb      	ldr	r3, [r7, #28]
	}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3720      	adds	r7, #32
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b08c      	sub	sp, #48	; 0x30
 8002c96:	af04      	add	r7, sp, #16
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 fc26 	bl	80044f8 <pvPortMalloc>
 8002cac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00e      	beq.n	8002cd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002cb4:	2058      	movs	r0, #88	; 0x58
 8002cb6:	f001 fc1f 	bl	80044f8 <pvPortMalloc>
 8002cba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc8:	e005      	b.n	8002cd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cca:	6978      	ldr	r0, [r7, #20]
 8002ccc:	f001 fcd8 	bl	8004680 <vPortFree>
 8002cd0:	e001      	b.n	8002cd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cdc:	88fa      	ldrh	r2, [r7, #6]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	9303      	str	r3, [sp, #12]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	9302      	str	r3, [sp, #8]
 8002ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f80e 	bl	8002d14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cf8:	69f8      	ldr	r0, [r7, #28]
 8002cfa:	f000 f893 	bl	8002e24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	e002      	b.n	8002d0a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d04:	f04f 33ff 	mov.w	r3, #4294967295
 8002d08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d0a:	69bb      	ldr	r3, [r7, #24]
	}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	21a5      	movs	r1, #165	; 0xa5
 8002d2e:	f003 fc25 	bl	800657c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f023 0307 	bic.w	r3, r3, #7
 8002d4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <prvInitialiseNewTask+0x58>
	__asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	617b      	str	r3, [r7, #20]
}
 8002d68:	bf00      	nop
 8002d6a:	e7fe      	b.n	8002d6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	e012      	b.n	8002d98 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	4413      	add	r3, r2
 8002d78:	7819      	ldrb	r1, [r3, #0]
 8002d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	4413      	add	r3, r2
 8002d80:	3334      	adds	r3, #52	; 0x34
 8002d82:	460a      	mov	r2, r1
 8002d84:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d006      	beq.n	8002da0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b09      	cmp	r3, #9
 8002d9c:	d9e9      	bls.n	8002d72 <prvInitialiseNewTask+0x5e>
 8002d9e:	e000      	b.n	8002da2 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002da0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d901      	bls.n	8002db4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002db0:	2304      	movs	r3, #4
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dbe:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	3304      	adds	r3, #4
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff f8cc 	bl	8001f68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	3318      	adds	r3, #24
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff f8c7 	bl	8001f68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	f1c3 0205 	rsb	r2, r3, #5
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	2200      	movs	r2, #0
 8002df4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	68f9      	ldr	r1, [r7, #12]
 8002e02:	69b8      	ldr	r0, [r7, #24]
 8002e04:	f001 f922 	bl	800404c <pxPortInitialiseStack>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e1a:	bf00      	nop
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e24:	b5b0      	push	{r4, r5, r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e2c:	f001 fa3a 	bl	80042a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e30:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <prvAddNewTaskToReadyList+0xfc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	4a3a      	ldr	r2, [pc, #232]	; (8002f20 <prvAddNewTaskToReadyList+0xfc>)
 8002e38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e3a:	4b3a      	ldr	r3, [pc, #232]	; (8002f24 <prvAddNewTaskToReadyList+0x100>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e42:	4a38      	ldr	r2, [pc, #224]	; (8002f24 <prvAddNewTaskToReadyList+0x100>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e48:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <prvAddNewTaskToReadyList+0xfc>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d110      	bne.n	8002e72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e50:	f000 fc66 	bl	8003720 <prvInitialiseTaskLists>
 8002e54:	e00d      	b.n	8002e72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e56:	4b34      	ldr	r3, [pc, #208]	; (8002f28 <prvAddNewTaskToReadyList+0x104>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e5e:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <prvAddNewTaskToReadyList+0x100>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d802      	bhi.n	8002e72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e6c:	4a2d      	ldr	r2, [pc, #180]	; (8002f24 <prvAddNewTaskToReadyList+0x100>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e72:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <prvAddNewTaskToReadyList+0x108>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3301      	adds	r3, #1
 8002e78:	4a2c      	ldr	r2, [pc, #176]	; (8002f2c <prvAddNewTaskToReadyList+0x108>)
 8002e7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e7c:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <prvAddNewTaskToReadyList+0x108>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <prvAddNewTaskToReadyList+0x94>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f002 ff5b 	bl	8005d48 <SEGGER_SYSVIEW_OnTaskCreate>
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	461d      	mov	r5, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461c      	mov	r4, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	1ae3      	subs	r3, r4, r3
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	462b      	mov	r3, r5
 8002eb4:	f003 faa8 	bl	8006408 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f002 ffc8 	bl	8005e50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <prvAddNewTaskToReadyList+0x10c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <prvAddNewTaskToReadyList+0x10c>)
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <prvAddNewTaskToReadyList+0x110>)
 8002ee0:	441a      	add	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f7ff f84a 	bl	8001f82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002eee:	f001 fa09 	bl	8004304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <prvAddNewTaskToReadyList+0x104>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00e      	beq.n	8002f18 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <prvAddNewTaskToReadyList+0x100>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d207      	bcs.n	8002f18 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <prvAddNewTaskToReadyList+0x114>)
 8002f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f20:	20000334 	.word	0x20000334
 8002f24:	2000025c 	.word	0x2000025c
 8002f28:	20000340 	.word	0x20000340
 8002f2c:	20000350 	.word	0x20000350
 8002f30:	2000033c 	.word	0x2000033c
 8002f34:	20000260 	.word	0x20000260
 8002f38:	e000ed04 	.word	0xe000ed04

08002f3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01b      	beq.n	8002f86 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <vTaskDelay+0x68>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <vTaskDelay+0x30>
	__asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	60bb      	str	r3, [r7, #8]
}
 8002f68:	bf00      	nop
 8002f6a:	e7fe      	b.n	8002f6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f6c:	f000 f886 	bl	800307c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	2023      	movs	r0, #35	; 0x23
 8002f74:	f002 f9ec 	bl	8005350 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f78:	2100      	movs	r1, #0
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fd1c 	bl	80039b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f80:	f000 f88a 	bl	8003098 <xTaskResumeAll>
 8002f84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d107      	bne.n	8002f9c <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <vTaskDelay+0x6c>)
 8002f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	2000035c 	.word	0x2000035c
 8002fa8:	e000ed04 	.word	0xe000ed04

08002fac <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8002fb4:	f001 f976 	bl	80042a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <uxTaskPriorityGet+0x18>
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <uxTaskPriorityGet+0x30>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	e000      	b.n	8002fc6 <uxTaskPriorityGet+0x1a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8002fce:	f001 f999 	bl	8004304 <vPortExitCritical>

		return uxReturn;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
	}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	2000025c 	.word	0x2000025c

08002fe0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002fe6:	4b1f      	ldr	r3, [pc, #124]	; (8003064 <vTaskStartScheduler+0x84>)
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	2300      	movs	r3, #0
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2282      	movs	r2, #130	; 0x82
 8002ff2:	491d      	ldr	r1, [pc, #116]	; (8003068 <vTaskStartScheduler+0x88>)
 8002ff4:	481d      	ldr	r0, [pc, #116]	; (800306c <vTaskStartScheduler+0x8c>)
 8002ff6:	f7ff fe4c 	bl	8002c92 <xTaskCreate>
 8002ffa:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d102      	bne.n	8003008 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003002:	f000 fd51 	bl	8003aa8 <xTimerCreateTimerTask>
 8003006:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d116      	bne.n	800303c <vTaskStartScheduler+0x5c>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	60bb      	str	r3, [r7, #8]
}
 8003020:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003022:	4b13      	ldr	r3, [pc, #76]	; (8003070 <vTaskStartScheduler+0x90>)
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <vTaskStartScheduler+0x94>)
 800302c:	2201      	movs	r2, #1
 800302e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <vTaskStartScheduler+0x98>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003036:	f001 f893 	bl	8004160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800303a:	e00e      	b.n	800305a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003042:	d10a      	bne.n	800305a <vTaskStartScheduler+0x7a>
	__asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	607b      	str	r3, [r7, #4]
}
 8003056:	bf00      	nop
 8003058:	e7fe      	b.n	8003058 <vTaskStartScheduler+0x78>
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000358 	.word	0x20000358
 8003068:	08006f38 	.word	0x08006f38
 800306c:	080036ed 	.word	0x080036ed
 8003070:	20000354 	.word	0x20000354
 8003074:	20000340 	.word	0x20000340
 8003078:	20000338 	.word	0x20000338

0800307c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <vTaskSuspendAll+0x18>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3301      	adds	r3, #1
 8003086:	4a03      	ldr	r2, [pc, #12]	; (8003094 <vTaskSuspendAll+0x18>)
 8003088:	6013      	str	r3, [r2, #0]
}
 800308a:	bf00      	nop
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	2000035c 	.word	0x2000035c

08003098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030a6:	4b43      	ldr	r3, [pc, #268]	; (80031b4 <xTaskResumeAll+0x11c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10a      	bne.n	80030c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	603b      	str	r3, [r7, #0]
}
 80030c0:	bf00      	nop
 80030c2:	e7fe      	b.n	80030c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030c4:	f001 f8ee 	bl	80042a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030c8:	4b3a      	ldr	r3, [pc, #232]	; (80031b4 <xTaskResumeAll+0x11c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	4a39      	ldr	r2, [pc, #228]	; (80031b4 <xTaskResumeAll+0x11c>)
 80030d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030d2:	4b38      	ldr	r3, [pc, #224]	; (80031b4 <xTaskResumeAll+0x11c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d165      	bne.n	80031a6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030da:	4b37      	ldr	r3, [pc, #220]	; (80031b8 <xTaskResumeAll+0x120>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d061      	beq.n	80031a6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030e2:	e032      	b.n	800314a <xTaskResumeAll+0xb2>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80030e4:	4b35      	ldr	r3, [pc, #212]	; (80031bc <xTaskResumeAll+0x124>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	3318      	adds	r3, #24
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fe ffa3 	bl	800203c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3304      	adds	r3, #4
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe ff9e 	bl	800203c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4618      	mov	r0, r3
 8003104:	f002 fea4 	bl	8005e50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	2201      	movs	r2, #1
 800310e:	409a      	lsls	r2, r3
 8003110:	4b2b      	ldr	r3, [pc, #172]	; (80031c0 <xTaskResumeAll+0x128>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4313      	orrs	r3, r2
 8003116:	4a2a      	ldr	r2, [pc, #168]	; (80031c0 <xTaskResumeAll+0x128>)
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4a27      	ldr	r2, [pc, #156]	; (80031c4 <xTaskResumeAll+0x12c>)
 8003128:	441a      	add	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3304      	adds	r3, #4
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f7fe ff26 	bl	8001f82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313a:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <xTaskResumeAll+0x130>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	429a      	cmp	r2, r3
 8003142:	d302      	bcc.n	800314a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8003144:	4b21      	ldr	r3, [pc, #132]	; (80031cc <xTaskResumeAll+0x134>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800314a:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <xTaskResumeAll+0x124>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1c8      	bne.n	80030e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003158:	f000 fb60 	bl	800381c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800315c:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <xTaskResumeAll+0x138>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d010      	beq.n	800318a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003168:	f000 f858 	bl	800321c <xTaskIncrementTick>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8003172:	4b16      	ldr	r3, [pc, #88]	; (80031cc <xTaskResumeAll+0x134>)
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f1      	bne.n	8003168 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8003184:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <xTaskResumeAll+0x138>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <xTaskResumeAll+0x134>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003192:	2301      	movs	r3, #1
 8003194:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003196:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <xTaskResumeAll+0x13c>)
 8003198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031a6:	f001 f8ad 	bl	8004304 <vPortExitCritical>

	return xAlreadyYielded;
 80031aa:	68bb      	ldr	r3, [r7, #8]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	2000035c 	.word	0x2000035c
 80031b8:	20000334 	.word	0x20000334
 80031bc:	200002f4 	.word	0x200002f4
 80031c0:	2000033c 	.word	0x2000033c
 80031c4:	20000260 	.word	0x20000260
 80031c8:	2000025c 	.word	0x2000025c
 80031cc:	20000348 	.word	0x20000348
 80031d0:	20000344 	.word	0x20000344
 80031d4:	e000ed04 	.word	0xe000ed04

080031d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80031de:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <xTaskGetTickCount+0x1c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80031e4:	687b      	ldr	r3, [r7, #4]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000338 	.word	0x20000338

080031f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031fe:	f001 f93b 	bl	8004478 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <xTaskGetTickCountFromISR+0x20>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800320c:	683b      	ldr	r3, [r7, #0]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000338 	.word	0x20000338

0800321c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003226:	4b53      	ldr	r3, [pc, #332]	; (8003374 <xTaskIncrementTick+0x158>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 8091 	bne.w	8003352 <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003230:	4b51      	ldr	r3, [pc, #324]	; (8003378 <xTaskIncrementTick+0x15c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003238:	4a4f      	ldr	r2, [pc, #316]	; (8003378 <xTaskIncrementTick+0x15c>)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d120      	bne.n	8003286 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003244:	4b4d      	ldr	r3, [pc, #308]	; (800337c <xTaskIncrementTick+0x160>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <xTaskIncrementTick+0x48>
	__asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	603b      	str	r3, [r7, #0]
}
 8003260:	bf00      	nop
 8003262:	e7fe      	b.n	8003262 <xTaskIncrementTick+0x46>
 8003264:	4b45      	ldr	r3, [pc, #276]	; (800337c <xTaskIncrementTick+0x160>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	4b45      	ldr	r3, [pc, #276]	; (8003380 <xTaskIncrementTick+0x164>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a43      	ldr	r2, [pc, #268]	; (800337c <xTaskIncrementTick+0x160>)
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4a43      	ldr	r2, [pc, #268]	; (8003380 <xTaskIncrementTick+0x164>)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4b42      	ldr	r3, [pc, #264]	; (8003384 <xTaskIncrementTick+0x168>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3301      	adds	r3, #1
 800327e:	4a41      	ldr	r2, [pc, #260]	; (8003384 <xTaskIncrementTick+0x168>)
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	f000 facb 	bl	800381c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003286:	4b40      	ldr	r3, [pc, #256]	; (8003388 <xTaskIncrementTick+0x16c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	429a      	cmp	r2, r3
 800328e:	d351      	bcc.n	8003334 <xTaskIncrementTick+0x118>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003290:	4b3a      	ldr	r3, [pc, #232]	; (800337c <xTaskIncrementTick+0x160>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <xTaskIncrementTick+0x82>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <xTaskIncrementTick+0x84>
 800329e:	2300      	movs	r3, #0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d004      	beq.n	80032ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a4:	4b38      	ldr	r3, [pc, #224]	; (8003388 <xTaskIncrementTick+0x16c>)
 80032a6:	f04f 32ff 	mov.w	r2, #4294967295
 80032aa:	601a      	str	r2, [r3, #0]
					break;
 80032ac:	e042      	b.n	8003334 <xTaskIncrementTick+0x118>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032ae:	4b33      	ldr	r3, [pc, #204]	; (800337c <xTaskIncrementTick+0x160>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d203      	bcs.n	80032ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032c6:	4a30      	ldr	r2, [pc, #192]	; (8003388 <xTaskIncrementTick+0x16c>)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6013      	str	r3, [r2, #0]
						break;
 80032cc:	e032      	b.n	8003334 <xTaskIncrementTick+0x118>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	3304      	adds	r3, #4
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe feb2 	bl	800203c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d004      	beq.n	80032ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	3318      	adds	r3, #24
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe fea9 	bl	800203c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f002 fdaf 	bl	8005e50 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	2201      	movs	r2, #1
 80032f8:	409a      	lsls	r2, r3
 80032fa:	4b24      	ldr	r3, [pc, #144]	; (800338c <xTaskIncrementTick+0x170>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	4a22      	ldr	r2, [pc, #136]	; (800338c <xTaskIncrementTick+0x170>)
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <xTaskIncrementTick+0x174>)
 8003312:	441a      	add	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	3304      	adds	r3, #4
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f7fe fe31 	bl	8001f82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003324:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <xTaskIncrementTick+0x178>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	429a      	cmp	r2, r3
 800332c:	d3b0      	bcc.n	8003290 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800332e:	2301      	movs	r3, #1
 8003330:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003332:	e7ad      	b.n	8003290 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003334:	4b17      	ldr	r3, [pc, #92]	; (8003394 <xTaskIncrementTick+0x178>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333a:	4915      	ldr	r1, [pc, #84]	; (8003390 <xTaskIncrementTick+0x174>)
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d907      	bls.n	800335c <xTaskIncrementTick+0x140>
			{
				xSwitchRequired = pdTRUE;
 800334c:	2301      	movs	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	e004      	b.n	800335c <xTaskIncrementTick+0x140>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <xTaskIncrementTick+0x17c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3301      	adds	r3, #1
 8003358:	4a0f      	ldr	r2, [pc, #60]	; (8003398 <xTaskIncrementTick+0x17c>)
 800335a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <xTaskIncrementTick+0x180>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <xTaskIncrementTick+0x14c>
		{
			xSwitchRequired = pdTRUE;
 8003364:	2301      	movs	r3, #1
 8003366:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003368:	697b      	ldr	r3, [r7, #20]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	2000035c 	.word	0x2000035c
 8003378:	20000338 	.word	0x20000338
 800337c:	200002ec 	.word	0x200002ec
 8003380:	200002f0 	.word	0x200002f0
 8003384:	2000034c 	.word	0x2000034c
 8003388:	20000354 	.word	0x20000354
 800338c:	2000033c 	.word	0x2000033c
 8003390:	20000260 	.word	0x20000260
 8003394:	2000025c 	.word	0x2000025c
 8003398:	20000344 	.word	0x20000344
 800339c:	20000348 	.word	0x20000348

080033a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033a6:	4b2d      	ldr	r3, [pc, #180]	; (800345c <vTaskSwitchContext+0xbc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033ae:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <vTaskSwitchContext+0xc0>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033b4:	e04d      	b.n	8003452 <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 80033b6:	4b2a      	ldr	r3, [pc, #168]	; (8003460 <vTaskSwitchContext+0xc0>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80033bc:	4b29      	ldr	r3, [pc, #164]	; (8003464 <vTaskSwitchContext+0xc4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80033ca:	7afb      	ldrb	r3, [r7, #11]
 80033cc:	f1c3 031f 	rsb	r3, r3, #31
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	4925      	ldr	r1, [pc, #148]	; (8003468 <vTaskSwitchContext+0xc8>)
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10a      	bne.n	80033fc <vTaskSwitchContext+0x5c>
	__asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	607b      	str	r3, [r7, #4]
}
 80033f8:	bf00      	nop
 80033fa:	e7fe      	b.n	80033fa <vTaskSwitchContext+0x5a>
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4a18      	ldr	r2, [pc, #96]	; (8003468 <vTaskSwitchContext+0xc8>)
 8003408:	4413      	add	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	3308      	adds	r3, #8
 800341e:	429a      	cmp	r2, r3
 8003420:	d104      	bne.n	800342c <vTaskSwitchContext+0x8c>
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	4a0e      	ldr	r2, [pc, #56]	; (800346c <vTaskSwitchContext+0xcc>)
 8003434:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003436:	4b0d      	ldr	r3, [pc, #52]	; (800346c <vTaskSwitchContext+0xcc>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <vTaskSwitchContext+0xd0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d102      	bne.n	8003448 <vTaskSwitchContext+0xa8>
 8003442:	f002 fc65 	bl	8005d10 <SEGGER_SYSVIEW_OnIdle>
}
 8003446:	e004      	b.n	8003452 <vTaskSwitchContext+0xb2>
		traceTASK_SWITCHED_IN();
 8003448:	4b08      	ldr	r3, [pc, #32]	; (800346c <vTaskSwitchContext+0xcc>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f002 fcbd 	bl	8005dcc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003452:	bf00      	nop
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	2000035c 	.word	0x2000035c
 8003460:	20000348 	.word	0x20000348
 8003464:	2000033c 	.word	0x2000033c
 8003468:	20000260 	.word	0x20000260
 800346c:	2000025c 	.word	0x2000025c
 8003470:	20000358 	.word	0x20000358

08003474 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	60fb      	str	r3, [r7, #12]
}
 8003496:	bf00      	nop
 8003498:	e7fe      	b.n	8003498 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <vTaskPlaceOnEventList+0x44>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3318      	adds	r3, #24
 80034a0:	4619      	mov	r1, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe fd91 	bl	8001fca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034a8:	2101      	movs	r1, #1
 80034aa:	6838      	ldr	r0, [r7, #0]
 80034ac:	f000 fa84 	bl	80039b8 <prvAddCurrentTaskToDelayedList>
}
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	2000025c 	.word	0x2000025c

080034bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80034ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	617b      	str	r3, [r7, #20]
}
 80034e0:	bf00      	nop
 80034e2:	e7fe      	b.n	80034e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <vTaskPlaceOnEventListRestricted+0x58>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3318      	adds	r3, #24
 80034ea:	4619      	mov	r1, r3
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7fe fd48 	bl	8001f82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295
 80034fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80034fe:	2024      	movs	r0, #36	; 0x24
 8003500:	f001 ff08 	bl	8005314 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	68b8      	ldr	r0, [r7, #8]
 8003508:	f000 fa56 	bl	80039b8 <prvAddCurrentTaskToDelayedList>
	}
 800350c:	bf00      	nop
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	2000025c 	.word	0x2000025c

08003518 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10a      	bne.n	8003544 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	60fb      	str	r3, [r7, #12]
}
 8003540:	bf00      	nop
 8003542:	e7fe      	b.n	8003542 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	3318      	adds	r3, #24
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe fd77 	bl	800203c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800354e:	4b1f      	ldr	r3, [pc, #124]	; (80035cc <xTaskRemoveFromEventList+0xb4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d120      	bne.n	8003598 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	3304      	adds	r3, #4
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe fd6e 	bl	800203c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4618      	mov	r0, r3
 8003564:	f002 fc74 	bl	8005e50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	2201      	movs	r2, #1
 800356e:	409a      	lsls	r2, r3
 8003570:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <xTaskRemoveFromEventList+0xb8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4313      	orrs	r3, r2
 8003576:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <xTaskRemoveFromEventList+0xb8>)
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4a13      	ldr	r2, [pc, #76]	; (80035d4 <xTaskRemoveFromEventList+0xbc>)
 8003588:	441a      	add	r2, r3
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	3304      	adds	r3, #4
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f7fe fcf6 	bl	8001f82 <vListInsertEnd>
 8003596:	e005      	b.n	80035a4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	3318      	adds	r3, #24
 800359c:	4619      	mov	r1, r3
 800359e:	480e      	ldr	r0, [pc, #56]	; (80035d8 <xTaskRemoveFromEventList+0xc0>)
 80035a0:	f7fe fcef 	bl	8001f82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <xTaskRemoveFromEventList+0xc4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d905      	bls.n	80035be <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035b2:	2301      	movs	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035b6:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <xTaskRemoveFromEventList+0xc8>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e001      	b.n	80035c2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80035c2:	697b      	ldr	r3, [r7, #20]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	2000035c 	.word	0x2000035c
 80035d0:	2000033c 	.word	0x2000033c
 80035d4:	20000260 	.word	0x20000260
 80035d8:	200002f4 	.word	0x200002f4
 80035dc:	2000025c 	.word	0x2000025c
 80035e0:	20000348 	.word	0x20000348

080035e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <vTaskInternalSetTimeOutState+0x24>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <vTaskInternalSetTimeOutState+0x28>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	605a      	str	r2, [r3, #4]
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	2000034c 	.word	0x2000034c
 800360c:	20000338 	.word	0x20000338

08003610 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	613b      	str	r3, [r7, #16]
}
 8003632:	bf00      	nop
 8003634:	e7fe      	b.n	8003634 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10a      	bne.n	8003652 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003640:	f383 8811 	msr	BASEPRI, r3
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	60fb      	str	r3, [r7, #12]
}
 800364e:	bf00      	nop
 8003650:	e7fe      	b.n	8003650 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003652:	f000 fe27 	bl	80042a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <xTaskCheckForTimeOut+0xbc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d102      	bne.n	8003676 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003670:	2300      	movs	r3, #0
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	e023      	b.n	80036be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <xTaskCheckForTimeOut+0xc0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d007      	beq.n	8003692 <xTaskCheckForTimeOut+0x82>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	429a      	cmp	r2, r3
 800368a:	d302      	bcc.n	8003692 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800368c:	2301      	movs	r3, #1
 800368e:	61fb      	str	r3, [r7, #28]
 8003690:	e015      	b.n	80036be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	429a      	cmp	r2, r3
 800369a:	d20b      	bcs.n	80036b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	1ad2      	subs	r2, r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7ff ff9b 	bl	80035e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	e004      	b.n	80036be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036ba:	2301      	movs	r3, #1
 80036bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036be:	f000 fe21 	bl	8004304 <vPortExitCritical>

	return xReturn;
 80036c2:	69fb      	ldr	r3, [r7, #28]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3720      	adds	r7, #32
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20000338 	.word	0x20000338
 80036d0:	2000034c 	.word	0x2000034c

080036d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <vTaskMissedYield+0x14>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
}
 80036de:	bf00      	nop
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	20000348 	.word	0x20000348

080036ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036f4:	f000 f854 	bl	80037a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036f8:	4b07      	ldr	r3, [pc, #28]	; (8003718 <prvIdleTask+0x2c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d907      	bls.n	8003710 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <prvIdleTask+0x30>)
 8003702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003710:	f7fd f8ce 	bl	80008b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003714:	e7ee      	b.n	80036f4 <prvIdleTask+0x8>
 8003716:	bf00      	nop
 8003718:	20000260 	.word	0x20000260
 800371c:	e000ed04 	.word	0xe000ed04

08003720 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	e00c      	b.n	8003746 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4a12      	ldr	r2, [pc, #72]	; (8003780 <prvInitialiseTaskLists+0x60>)
 8003738:	4413      	add	r3, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fbf4 	bl	8001f28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3301      	adds	r3, #1
 8003744:	607b      	str	r3, [r7, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b04      	cmp	r3, #4
 800374a:	d9ef      	bls.n	800372c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800374c:	480d      	ldr	r0, [pc, #52]	; (8003784 <prvInitialiseTaskLists+0x64>)
 800374e:	f7fe fbeb 	bl	8001f28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003752:	480d      	ldr	r0, [pc, #52]	; (8003788 <prvInitialiseTaskLists+0x68>)
 8003754:	f7fe fbe8 	bl	8001f28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003758:	480c      	ldr	r0, [pc, #48]	; (800378c <prvInitialiseTaskLists+0x6c>)
 800375a:	f7fe fbe5 	bl	8001f28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800375e:	480c      	ldr	r0, [pc, #48]	; (8003790 <prvInitialiseTaskLists+0x70>)
 8003760:	f7fe fbe2 	bl	8001f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003764:	480b      	ldr	r0, [pc, #44]	; (8003794 <prvInitialiseTaskLists+0x74>)
 8003766:	f7fe fbdf 	bl	8001f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <prvInitialiseTaskLists+0x78>)
 800376c:	4a05      	ldr	r2, [pc, #20]	; (8003784 <prvInitialiseTaskLists+0x64>)
 800376e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003770:	4b0a      	ldr	r3, [pc, #40]	; (800379c <prvInitialiseTaskLists+0x7c>)
 8003772:	4a05      	ldr	r2, [pc, #20]	; (8003788 <prvInitialiseTaskLists+0x68>)
 8003774:	601a      	str	r2, [r3, #0]
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000260 	.word	0x20000260
 8003784:	200002c4 	.word	0x200002c4
 8003788:	200002d8 	.word	0x200002d8
 800378c:	200002f4 	.word	0x200002f4
 8003790:	20000308 	.word	0x20000308
 8003794:	20000320 	.word	0x20000320
 8003798:	200002ec 	.word	0x200002ec
 800379c:	200002f0 	.word	0x200002f0

080037a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037a6:	e019      	b.n	80037dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037a8:	f000 fd7c 	bl	80042a4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037ac:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <prvCheckTasksWaitingTermination+0x50>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe fc3f 	bl	800203c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037be:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <prvCheckTasksWaitingTermination+0x54>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <prvCheckTasksWaitingTermination+0x54>)
 80037c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <prvCheckTasksWaitingTermination+0x58>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <prvCheckTasksWaitingTermination+0x58>)
 80037d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80037d2:	f000 fd97 	bl	8004304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f810 	bl	80037fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <prvCheckTasksWaitingTermination+0x58>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e1      	bne.n	80037a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000308 	.word	0x20000308
 80037f4:	20000334 	.word	0x20000334
 80037f8:	2000031c 	.word	0x2000031c

080037fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	4618      	mov	r0, r3
 800380a:	f000 ff39 	bl	8004680 <vPortFree>
			vPortFree( pxTCB );
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 ff36 	bl	8004680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <prvResetNextTaskUnblockTime+0x44>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <prvResetNextTaskUnblockTime+0x14>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <prvResetNextTaskUnblockTime+0x16>
 8003830:	2300      	movs	r3, #0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <prvResetNextTaskUnblockTime+0x48>)
 8003838:	f04f 32ff 	mov.w	r2, #4294967295
 800383c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800383e:	e008      	b.n	8003852 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <prvResetNextTaskUnblockTime+0x44>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4a05      	ldr	r2, [pc, #20]	; (8003864 <prvResetNextTaskUnblockTime+0x48>)
 8003850:	6013      	str	r3, [r2, #0]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	200002ec 	.word	0x200002ec
 8003864:	20000354 	.word	0x20000354

08003868 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <xTaskGetSchedulerState+0x34>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003876:	2301      	movs	r3, #1
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	e008      	b.n	800388e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800387c:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <xTaskGetSchedulerState+0x38>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003884:	2302      	movs	r3, #2
 8003886:	607b      	str	r3, [r7, #4]
 8003888:	e001      	b.n	800388e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800388a:	2300      	movs	r3, #0
 800388c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800388e:	687b      	ldr	r3, [r7, #4]
	}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	20000340 	.word	0x20000340
 80038a0:	2000035c 	.word	0x2000035c

080038a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d073      	beq.n	80039a2 <xTaskPriorityDisinherit+0xfe>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80038ba:	4b3c      	ldr	r3, [pc, #240]	; (80039ac <xTaskPriorityDisinherit+0x108>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d00a      	beq.n	80038da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	60fb      	str	r3, [r7, #12]
}
 80038d6:	bf00      	nop
 80038d8:	e7fe      	b.n	80038d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80038e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	60bb      	str	r3, [r7, #8]
}
 80038f4:	bf00      	nop
 80038f6:	e7fe      	b.n	80038f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fc:	1e5a      	subs	r2, r3, #1
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390a:	429a      	cmp	r2, r3
 800390c:	d049      	beq.n	80039a2 <xTaskPriorityDisinherit+0xfe>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d145      	bne.n	80039a2 <xTaskPriorityDisinherit+0xfe>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	3304      	adds	r3, #4
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fb8e 	bl	800203c <uxListRemove>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d115      	bne.n	8003952 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392a:	4921      	ldr	r1, [pc, #132]	; (80039b0 <xTaskPriorityDisinherit+0x10c>)
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <xTaskPriorityDisinherit+0xae>
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	2201      	movs	r2, #1
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43da      	mvns	r2, r3
 8003948:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <xTaskPriorityDisinherit+0x110>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4013      	ands	r3, r2
 800394e:	4a19      	ldr	r2, [pc, #100]	; (80039b4 <xTaskPriorityDisinherit+0x110>)
 8003950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4619      	mov	r1, r3
 8003956:	204a      	movs	r0, #74	; 0x4a
 8003958:	f001 fcfa 	bl	8005350 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	f1c3 0205 	rsb	r2, r3, #5
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	2201      	movs	r2, #1
 8003976:	409a      	lsls	r2, r3
 8003978:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <xTaskPriorityDisinherit+0x110>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4313      	orrs	r3, r2
 800397e:	4a0d      	ldr	r2, [pc, #52]	; (80039b4 <xTaskPriorityDisinherit+0x110>)
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <xTaskPriorityDisinherit+0x10c>)
 8003990:	441a      	add	r2, r3
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	3304      	adds	r3, #4
 8003996:	4619      	mov	r1, r3
 8003998:	4610      	mov	r0, r2
 800399a:	f7fe faf2 	bl	8001f82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800399e:	2301      	movs	r3, #1
 80039a0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039a2:	697b      	ldr	r3, [r7, #20]
	}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	2000025c 	.word	0x2000025c
 80039b0:	20000260 	.word	0x20000260
 80039b4:	2000033c 	.word	0x2000033c

080039b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039c2:	4b32      	ldr	r3, [pc, #200]	; (8003a8c <prvAddCurrentTaskToDelayedList+0xd4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039c8:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe fb34 	bl	800203c <uxListRemove>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10b      	bne.n	80039f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80039da:	4b2d      	ldr	r3, [pc, #180]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	2201      	movs	r2, #1
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43da      	mvns	r2, r3
 80039e8:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <prvAddCurrentTaskToDelayedList+0xdc>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4013      	ands	r3, r2
 80039ee:	4a29      	ldr	r2, [pc, #164]	; (8003a94 <prvAddCurrentTaskToDelayedList+0xdc>)
 80039f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d110      	bne.n	8003a1c <prvAddCurrentTaskToDelayedList+0x64>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00d      	beq.n	8003a1c <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003a00:	4b23      	ldr	r3, [pc, #140]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	211b      	movs	r1, #27
 8003a06:	4618      	mov	r0, r3
 8003a08:	f002 fa64 	bl	8005ed4 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a0c:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4820      	ldr	r0, [pc, #128]	; (8003a98 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003a16:	f7fe fab4 	bl	8001f82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a1a:	e032      	b.n	8003a82 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a24:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d20f      	bcs.n	8003a54 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003a34:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2104      	movs	r1, #4
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f002 fa4a 	bl	8005ed4 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a40:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f7fe fabc 	bl	8001fca <vListInsert>
}
 8003a52:	e016      	b.n	8003a82 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2104      	movs	r1, #4
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f002 fa3a 	bl	8005ed4 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	f7fe faac 	bl	8001fca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a72:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d202      	bcs.n	8003a82 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8003a7c:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	6013      	str	r3, [r2, #0]
}
 8003a82:	bf00      	nop
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000338 	.word	0x20000338
 8003a90:	2000025c 	.word	0x2000025c
 8003a94:	2000033c 	.word	0x2000033c
 8003a98:	20000320 	.word	0x20000320
 8003a9c:	200002f0 	.word	0x200002f0
 8003aa0:	200002ec 	.word	0x200002ec
 8003aa4:	20000354 	.word	0x20000354

08003aa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ab2:	f000 fa95 	bl	8003fe0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ab6:	4b11      	ldr	r3, [pc, #68]	; (8003afc <xTimerCreateTimerTask+0x54>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003abe:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <xTimerCreateTimerTask+0x58>)
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003acc:	490d      	ldr	r1, [pc, #52]	; (8003b04 <xTimerCreateTimerTask+0x5c>)
 8003ace:	480e      	ldr	r0, [pc, #56]	; (8003b08 <xTimerCreateTimerTask+0x60>)
 8003ad0:	f7ff f8df 	bl	8002c92 <xTaskCreate>
 8003ad4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	603b      	str	r3, [r7, #0]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8003af2:	687b      	ldr	r3, [r7, #4]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20000390 	.word	0x20000390
 8003b00:	20000394 	.word	0x20000394
 8003b04:	08006f40 	.word	0x08006f40
 8003b08:	08003c29 	.word	0x08003c29

08003b0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	623b      	str	r3, [r7, #32]
}
 8003b36:	bf00      	nop
 8003b38:	e7fe      	b.n	8003b38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <xTimerGenericCommand+0x98>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d02a      	beq.n	8003b98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	dc18      	bgt.n	8003b86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b54:	f7ff fe88 	bl	8003868 <xTaskGetSchedulerState>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d109      	bne.n	8003b72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b5e:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <xTimerGenericCommand+0x98>)
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	f107 0114 	add.w	r1, r7, #20
 8003b66:	2300      	movs	r3, #0
 8003b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6a:	f7fe fb5f 	bl	800222c <xQueueGenericSend>
 8003b6e:	6278      	str	r0, [r7, #36]	; 0x24
 8003b70:	e012      	b.n	8003b98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <xTimerGenericCommand+0x98>)
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	f107 0114 	add.w	r1, r7, #20
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f7fe fb55 	bl	800222c <xQueueGenericSend>
 8003b82:	6278      	str	r0, [r7, #36]	; 0x24
 8003b84:	e008      	b.n	8003b98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b86:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <xTimerGenericCommand+0x98>)
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	f107 0114 	add.w	r1, r7, #20
 8003b8e:	2300      	movs	r3, #0
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	f7fe fc83 	bl	800249c <xQueueGenericSendFromISR>
 8003b96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3728      	adds	r7, #40	; 0x28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000390 	.word	0x20000390

08003ba8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <prvProcessExpiredTimer+0x7c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fe fa3b 	bl	800203c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d122      	bne.n	8003c14 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	18d1      	adds	r1, r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	6978      	ldr	r0, [r7, #20]
 8003bdc:	f000 f8c8 	bl	8003d70 <prvInsertTimerInActiveList>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d016      	beq.n	8003c14 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003be6:	2300      	movs	r3, #0
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2300      	movs	r3, #0
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	2100      	movs	r1, #0
 8003bf0:	6978      	ldr	r0, [r7, #20]
 8003bf2:	f7ff ff8b 	bl	8003b0c <xTimerGenericCommand>
 8003bf6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10a      	bne.n	8003c14 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	60fb      	str	r3, [r7, #12]
}
 8003c10:	bf00      	nop
 8003c12:	e7fe      	b.n	8003c12 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	6978      	ldr	r0, [r7, #20]
 8003c1a:	4798      	blx	r3
}
 8003c1c:	bf00      	nop
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000388 	.word	0x20000388

08003c28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c30:	f107 0308 	add.w	r3, r7, #8
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 f857 	bl	8003ce8 <prvGetNextExpireTime>
 8003c3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f803 	bl	8003c4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c46:	f000 f8d5 	bl	8003df4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c4a:	e7f1      	b.n	8003c30 <prvTimerTask+0x8>

08003c4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c56:	f7ff fa11 	bl	800307c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c5a:	f107 0308 	add.w	r3, r7, #8
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 f866 	bl	8003d30 <prvSampleTimeNow>
 8003c64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d130      	bne.n	8003cce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <prvProcessTimerOrBlockTask+0x3c>
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d806      	bhi.n	8003c88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c7a:	f7ff fa0d 	bl	8003098 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c7e:	68f9      	ldr	r1, [r7, #12]
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff91 	bl	8003ba8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c86:	e024      	b.n	8003cd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d008      	beq.n	8003ca0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c8e:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <prvProcessTimerOrBlockTask+0x90>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <prvProcessTimerOrBlockTask+0x94>)
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	4619      	mov	r1, r3
 8003cae:	f7fe ff13 	bl	8002ad8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003cb2:	f7ff f9f1 	bl	8003098 <xTaskResumeAll>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <prvProcessTimerOrBlockTask+0x98>)
 8003cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	f3bf 8f6f 	isb	sy
}
 8003ccc:	e001      	b.n	8003cd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003cce:	f7ff f9e3 	bl	8003098 <xTaskResumeAll>
}
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	2000038c 	.word	0x2000038c
 8003ce0:	20000390 	.word	0x20000390
 8003ce4:	e000ed04 	.word	0xe000ed04

08003ce8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <prvGetNextExpireTime+0x44>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bf0c      	ite	eq
 8003cfa:	2301      	moveq	r3, #1
 8003cfc:	2300      	movne	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <prvGetNextExpireTime+0x44>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e001      	b.n	8003d1e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	20000388 	.word	0x20000388

08003d30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d38:	f7ff fa4e 	bl	80031d8 <xTaskGetTickCount>
 8003d3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <prvSampleTimeNow+0x3c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d205      	bcs.n	8003d54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d48:	f000 f8e8 	bl	8003f1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e002      	b.n	8003d5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d5a:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <prvSampleTimeNow+0x3c>)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d60:	68fb      	ldr	r3, [r7, #12]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000398 	.word	0x20000398

08003d70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d812      	bhi.n	8003dbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	1ad2      	subs	r2, r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d302      	bcc.n	8003daa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	e01b      	b.n	8003de2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <prvInsertTimerInActiveList+0x7c>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f7fe f908 	bl	8001fca <vListInsert>
 8003dba:	e012      	b.n	8003de2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d206      	bcs.n	8003dd2 <prvInsertTimerInActiveList+0x62>
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d302      	bcc.n	8003dd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e007      	b.n	8003de2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dd2:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <prvInsertTimerInActiveList+0x80>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f7fe f8f4 	bl	8001fca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003de2:	697b      	ldr	r3, [r7, #20]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	2000038c 	.word	0x2000038c
 8003df0:	20000388 	.word	0x20000388

08003df4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08c      	sub	sp, #48	; 0x30
 8003df8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dfa:	e07c      	b.n	8003ef6 <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	db79      	blt.n	8003ef6 <prvProcessReceivedCommands+0x102>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	3304      	adds	r3, #4
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe f912 	bl	800203c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e18:	1d3b      	adds	r3, r7, #4
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff ff88 	bl	8003d30 <prvSampleTimeNow>
 8003e20:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b09      	cmp	r3, #9
 8003e26:	d865      	bhi.n	8003ef4 <prvProcessReceivedCommands+0x100>
 8003e28:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <prvProcessReceivedCommands+0x3c>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e59 	.word	0x08003e59
 8003e34:	08003e59 	.word	0x08003e59
 8003e38:	08003e59 	.word	0x08003e59
 8003e3c:	08003ef7 	.word	0x08003ef7
 8003e40:	08003eb5 	.word	0x08003eb5
 8003e44:	08003eed 	.word	0x08003eed
 8003e48:	08003e59 	.word	0x08003e59
 8003e4c:	08003e59 	.word	0x08003e59
 8003e50:	08003ef7 	.word	0x08003ef7
 8003e54:	08003eb5 	.word	0x08003eb5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	18d1      	adds	r1, r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a3a      	ldr	r2, [r7, #32]
 8003e64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e66:	f7ff ff83 	bl	8003d70 <prvInsertTimerInActiveList>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d042      	beq.n	8003ef6 <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e76:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d13a      	bne.n	8003ef6 <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	441a      	add	r2, r3
 8003e88:	2300      	movs	r3, #0
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2100      	movs	r1, #0
 8003e90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e92:	f7ff fe3b 	bl	8003b0c <xTimerGenericCommand>
 8003e96:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d12b      	bne.n	8003ef6 <prvProcessReceivedCommands+0x102>
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	61bb      	str	r3, [r7, #24]
}
 8003eb0:	bf00      	nop
 8003eb2:	e7fe      	b.n	8003eb2 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	617b      	str	r3, [r7, #20]
}
 8003ed4:	bf00      	nop
 8003ed6:	e7fe      	b.n	8003ed6 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	699a      	ldr	r2, [r3, #24]
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	18d1      	adds	r1, r2, r3
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	6a3a      	ldr	r2, [r7, #32]
 8003ee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ee6:	f7ff ff43 	bl	8003d70 <prvInsertTimerInActiveList>
					break;
 8003eea:	e004      	b.n	8003ef6 <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8003eec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eee:	f000 fbc7 	bl	8004680 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003ef2:	e000      	b.n	8003ef6 <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
 8003ef4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ef6:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <prvProcessReceivedCommands+0x124>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f107 0108 	add.w	r1, r7, #8
 8003efe:	2200      	movs	r2, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe fb89 	bl	8002618 <xQueueReceive>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f47f af77 	bne.w	8003dfc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003f0e:	bf00      	nop
 8003f10:	bf00      	nop
 8003f12:	3728      	adds	r7, #40	; 0x28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000390 	.word	0x20000390

08003f1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f22:	e045      	b.n	8003fb0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f24:	4b2c      	ldr	r3, [pc, #176]	; (8003fd8 <prvSwitchTimerLists+0xbc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f2e:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <prvSwitchTimerLists+0xbc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe f87d 	bl	800203c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d12e      	bne.n	8003fb0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4413      	add	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d90e      	bls.n	8003f82 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <prvSwitchTimerLists+0xbc>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	f7fe f825 	bl	8001fca <vListInsert>
 8003f80:	e016      	b.n	8003fb0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f82:	2300      	movs	r3, #0
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	2300      	movs	r3, #0
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7ff fdbd 	bl	8003b0c <xTimerGenericCommand>
 8003f92:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	603b      	str	r3, [r7, #0]
}
 8003fac:	bf00      	nop
 8003fae:	e7fe      	b.n	8003fae <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fb0:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <prvSwitchTimerLists+0xbc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1b4      	bne.n	8003f24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <prvSwitchTimerLists+0xbc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <prvSwitchTimerLists+0xc0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <prvSwitchTimerLists+0xbc>)
 8003fc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003fc8:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <prvSwitchTimerLists+0xc0>)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	6013      	str	r3, [r2, #0]
}
 8003fce:	bf00      	nop
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000388 	.word	0x20000388
 8003fdc:	2000038c 	.word	0x2000038c

08003fe0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003fe4:	f000 f95e 	bl	80042a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003fe8:	4b12      	ldr	r3, [pc, #72]	; (8004034 <prvCheckForValidListAndQueue+0x54>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d11d      	bne.n	800402c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003ff0:	4811      	ldr	r0, [pc, #68]	; (8004038 <prvCheckForValidListAndQueue+0x58>)
 8003ff2:	f7fd ff99 	bl	8001f28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003ff6:	4811      	ldr	r0, [pc, #68]	; (800403c <prvCheckForValidListAndQueue+0x5c>)
 8003ff8:	f7fd ff96 	bl	8001f28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003ffc:	4b10      	ldr	r3, [pc, #64]	; (8004040 <prvCheckForValidListAndQueue+0x60>)
 8003ffe:	4a0e      	ldr	r2, [pc, #56]	; (8004038 <prvCheckForValidListAndQueue+0x58>)
 8004000:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004002:	4b10      	ldr	r3, [pc, #64]	; (8004044 <prvCheckForValidListAndQueue+0x64>)
 8004004:	4a0d      	ldr	r2, [pc, #52]	; (800403c <prvCheckForValidListAndQueue+0x5c>)
 8004006:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004008:	2200      	movs	r2, #0
 800400a:	210c      	movs	r1, #12
 800400c:	200a      	movs	r0, #10
 800400e:	f7fe f8a7 	bl	8002160 <xQueueGenericCreate>
 8004012:	4603      	mov	r3, r0
 8004014:	4a07      	ldr	r2, [pc, #28]	; (8004034 <prvCheckForValidListAndQueue+0x54>)
 8004016:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <prvCheckForValidListAndQueue+0x54>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004020:	4b04      	ldr	r3, [pc, #16]	; (8004034 <prvCheckForValidListAndQueue+0x54>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4908      	ldr	r1, [pc, #32]	; (8004048 <prvCheckForValidListAndQueue+0x68>)
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe fd24 	bl	8002a74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800402c:	f000 f96a 	bl	8004304 <vPortExitCritical>
}
 8004030:	bf00      	nop
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20000390 	.word	0x20000390
 8004038:	20000360 	.word	0x20000360
 800403c:	20000374 	.word	0x20000374
 8004040:	20000388 	.word	0x20000388
 8004044:	2000038c 	.word	0x2000038c
 8004048:	08006f48 	.word	0x08006f48

0800404c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3b04      	subs	r3, #4
 800405c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3b04      	subs	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f023 0201 	bic.w	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3b04      	subs	r3, #4
 800407a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800407c:	4a0c      	ldr	r2, [pc, #48]	; (80040b0 <pxPortInitialiseStack+0x64>)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3b14      	subs	r3, #20
 8004086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3b04      	subs	r3, #4
 8004092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f06f 0202 	mvn.w	r2, #2
 800409a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3b20      	subs	r3, #32
 80040a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040a2:	68fb      	ldr	r3, [r7, #12]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	080040b5 	.word	0x080040b5

080040b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040be:	4b12      	ldr	r3, [pc, #72]	; (8004108 <prvTaskExitError+0x54>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c6:	d00a      	beq.n	80040de <prvTaskExitError+0x2a>
	__asm volatile
 80040c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	60fb      	str	r3, [r7, #12]
}
 80040da:	bf00      	nop
 80040dc:	e7fe      	b.n	80040dc <prvTaskExitError+0x28>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	60bb      	str	r3, [r7, #8]
}
 80040f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040f2:	bf00      	nop
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0fc      	beq.n	80040f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	200000dc 	.word	0x200000dc
 800410c:	00000000 	.word	0x00000000

08004110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <pxCurrentTCBConst2>)
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	6808      	ldr	r0, [r1, #0]
 8004116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411a:	f380 8809 	msr	PSP, r0
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8811 	msr	BASEPRI, r0
 800412a:	4770      	bx	lr
 800412c:	f3af 8000 	nop.w

08004130 <pxCurrentTCBConst2>:
 8004130:	2000025c 	.word	0x2000025c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop

08004138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004138:	4808      	ldr	r0, [pc, #32]	; (800415c <prvPortStartFirstTask+0x24>)
 800413a:	6800      	ldr	r0, [r0, #0]
 800413c:	6800      	ldr	r0, [r0, #0]
 800413e:	f380 8808 	msr	MSP, r0
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f380 8814 	msr	CONTROL, r0
 800414a:	b662      	cpsie	i
 800414c:	b661      	cpsie	f
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	df00      	svc	0
 8004158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800415a:	bf00      	nop
 800415c:	e000ed08 	.word	0xe000ed08

08004160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004166:	4b46      	ldr	r3, [pc, #280]	; (8004280 <xPortStartScheduler+0x120>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a46      	ldr	r2, [pc, #280]	; (8004284 <xPortStartScheduler+0x124>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d10a      	bne.n	8004186 <xPortStartScheduler+0x26>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	613b      	str	r3, [r7, #16]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004186:	4b3e      	ldr	r3, [pc, #248]	; (8004280 <xPortStartScheduler+0x120>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a3f      	ldr	r2, [pc, #252]	; (8004288 <xPortStartScheduler+0x128>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d10a      	bne.n	80041a6 <xPortStartScheduler+0x46>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	60fb      	str	r3, [r7, #12]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041a6:	4b39      	ldr	r3, [pc, #228]	; (800428c <xPortStartScheduler+0x12c>)
 80041a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	22ff      	movs	r2, #255	; 0xff
 80041b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	4b31      	ldr	r3, [pc, #196]	; (8004290 <xPortStartScheduler+0x130>)
 80041cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041ce:	4b31      	ldr	r3, [pc, #196]	; (8004294 <xPortStartScheduler+0x134>)
 80041d0:	2207      	movs	r2, #7
 80041d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041d4:	e009      	b.n	80041ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80041d6:	4b2f      	ldr	r3, [pc, #188]	; (8004294 <xPortStartScheduler+0x134>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3b01      	subs	r3, #1
 80041dc:	4a2d      	ldr	r2, [pc, #180]	; (8004294 <xPortStartScheduler+0x134>)
 80041de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b80      	cmp	r3, #128	; 0x80
 80041f4:	d0ef      	beq.n	80041d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041f6:	4b27      	ldr	r3, [pc, #156]	; (8004294 <xPortStartScheduler+0x134>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1c3 0307 	rsb	r3, r3, #7
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d00a      	beq.n	8004218 <xPortStartScheduler+0xb8>
	__asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	60bb      	str	r3, [r7, #8]
}
 8004214:	bf00      	nop
 8004216:	e7fe      	b.n	8004216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004218:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <xPortStartScheduler+0x134>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <xPortStartScheduler+0x134>)
 8004220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004222:	4b1c      	ldr	r3, [pc, #112]	; (8004294 <xPortStartScheduler+0x134>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800422a:	4a1a      	ldr	r2, [pc, #104]	; (8004294 <xPortStartScheduler+0x134>)
 800422c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004236:	4b18      	ldr	r3, [pc, #96]	; (8004298 <xPortStartScheduler+0x138>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a17      	ldr	r2, [pc, #92]	; (8004298 <xPortStartScheduler+0x138>)
 800423c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004242:	4b15      	ldr	r3, [pc, #84]	; (8004298 <xPortStartScheduler+0x138>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a14      	ldr	r2, [pc, #80]	; (8004298 <xPortStartScheduler+0x138>)
 8004248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800424c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800424e:	f000 f8e5 	bl	800441c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004252:	4b12      	ldr	r3, [pc, #72]	; (800429c <xPortStartScheduler+0x13c>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004258:	f000 f904 	bl	8004464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800425c:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <xPortStartScheduler+0x140>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0f      	ldr	r2, [pc, #60]	; (80042a0 <xPortStartScheduler+0x140>)
 8004262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004268:	f7ff ff66 	bl	8004138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800426c:	f7ff f898 	bl	80033a0 <vTaskSwitchContext>
	prvTaskExitError();
 8004270:	f7ff ff20 	bl	80040b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	e000ed00 	.word	0xe000ed00
 8004284:	410fc271 	.word	0x410fc271
 8004288:	410fc270 	.word	0x410fc270
 800428c:	e000e400 	.word	0xe000e400
 8004290:	2000039c 	.word	0x2000039c
 8004294:	200003a0 	.word	0x200003a0
 8004298:	e000ed20 	.word	0xe000ed20
 800429c:	200000dc 	.word	0x200000dc
 80042a0:	e000ef34 	.word	0xe000ef34

080042a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	607b      	str	r3, [r7, #4]
}
 80042bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042be:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <vPortEnterCritical+0x58>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3301      	adds	r3, #1
 80042c4:	4a0d      	ldr	r2, [pc, #52]	; (80042fc <vPortEnterCritical+0x58>)
 80042c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <vPortEnterCritical+0x58>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d10f      	bne.n	80042f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <vPortEnterCritical+0x5c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	603b      	str	r3, [r7, #0]
}
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <vPortEnterCritical+0x4a>
	}
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	200000dc 	.word	0x200000dc
 8004300:	e000ed04 	.word	0xe000ed04

08004304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <vPortExitCritical+0x50>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <vPortExitCritical+0x24>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	607b      	str	r3, [r7, #4]
}
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <vPortExitCritical+0x50>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3b01      	subs	r3, #1
 800432e:	4a09      	ldr	r2, [pc, #36]	; (8004354 <vPortExitCritical+0x50>)
 8004330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <vPortExitCritical+0x50>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d105      	bne.n	8004346 <vPortExitCritical+0x42>
 800433a:	2300      	movs	r3, #0
 800433c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f383 8811 	msr	BASEPRI, r3
}
 8004344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	200000dc 	.word	0x200000dc
	...

08004360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004360:	f3ef 8009 	mrs	r0, PSP
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <pxCurrentTCBConst>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	f01e 0f10 	tst.w	lr, #16
 8004370:	bf08      	it	eq
 8004372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437a:	6010      	str	r0, [r2, #0]
 800437c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004384:	f380 8811 	msr	BASEPRI, r0
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f7ff f806 	bl	80033a0 <vTaskSwitchContext>
 8004394:	f04f 0000 	mov.w	r0, #0
 8004398:	f380 8811 	msr	BASEPRI, r0
 800439c:	bc09      	pop	{r0, r3}
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	6808      	ldr	r0, [r1, #0]
 80043a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a6:	f01e 0f10 	tst.w	lr, #16
 80043aa:	bf08      	it	eq
 80043ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043b0:	f380 8809 	msr	PSP, r0
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	f3af 8000 	nop.w

080043c0 <pxCurrentTCBConst>:
 80043c0:	2000025c 	.word	0x2000025c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop

080043c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	607b      	str	r3, [r7, #4]
}
 80043e0:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 80043e2:	f001 fc1b 	bl	8005c1c <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043e6:	f7fe ff19 	bl	800321c <xTaskIncrementTick>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d006      	beq.n	80043fe <SysTick_Handler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80043f0:	f001 fc72 	bl	8005cd8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043f4:	4b08      	ldr	r3, [pc, #32]	; (8004418 <SysTick_Handler+0x50>)
 80043f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e001      	b.n	8004402 <SysTick_Handler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 80043fe:	f001 fc4f 	bl	8005ca0 <SEGGER_SYSVIEW_RecordExitISR>
 8004402:	2300      	movs	r3, #0
 8004404:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f383 8811 	msr	BASEPRI, r3
}
 800440c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <vPortSetupTimerInterrupt+0x34>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <vPortSetupTimerInterrupt+0x38>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <vPortSetupTimerInterrupt+0x3c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a0a      	ldr	r2, [pc, #40]	; (800445c <vPortSetupTimerInterrupt+0x40>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	099b      	lsrs	r3, r3, #6
 8004438:	4a09      	ldr	r2, [pc, #36]	; (8004460 <vPortSetupTimerInterrupt+0x44>)
 800443a:	3b01      	subs	r3, #1
 800443c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800443e:	4b04      	ldr	r3, [pc, #16]	; (8004450 <vPortSetupTimerInterrupt+0x34>)
 8004440:	2207      	movs	r2, #7
 8004442:	601a      	str	r2, [r3, #0]
}
 8004444:	bf00      	nop
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	e000e010 	.word	0xe000e010
 8004454:	e000e018 	.word	0xe000e018
 8004458:	200000d0 	.word	0x200000d0
 800445c:	10624dd3 	.word	0x10624dd3
 8004460:	e000e014 	.word	0xe000e014

08004464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004474 <vPortEnableVFP+0x10>
 8004468:	6801      	ldr	r1, [r0, #0]
 800446a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800446e:	6001      	str	r1, [r0, #0]
 8004470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004472:	bf00      	nop
 8004474:	e000ed88 	.word	0xe000ed88

08004478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800447e:	f3ef 8305 	mrs	r3, IPSR
 8004482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b0f      	cmp	r3, #15
 8004488:	d914      	bls.n	80044b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800448a:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <vPortValidateInterruptPriority+0x70>)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004494:	4b15      	ldr	r3, [pc, #84]	; (80044ec <vPortValidateInterruptPriority+0x74>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	7afa      	ldrb	r2, [r7, #11]
 800449a:	429a      	cmp	r2, r3
 800449c:	d20a      	bcs.n	80044b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	607b      	str	r3, [r7, #4]
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044b4:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <vPortValidateInterruptPriority+0x78>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044bc:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <vPortValidateInterruptPriority+0x7c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d90a      	bls.n	80044da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	603b      	str	r3, [r7, #0]
}
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <vPortValidateInterruptPriority+0x60>
	}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	e000e3f0 	.word	0xe000e3f0
 80044ec:	2000039c 	.word	0x2000039c
 80044f0:	e000ed0c 	.word	0xe000ed0c
 80044f4:	200003a0 	.word	0x200003a0

080044f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004504:	f7fe fdba 	bl	800307c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004508:	4b58      	ldr	r3, [pc, #352]	; (800466c <pvPortMalloc+0x174>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004510:	f000 f910 	bl	8004734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004514:	4b56      	ldr	r3, [pc, #344]	; (8004670 <pvPortMalloc+0x178>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	f040 808e 	bne.w	800463e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01d      	beq.n	8004564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004528:	2208      	movs	r2, #8
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4413      	add	r3, r2
 800452e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	2b00      	cmp	r3, #0
 8004538:	d014      	beq.n	8004564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f023 0307 	bic.w	r3, r3, #7
 8004540:	3308      	adds	r3, #8
 8004542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <pvPortMalloc+0x6c>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	617b      	str	r3, [r7, #20]
}
 8004560:	bf00      	nop
 8004562:	e7fe      	b.n	8004562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d069      	beq.n	800463e <pvPortMalloc+0x146>
 800456a:	4b42      	ldr	r3, [pc, #264]	; (8004674 <pvPortMalloc+0x17c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	d864      	bhi.n	800463e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004574:	4b40      	ldr	r3, [pc, #256]	; (8004678 <pvPortMalloc+0x180>)
 8004576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004578:	4b3f      	ldr	r3, [pc, #252]	; (8004678 <pvPortMalloc+0x180>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800457e:	e004      	b.n	800458a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	d903      	bls.n	800459c <pvPortMalloc+0xa4>
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f1      	bne.n	8004580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800459c:	4b33      	ldr	r3, [pc, #204]	; (800466c <pvPortMalloc+0x174>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d04b      	beq.n	800463e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2208      	movs	r2, #8
 80045ac:	4413      	add	r3, r2
 80045ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	1ad2      	subs	r2, r2, r3
 80045c0:	2308      	movs	r3, #8
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d91f      	bls.n	8004608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <pvPortMalloc+0xf8>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	613b      	str	r3, [r7, #16]
}
 80045ec:	bf00      	nop
 80045ee:	e7fe      	b.n	80045ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	1ad2      	subs	r2, r2, r3
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004602:	69b8      	ldr	r0, [r7, #24]
 8004604:	f000 f8f8 	bl	80047f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004608:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <pvPortMalloc+0x17c>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	4a18      	ldr	r2, [pc, #96]	; (8004674 <pvPortMalloc+0x17c>)
 8004614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004616:	4b17      	ldr	r3, [pc, #92]	; (8004674 <pvPortMalloc+0x17c>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b18      	ldr	r3, [pc, #96]	; (800467c <pvPortMalloc+0x184>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d203      	bcs.n	800462a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <pvPortMalloc+0x17c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a15      	ldr	r2, [pc, #84]	; (800467c <pvPortMalloc+0x184>)
 8004628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <pvPortMalloc+0x178>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	431a      	orrs	r2, r3
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800463e:	f7fe fd2b 	bl	8003098 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <pvPortMalloc+0x16a>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	60fb      	str	r3, [r7, #12]
}
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <pvPortMalloc+0x168>
	return pvReturn;
 8004662:	69fb      	ldr	r3, [r7, #28]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3728      	adds	r7, #40	; 0x28
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20012fac 	.word	0x20012fac
 8004670:	20012fb8 	.word	0x20012fb8
 8004674:	20012fb0 	.word	0x20012fb0
 8004678:	20012fa4 	.word	0x20012fa4
 800467c:	20012fb4 	.word	0x20012fb4

08004680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d048      	beq.n	8004724 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004692:	2308      	movs	r3, #8
 8004694:	425b      	negs	r3, r3
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4413      	add	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	4b21      	ldr	r3, [pc, #132]	; (800472c <vPortFree+0xac>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <vPortFree+0x44>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	60fb      	str	r3, [r7, #12]
}
 80046c0:	bf00      	nop
 80046c2:	e7fe      	b.n	80046c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <vPortFree+0x62>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	60bb      	str	r3, [r7, #8]
}
 80046de:	bf00      	nop
 80046e0:	e7fe      	b.n	80046e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	4b11      	ldr	r3, [pc, #68]	; (800472c <vPortFree+0xac>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d019      	beq.n	8004724 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d115      	bne.n	8004724 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <vPortFree+0xac>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	43db      	mvns	r3, r3
 8004702:	401a      	ands	r2, r3
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004708:	f7fe fcb8 	bl	800307c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <vPortFree+0xb0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4413      	add	r3, r2
 8004716:	4a06      	ldr	r2, [pc, #24]	; (8004730 <vPortFree+0xb0>)
 8004718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800471a:	6938      	ldr	r0, [r7, #16]
 800471c:	f000 f86c 	bl	80047f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004720:	f7fe fcba 	bl	8003098 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004724:	bf00      	nop
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20012fb8 	.word	0x20012fb8
 8004730:	20012fb0 	.word	0x20012fb0

08004734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800473a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800473e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004740:	4b27      	ldr	r3, [pc, #156]	; (80047e0 <prvHeapInit+0xac>)
 8004742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00c      	beq.n	8004768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3307      	adds	r3, #7
 8004752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0307 	bic.w	r3, r3, #7
 800475a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	4a1f      	ldr	r2, [pc, #124]	; (80047e0 <prvHeapInit+0xac>)
 8004764:	4413      	add	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800476c:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <prvHeapInit+0xb0>)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004772:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <prvHeapInit+0xb0>)
 8004774:	2200      	movs	r2, #0
 8004776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	4413      	add	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004780:	2208      	movs	r2, #8
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0307 	bic.w	r3, r3, #7
 800478e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4a15      	ldr	r2, [pc, #84]	; (80047e8 <prvHeapInit+0xb4>)
 8004794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <prvHeapInit+0xb4>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2200      	movs	r2, #0
 800479c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800479e:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <prvHeapInit+0xb4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	1ad2      	subs	r2, r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047b4:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <prvHeapInit+0xb4>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <prvHeapInit+0xb8>)
 80047c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <prvHeapInit+0xbc>)
 80047ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <prvHeapInit+0xc0>)
 80047ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047d2:	601a      	str	r2, [r3, #0]
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	200003a4 	.word	0x200003a4
 80047e4:	20012fa4 	.word	0x20012fa4
 80047e8:	20012fac 	.word	0x20012fac
 80047ec:	20012fb4 	.word	0x20012fb4
 80047f0:	20012fb0 	.word	0x20012fb0
 80047f4:	20012fb8 	.word	0x20012fb8

080047f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004800:	4b28      	ldr	r3, [pc, #160]	; (80048a4 <prvInsertBlockIntoFreeList+0xac>)
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e002      	b.n	800480c <prvInsertBlockIntoFreeList+0x14>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d8f7      	bhi.n	8004806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	4413      	add	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	429a      	cmp	r2, r3
 8004826:	d108      	bne.n	800483a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	441a      	add	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	441a      	add	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d118      	bne.n	8004880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d00d      	beq.n	8004876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	441a      	add	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e008      	b.n	8004888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004876:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e003      	b.n	8004888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d002      	beq.n	8004896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20012fa4 	.word	0x20012fa4
 80048a8:	20012fac 	.word	0x20012fac

080048ac <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80048b0:	4803      	ldr	r0, [pc, #12]	; (80048c0 <_cbSendSystemDesc+0x14>)
 80048b2:	f001 f95d 	bl	8005b70 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80048b6:	4803      	ldr	r0, [pc, #12]	; (80048c4 <_cbSendSystemDesc+0x18>)
 80048b8:	f001 f95a 	bl	8005b70 <SEGGER_SYSVIEW_SendSysDesc>
}
 80048bc:	bf00      	nop
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	08006f50 	.word	0x08006f50
 80048c4:	08006f80 	.word	0x08006f80

080048c8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <SEGGER_SYSVIEW_Conf+0x20>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <SEGGER_SYSVIEW_Conf+0x20>)
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <SEGGER_SYSVIEW_Conf+0x24>)
 80048d6:	4a06      	ldr	r2, [pc, #24]	; (80048f0 <SEGGER_SYSVIEW_Conf+0x28>)
 80048d8:	f000 fcc8 	bl	800526c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80048dc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80048e0:	f000 fd08 	bl	80052f4 <SEGGER_SYSVIEW_SetRAMBase>
}
 80048e4:	bf00      	nop
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	200000d0 	.word	0x200000d0
 80048ec:	080048ad 	.word	0x080048ad
 80048f0:	0800703c 	.word	0x0800703c

080048f4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80048fa:	4b26      	ldr	r3, [pc, #152]	; (8004994 <_DoInit+0xa0>)
 80048fc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80048fe:	22a8      	movs	r2, #168	; 0xa8
 8004900:	2100      	movs	r1, #0
 8004902:	6838      	ldr	r0, [r7, #0]
 8004904:	f001 fe3a 	bl	800657c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2203      	movs	r2, #3
 800490c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2203      	movs	r2, #3
 8004912:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	4a20      	ldr	r2, [pc, #128]	; (8004998 <_DoInit+0xa4>)
 8004918:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	4a1f      	ldr	r2, [pc, #124]	; (800499c <_DoInit+0xa8>)
 800491e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004926:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2200      	movs	r2, #0
 800492c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2200      	movs	r2, #0
 8004932:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2200      	movs	r2, #0
 8004938:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	4a16      	ldr	r2, [pc, #88]	; (8004998 <_DoInit+0xa4>)
 800493e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <_DoInit+0xac>)
 8004944:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2210      	movs	r2, #16
 800494a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2200      	movs	r2, #0
 8004956:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2200      	movs	r2, #0
 800495c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800495e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004962:	2300      	movs	r3, #0
 8004964:	607b      	str	r3, [r7, #4]
 8004966:	e00c      	b.n	8004982 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f1c3 030f 	rsb	r3, r3, #15
 800496e:	4a0d      	ldr	r2, [pc, #52]	; (80049a4 <_DoInit+0xb0>)
 8004970:	5cd1      	ldrb	r1, [r2, r3]
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4413      	add	r3, r2
 8004978:	460a      	mov	r2, r1
 800497a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3301      	adds	r3, #1
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b0f      	cmp	r3, #15
 8004986:	d9ef      	bls.n	8004968 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004988:	f3bf 8f5f 	dmb	sy
}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20012fbc 	.word	0x20012fbc
 8004998:	08006f90 	.word	0x08006f90
 800499c:	20013064 	.word	0x20013064
 80049a0:	20013464 	.word	0x20013464
 80049a4:	0800701c 	.word	0x0800701c

080049a8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08c      	sub	sp, #48	; 0x30
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80049b4:	4b3e      	ldr	r3, [pc, #248]	; (8004ab0 <SEGGER_RTT_ReadNoLock+0x108>)
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <SEGGER_RTT_ReadNoLock+0x1e>
 80049c2:	f7ff ff97 	bl	80048f4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4613      	mov	r3, r2
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	4413      	add	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	3360      	adds	r3, #96	; 0x60
 80049d2:	4a37      	ldr	r2, [pc, #220]	; (8004ab0 <SEGGER_RTT_ReadNoLock+0x108>)
 80049d4:	4413      	add	r3, r2
 80049d6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80049e8:	2300      	movs	r3, #0
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80049ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d92b      	bls.n	8004a4c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4293      	cmp	r3, r2
 8004a04:	bf28      	it	cs
 8004a06:	4613      	movcs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	4413      	add	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	6939      	ldr	r1, [r7, #16]
 8004a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a1a:	f001 fde3 	bl	80065e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	4413      	add	r3, r2
 8004a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d101      	bne.n	8004a4c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	bf28      	it	cs
 8004a5c:	4613      	movcs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d019      	beq.n	8004a9a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	4413      	add	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	6939      	ldr	r1, [r7, #16]
 8004a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a76:	f001 fdb5 	bl	80065e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	4413      	add	r3, r2
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	4413      	add	r3, r2
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	4413      	add	r3, r2
 8004a98:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aa4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3730      	adds	r7, #48	; 0x30
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20012fbc 	.word	0x20012fbc

08004ab4 <SEGGER_RTT_ASM_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
//#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08c      	sub	sp, #48	; 0x30
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  //   4) RdOff >  WrOff => Space is sufficient
  //   5) RdOff >  WrOff => No space in buf
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	4613      	mov	r3, r2
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	4413      	add	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4a38      	ldr	r2, [pc, #224]	; (8004bb4 <SEGGER_RTT_ASM_WriteSkipNoLock+0x100>)
 8004ad2:	4413      	add	r3, r2
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  RdOff = pRing->RdOff;
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
  WrOff = pRing->WrOff;
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	623b      	str	r3, [r7, #32]
  pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	4413      	add	r3, r2
 8004aea:	61fb      	str	r3, [r7, #28]
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 8004aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d842      	bhi.n	8004b7a <SEGGER_RTT_ASM_WriteSkipNoLock+0xc6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 1)?
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d30d      	bcc.n	8004b24 <SEGGER_RTT_ASM_WriteSkipNoLock+0x70>
      memcpy((void*)pDst, pData, NumBytes);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b0c:	69f8      	ldr	r0, [r7, #28]
 8004b0e:	f001 fd69 	bl	80065e4 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b12:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = WrOff + NumBytes;
 8004b16:	6a3a      	ldr	r2, [r7, #32]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	441a      	add	r2, r3
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	60da      	str	r2, [r3, #12]
      return 1;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e042      	b.n	8004baa <SEGGER_RTT_ASM_WriteSkipNoLock+0xf6>
    }
    Avail += RdOff;                                     // Space incl. wrap-around
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	4413      	add	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d339      	bcc.n	8004ba8 <SEGGER_RTT_ASM_WriteSkipNoLock+0xf4>
      Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	617b      	str	r3, [r7, #20]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b42:	69f8      	ldr	r0, [r7, #28]
 8004b44:	f001 fd4e 	bl	80065e4 <memcpy>
      NumBytes -= Rem;
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	607b      	str	r3, [r7, #4]
      // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
      // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
      // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <SEGGER_RTT_ASM_WriteSkipNoLock+0xb8>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	61fb      	str	r3, [r7, #28]
        memcpy((void*)pDst, pData + Rem, NumBytes);
 8004b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4413      	add	r3, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4619      	mov	r1, r3
 8004b66:	69f8      	ldr	r0, [r7, #28]
 8004b68:	f001 fd3c 	bl	80065e4 <memcpy>
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b6c:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = NumBytes;
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	60da      	str	r2, [r3, #12]
      return 1;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e017      	b.n	8004baa <SEGGER_RTT_ASM_WriteSkipNoLock+0xf6>
    }
  } else {                                             // Potential case 4)
    Avail = RdOff - WrOff - 1u;
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d30d      	bcc.n	8004ba8 <SEGGER_RTT_ASM_WriteSkipNoLock+0xf4>
      memcpy((void*)pDst, pData, NumBytes);
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b90:	69f8      	ldr	r0, [r7, #28]
 8004b92:	f001 fd27 	bl	80065e4 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b96:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = WrOff + NumBytes;
 8004b9a:	6a3a      	ldr	r2, [r7, #32]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	441a      	add	r2, r3
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	60da      	str	r2, [r3, #12]
      return 1;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <SEGGER_RTT_ASM_WriteSkipNoLock+0xf6>
    }
  }
  return 0;     // No space in buffer
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3730      	adds	r7, #48	; 0x30
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20012fbc 	.word	0x20012fbc

08004bb8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004bc6:	4b3d      	ldr	r3, [pc, #244]	; (8004cbc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004bd4:	f7ff fe8e 	bl	80048f4 <_DoInit>
  SEGGER_RTT_LOCK();
 8004bd8:	f3ef 8311 	mrs	r3, BASEPRI
 8004bdc:	f04f 0120 	mov.w	r1, #32
 8004be0:	f381 8811 	msr	BASEPRI, r1
 8004be4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004be6:	4b35      	ldr	r3, [pc, #212]	; (8004cbc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004be8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004bee:	6939      	ldr	r1, [r7, #16]
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	4413      	add	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	440b      	add	r3, r1
 8004bfe:	3304      	adds	r3, #4
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d008      	beq.n	8004c18 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	dbeb      	blt.n	8004bee <SEGGER_RTT_AllocUpBuffer+0x36>
 8004c16:	e000      	b.n	8004c1a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004c18:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	da3f      	bge.n	8004ca4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004c24:	6939      	ldr	r1, [r7, #16]
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	4413      	add	r3, r2
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	440b      	add	r3, r1
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004c38:	6939      	ldr	r1, [r7, #16]
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	4613      	mov	r3, r2
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	4413      	add	r3, r2
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	440b      	add	r3, r1
 8004c48:	3304      	adds	r3, #4
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004c4e:	6939      	ldr	r1, [r7, #16]
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	4613      	mov	r3, r2
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	4413      	add	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3320      	adds	r3, #32
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004c62:	6939      	ldr	r1, [r7, #16]
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	4613      	mov	r3, r2
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	4413      	add	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	440b      	add	r3, r1
 8004c70:	3328      	adds	r3, #40	; 0x28
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004c76:	6939      	ldr	r1, [r7, #16]
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	4413      	add	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	440b      	add	r3, r1
 8004c84:	3324      	adds	r3, #36	; 0x24
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004c8a:	6939      	ldr	r1, [r7, #16]
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	4413      	add	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	440b      	add	r3, r1
 8004c98:	332c      	adds	r3, #44	; 0x2c
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c9e:	f3bf 8f5f 	dmb	sy
 8004ca2:	e002      	b.n	8004caa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20012fbc 	.word	0x20012fbc

08004cc0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	; 0x28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004cce:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004cd0:	623b      	str	r3, [r7, #32]
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004cdc:	f7ff fe0a 	bl	80048f4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ce0:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004ce2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d82c      	bhi.n	8004d44 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004cea:	f3ef 8311 	mrs	r3, BASEPRI
 8004cee:	f04f 0120 	mov.w	r1, #32
 8004cf2:	f381 8811 	msr	BASEPRI, r1
 8004cf6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	4413      	add	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	3360      	adds	r3, #96	; 0x60
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00e      	beq.n	8004d2e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2200      	movs	r2, #0
 8004d26:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d32:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d34:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
 8004d42:	e002      	b.n	8004d4a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004d44:	f04f 33ff 	mov.w	r3, #4294967295
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3728      	adds	r7, #40	; 0x28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20012fbc 	.word	0x20012fbc

08004d58 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	60fa      	str	r2, [r7, #12]
 8004d6e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b80      	cmp	r3, #128	; 0x80
 8004d74:	d90a      	bls.n	8004d8c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004d76:	2380      	movs	r3, #128	; 0x80
 8004d78:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004d7a:	e007      	b.n	8004d8c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	1c53      	adds	r3, r2, #1
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1c59      	adds	r1, r3, #1
 8004d86:	60f9      	str	r1, [r7, #12]
 8004d88:	7812      	ldrb	r2, [r2, #0]
 8004d8a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	1e5a      	subs	r2, r3, #1
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <_EncodeStr+0x46>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1ee      	bne.n	8004d7c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004daa:	68fb      	ldr	r3, [r7, #12]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3307      	adds	r3, #7
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004dd6:	4b34      	ldr	r3, [pc, #208]	; (8004ea8 <_HandleIncomingPacket+0xd8>)
 8004dd8:	7e1b      	ldrb	r3, [r3, #24]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	1cfb      	adds	r3, r7, #3
 8004dde:	2201      	movs	r2, #1
 8004de0:	4619      	mov	r1, r3
 8004de2:	f7ff fde1 	bl	80049a8 <SEGGER_RTT_ReadNoLock>
 8004de6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d057      	beq.n	8004e9e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004dee:	78fb      	ldrb	r3, [r7, #3]
 8004df0:	2b80      	cmp	r3, #128	; 0x80
 8004df2:	d031      	beq.n	8004e58 <_HandleIncomingPacket+0x88>
 8004df4:	2b80      	cmp	r3, #128	; 0x80
 8004df6:	dc40      	bgt.n	8004e7a <_HandleIncomingPacket+0xaa>
 8004df8:	2b07      	cmp	r3, #7
 8004dfa:	dc15      	bgt.n	8004e28 <_HandleIncomingPacket+0x58>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	dd3c      	ble.n	8004e7a <_HandleIncomingPacket+0xaa>
 8004e00:	3b01      	subs	r3, #1
 8004e02:	2b06      	cmp	r3, #6
 8004e04:	d839      	bhi.n	8004e7a <_HandleIncomingPacket+0xaa>
 8004e06:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <_HandleIncomingPacket+0x3c>)
 8004e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0c:	08004e2f 	.word	0x08004e2f
 8004e10:	08004e35 	.word	0x08004e35
 8004e14:	08004e3b 	.word	0x08004e3b
 8004e18:	08004e41 	.word	0x08004e41
 8004e1c:	08004e47 	.word	0x08004e47
 8004e20:	08004e4d 	.word	0x08004e4d
 8004e24:	08004e53 	.word	0x08004e53
 8004e28:	2b7f      	cmp	r3, #127	; 0x7f
 8004e2a:	d033      	beq.n	8004e94 <_HandleIncomingPacket+0xc4>
 8004e2c:	e025      	b.n	8004e7a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004e2e:	f000 fc2d 	bl	800568c <SEGGER_SYSVIEW_Start>
      break;
 8004e32:	e034      	b.n	8004e9e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004e34:	f000 fce4 	bl	8005800 <SEGGER_SYSVIEW_Stop>
      break;
 8004e38:	e031      	b.n	8004e9e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004e3a:	f000 febd 	bl	8005bb8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004e3e:	e02e      	b.n	8004e9e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004e40:	f000 fe82 	bl	8005b48 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004e44:	e02b      	b.n	8004e9e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004e46:	f000 fd01 	bl	800584c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004e4a:	e028      	b.n	8004e9e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004e4c:	f001 f95a 	bl	8006104 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004e50:	e025      	b.n	8004e9e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004e52:	f001 f939 	bl	80060c8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004e56:	e022      	b.n	8004e9e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004e58:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <_HandleIncomingPacket+0xd8>)
 8004e5a:	7e1b      	ldrb	r3, [r3, #24]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	1cfb      	adds	r3, r7, #3
 8004e60:	2201      	movs	r2, #1
 8004e62:	4619      	mov	r1, r3
 8004e64:	f7ff fda0 	bl	80049a8 <SEGGER_RTT_ReadNoLock>
 8004e68:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d013      	beq.n	8004e98 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f001 f89e 	bl	8005fb4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004e78:	e00e      	b.n	8004e98 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	b25b      	sxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da0c      	bge.n	8004e9c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004e82:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <_HandleIncomingPacket+0xd8>)
 8004e84:	7e1b      	ldrb	r3, [r3, #24]
 8004e86:	4618      	mov	r0, r3
 8004e88:	1cfb      	adds	r3, r7, #3
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	f7ff fd8b 	bl	80049a8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004e92:	e003      	b.n	8004e9c <_HandleIncomingPacket+0xcc>
      break;
 8004e94:	bf00      	nop
 8004e96:	e002      	b.n	8004e9e <_HandleIncomingPacket+0xce>
      break;
 8004e98:	bf00      	nop
 8004e9a:	e000      	b.n	8004e9e <_HandleIncomingPacket+0xce>
      break;
 8004e9c:	bf00      	nop
    }
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	2001387c 	.word	0x2001387c

08004eac <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08c      	sub	sp, #48	; 0x30
 8004eb0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004eb6:	1d3b      	adds	r3, r7, #4
 8004eb8:	3301      	adds	r3, #1
 8004eba:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ec0:	4b31      	ldr	r3, [pc, #196]	; (8004f88 <_TrySendOverflowPacket+0xdc>)
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ec6:	e00b      	b.n	8004ee0 <_TrySendOverflowPacket+0x34>
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ece:	1c59      	adds	r1, r3, #1
 8004ed0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	09db      	lsrs	r3, r3, #7
 8004ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee4:	d8f0      	bhi.n	8004ec8 <_TrySendOverflowPacket+0x1c>
 8004ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ef6:	4b25      	ldr	r3, [pc, #148]	; (8004f8c <_TrySendOverflowPacket+0xe0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004efc:	4b22      	ldr	r3, [pc, #136]	; (8004f88 <_TrySendOverflowPacket+0xdc>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	623b      	str	r3, [r7, #32]
 8004f0e:	e00b      	b.n	8004f28 <_TrySendOverflowPacket+0x7c>
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	6279      	str	r1, [r7, #36]	; 0x24
 8004f1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	09db      	lsrs	r3, r3, #7
 8004f26:	623b      	str	r3, [r7, #32]
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f2c:	d8f0      	bhi.n	8004f10 <_TrySendOverflowPacket+0x64>
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	627a      	str	r2, [r7, #36]	; 0x24
 8004f34:	6a3a      	ldr	r2, [r7, #32]
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004f3e:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <_TrySendOverflowPacket+0xdc>)
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	4618      	mov	r0, r3
 8004f44:	1d3b      	adds	r3, r7, #4
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	1d3b      	adds	r3, r7, #4
 8004f4e:	4619      	mov	r1, r3
 8004f50:	f7ff fdb0 	bl	8004ab4 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004f54:	4603      	mov	r3, r0
 8004f56:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004f5e:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <_TrySendOverflowPacket+0xdc>)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004f64:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <_TrySendOverflowPacket+0xdc>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <_TrySendOverflowPacket+0xdc>)
 8004f6e:	701a      	strb	r2, [r3, #0]
 8004f70:	e004      	b.n	8004f7c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004f72:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <_TrySendOverflowPacket+0xdc>)
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	3301      	adds	r3, #1
 8004f78:	4a03      	ldr	r2, [pc, #12]	; (8004f88 <_TrySendOverflowPacket+0xdc>)
 8004f7a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004f7c:	693b      	ldr	r3, [r7, #16]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3730      	adds	r7, #48	; 0x30
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	2001387c 	.word	0x2001387c
 8004f8c:	e0001004 	.word	0xe0001004

08004f90 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004f9c:	4b98      	ldr	r3, [pc, #608]	; (8005200 <_SendPacket+0x270>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d010      	beq.n	8004fc6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004fa4:	4b96      	ldr	r3, [pc, #600]	; (8005200 <_SendPacket+0x270>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 812d 	beq.w	8005208 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004fae:	4b94      	ldr	r3, [pc, #592]	; (8005200 <_SendPacket+0x270>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d109      	bne.n	8004fca <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004fb6:	f7ff ff79 	bl	8004eac <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004fba:	4b91      	ldr	r3, [pc, #580]	; (8005200 <_SendPacket+0x270>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	f040 8124 	bne.w	800520c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004fc4:	e001      	b.n	8004fca <_SendPacket+0x3a>
    goto Send;
 8004fc6:	bf00      	nop
 8004fc8:	e000      	b.n	8004fcc <_SendPacket+0x3c>
Send:
 8004fca:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b1f      	cmp	r3, #31
 8004fd0:	d809      	bhi.n	8004fe6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004fd2:	4b8b      	ldr	r3, [pc, #556]	; (8005200 <_SendPacket+0x270>)
 8004fd4:	69da      	ldr	r2, [r3, #28]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f040 8115 	bne.w	8005210 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b17      	cmp	r3, #23
 8004fea:	d807      	bhi.n	8004ffc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	e0c4      	b.n	8005186 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b7f      	cmp	r3, #127	; 0x7f
 8005008:	d912      	bls.n	8005030 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	09da      	lsrs	r2, r3, #7
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3b01      	subs	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	3a01      	subs	r2, #1
 8005022:	60fa      	str	r2, [r7, #12]
 8005024:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005028:	b2da      	uxtb	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	e006      	b.n	800503e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3b01      	subs	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	b2da      	uxtb	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b7e      	cmp	r3, #126	; 0x7e
 8005042:	d807      	bhi.n	8005054 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3b01      	subs	r3, #1
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	b2da      	uxtb	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	e098      	b.n	8005186 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800505a:	d212      	bcs.n	8005082 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	09da      	lsrs	r2, r3, #7
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3b01      	subs	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	3a01      	subs	r2, #1
 8005074:	60fa      	str	r2, [r7, #12]
 8005076:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800507a:	b2da      	uxtb	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	e081      	b.n	8005186 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005088:	d21d      	bcs.n	80050c6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	0b9a      	lsrs	r2, r3, #14
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3b01      	subs	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	09db      	lsrs	r3, r3, #7
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	3a01      	subs	r2, #1
 80050a4:	60fa      	str	r2, [r7, #12]
 80050a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	3a01      	subs	r2, #1
 80050b8:	60fa      	str	r2, [r7, #12]
 80050ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	e05f      	b.n	8005186 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050cc:	d228      	bcs.n	8005120 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	0d5a      	lsrs	r2, r3, #21
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	0b9b      	lsrs	r3, r3, #14
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	3a01      	subs	r2, #1
 80050e8:	60fa      	str	r2, [r7, #12]
 80050ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	09db      	lsrs	r3, r3, #7
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	3a01      	subs	r2, #1
 80050fe:	60fa      	str	r2, [r7, #12]
 8005100:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005104:	b2da      	uxtb	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	3a01      	subs	r2, #1
 8005112:	60fa      	str	r2, [r7, #12]
 8005114:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005118:	b2da      	uxtb	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	e032      	b.n	8005186 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	0f1a      	lsrs	r2, r3, #28
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	3b01      	subs	r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	0d5b      	lsrs	r3, r3, #21
 8005134:	b2db      	uxtb	r3, r3
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	3a01      	subs	r2, #1
 800513a:	60fa      	str	r2, [r7, #12]
 800513c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005140:	b2da      	uxtb	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	0b9b      	lsrs	r3, r3, #14
 800514a:	b2db      	uxtb	r3, r3
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	3a01      	subs	r2, #1
 8005150:	60fa      	str	r2, [r7, #12]
 8005152:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005156:	b2da      	uxtb	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	09db      	lsrs	r3, r3, #7
 8005160:	b2db      	uxtb	r3, r3
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	3a01      	subs	r2, #1
 8005166:	60fa      	str	r2, [r7, #12]
 8005168:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800516c:	b2da      	uxtb	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	3a01      	subs	r2, #1
 800517a:	60fa      	str	r2, [r7, #12]
 800517c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005186:	4b1f      	ldr	r3, [pc, #124]	; (8005204 <_SendPacket+0x274>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800518c:	4b1c      	ldr	r3, [pc, #112]	; (8005200 <_SendPacket+0x270>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	623b      	str	r3, [r7, #32]
 800519e:	e00b      	b.n	80051b8 <_SendPacket+0x228>
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	1c59      	adds	r1, r3, #1
 80051a8:	6279      	str	r1, [r7, #36]	; 0x24
 80051aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	09db      	lsrs	r3, r3, #7
 80051b6:	623b      	str	r3, [r7, #32]
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	2b7f      	cmp	r3, #127	; 0x7f
 80051bc:	d8f0      	bhi.n	80051a0 <_SendPacket+0x210>
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	627a      	str	r2, [r7, #36]	; 0x24
 80051c4:	6a3a      	ldr	r2, [r7, #32]
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80051ce:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <_SendPacket+0x270>)
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	4618      	mov	r0, r3
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	f7ff fc69 	bl	8004ab4 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80051e2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80051ea:	4a05      	ldr	r2, [pc, #20]	; (8005200 <_SendPacket+0x270>)
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	60d3      	str	r3, [r2, #12]
 80051f0:	e00f      	b.n	8005212 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80051f2:	4b03      	ldr	r3, [pc, #12]	; (8005200 <_SendPacket+0x270>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	3301      	adds	r3, #1
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	4b01      	ldr	r3, [pc, #4]	; (8005200 <_SendPacket+0x270>)
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	e008      	b.n	8005212 <_SendPacket+0x282>
 8005200:	2001387c 	.word	0x2001387c
 8005204:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005208:	bf00      	nop
 800520a:	e002      	b.n	8005212 <_SendPacket+0x282>
      goto SendDone;
 800520c:	bf00      	nop
 800520e:	e000      	b.n	8005212 <_SendPacket+0x282>
      goto SendDone;
 8005210:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005212:	4b14      	ldr	r3, [pc, #80]	; (8005264 <_SendPacket+0x2d4>)
 8005214:	7e1b      	ldrb	r3, [r3, #24]
 8005216:	4619      	mov	r1, r3
 8005218:	4a13      	ldr	r2, [pc, #76]	; (8005268 <_SendPacket+0x2d8>)
 800521a:	460b      	mov	r3, r1
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	440b      	add	r3, r1
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4413      	add	r3, r2
 8005224:	336c      	adds	r3, #108	; 0x6c
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4b0e      	ldr	r3, [pc, #56]	; (8005264 <_SendPacket+0x2d4>)
 800522a:	7e1b      	ldrb	r3, [r3, #24]
 800522c:	4618      	mov	r0, r3
 800522e:	490e      	ldr	r1, [pc, #56]	; (8005268 <_SendPacket+0x2d8>)
 8005230:	4603      	mov	r3, r0
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	4403      	add	r3, r0
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	440b      	add	r3, r1
 800523a:	3370      	adds	r3, #112	; 0x70
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d00b      	beq.n	800525a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005242:	4b08      	ldr	r3, [pc, #32]	; (8005264 <_SendPacket+0x2d4>)
 8005244:	789b      	ldrb	r3, [r3, #2]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d107      	bne.n	800525a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800524a:	4b06      	ldr	r3, [pc, #24]	; (8005264 <_SendPacket+0x2d4>)
 800524c:	2201      	movs	r2, #1
 800524e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005250:	f7ff fdbe 	bl	8004dd0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005254:	4b03      	ldr	r3, [pc, #12]	; (8005264 <_SendPacket+0x2d4>)
 8005256:	2200      	movs	r2, #0
 8005258:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800525a:	bf00      	nop
 800525c:	3728      	adds	r7, #40	; 0x28
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	2001387c 	.word	0x2001387c
 8005268:	20012fbc 	.word	0x20012fbc

0800526c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800527a:	2300      	movs	r3, #0
 800527c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005280:	4917      	ldr	r1, [pc, #92]	; (80052e0 <SEGGER_SYSVIEW_Init+0x74>)
 8005282:	4818      	ldr	r0, [pc, #96]	; (80052e4 <SEGGER_SYSVIEW_Init+0x78>)
 8005284:	f7ff fc98 	bl	8004bb8 <SEGGER_RTT_AllocUpBuffer>
 8005288:	4603      	mov	r3, r0
 800528a:	b2da      	uxtb	r2, r3
 800528c:	4b16      	ldr	r3, [pc, #88]	; (80052e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800528e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005290:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005292:	785a      	ldrb	r2, [r3, #1]
 8005294:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005296:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005298:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800529a:	7e1b      	ldrb	r3, [r3, #24]
 800529c:	4618      	mov	r0, r3
 800529e:	2300      	movs	r3, #0
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	2308      	movs	r3, #8
 80052a4:	4a11      	ldr	r2, [pc, #68]	; (80052ec <SEGGER_SYSVIEW_Init+0x80>)
 80052a6:	490f      	ldr	r1, [pc, #60]	; (80052e4 <SEGGER_SYSVIEW_Init+0x78>)
 80052a8:	f7ff fd0a 	bl	8004cc0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80052ac:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052b2:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <SEGGER_SYSVIEW_Init+0x84>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a0c      	ldr	r2, [pc, #48]	; (80052e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80052b8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80052ba:	4a0b      	ldr	r2, [pc, #44]	; (80052e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80052c0:	4a09      	ldr	r2, [pc, #36]	; (80052e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80052c6:	4a08      	ldr	r2, [pc, #32]	; (80052e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80052cc:	4a06      	ldr	r2, [pc, #24]	; (80052e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80052d2:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20013474 	.word	0x20013474
 80052e4:	08006fa4 	.word	0x08006fa4
 80052e8:	2001387c 	.word	0x2001387c
 80052ec:	20013874 	.word	0x20013874
 80052f0:	e0001004 	.word	0xe0001004

080052f4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80052fc:	4a04      	ldr	r2, [pc, #16]	; (8005310 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6113      	str	r3, [r2, #16]
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	2001387c 	.word	0x2001387c

08005314 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800531c:	f3ef 8311 	mrs	r3, BASEPRI
 8005320:	f04f 0120 	mov.w	r1, #32
 8005324:	f381 8811 	msr	BASEPRI, r1
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	4808      	ldr	r0, [pc, #32]	; (800534c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800532c:	f7ff fd44 	bl	8004db8 <_PreparePacket>
 8005330:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	68b8      	ldr	r0, [r7, #8]
 8005338:	f7ff fe2a 	bl	8004f90 <_SendPacket>
  RECORD_END();
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f383 8811 	msr	BASEPRI, r3
}
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	200138ac 	.word	0x200138ac

08005350 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800535a:	f3ef 8311 	mrs	r3, BASEPRI
 800535e:	f04f 0120 	mov.w	r1, #32
 8005362:	f381 8811 	msr	BASEPRI, r1
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	4816      	ldr	r0, [pc, #88]	; (80053c4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800536a:	f7ff fd25 	bl	8004db8 <_PreparePacket>
 800536e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	61bb      	str	r3, [r7, #24]
 800537c:	e00b      	b.n	8005396 <SEGGER_SYSVIEW_RecordU32+0x46>
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	b2da      	uxtb	r2, r3
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	1c59      	adds	r1, r3, #1
 8005386:	61f9      	str	r1, [r7, #28]
 8005388:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	09db      	lsrs	r3, r3, #7
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b7f      	cmp	r3, #127	; 0x7f
 800539a:	d8f0      	bhi.n	800537e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	61fa      	str	r2, [r7, #28]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	701a      	strb	r2, [r3, #0]
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	68f9      	ldr	r1, [r7, #12]
 80053b0:	6938      	ldr	r0, [r7, #16]
 80053b2:	f7ff fded 	bl	8004f90 <_SendPacket>
  RECORD_END();
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f383 8811 	msr	BASEPRI, r3
}
 80053bc:	bf00      	nop
 80053be:	3720      	adds	r7, #32
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	200138ac 	.word	0x200138ac

080053c8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08c      	sub	sp, #48	; 0x30
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80053d4:	f3ef 8311 	mrs	r3, BASEPRI
 80053d8:	f04f 0120 	mov.w	r1, #32
 80053dc:	f381 8811 	msr	BASEPRI, r1
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	4825      	ldr	r0, [pc, #148]	; (8005478 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80053e4:	f7ff fce8 	bl	8004db8 <_PreparePacket>
 80053e8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f6:	e00b      	b.n	8005410 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	1c59      	adds	r1, r3, #1
 8005400:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005402:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540c:	09db      	lsrs	r3, r3, #7
 800540e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	2b7f      	cmp	r3, #127	; 0x7f
 8005414:	d8f0      	bhi.n	80053f8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800541c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	623b      	str	r3, [r7, #32]
 800542e:	e00b      	b.n	8005448 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	b2da      	uxtb	r2, r3
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	1c59      	adds	r1, r3, #1
 8005438:	6279      	str	r1, [r7, #36]	; 0x24
 800543a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	09db      	lsrs	r3, r3, #7
 8005446:	623b      	str	r3, [r7, #32]
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	2b7f      	cmp	r3, #127	; 0x7f
 800544c:	d8f0      	bhi.n	8005430 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	627a      	str	r2, [r7, #36]	; 0x24
 8005454:	6a3a      	ldr	r2, [r7, #32]
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	6979      	ldr	r1, [r7, #20]
 8005462:	69b8      	ldr	r0, [r7, #24]
 8005464:	f7ff fd94 	bl	8004f90 <_SendPacket>
  RECORD_END();
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f383 8811 	msr	BASEPRI, r3
}
 800546e:	bf00      	nop
 8005470:	3730      	adds	r7, #48	; 0x30
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200138ac 	.word	0x200138ac

0800547c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800547c:	b580      	push	{r7, lr}
 800547e:	b08e      	sub	sp, #56	; 0x38
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800548a:	f3ef 8311 	mrs	r3, BASEPRI
 800548e:	f04f 0120 	mov.w	r1, #32
 8005492:	f381 8811 	msr	BASEPRI, r1
 8005496:	61fb      	str	r3, [r7, #28]
 8005498:	4832      	ldr	r0, [pc, #200]	; (8005564 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800549a:	f7ff fc8d 	bl	8004db8 <_PreparePacket>
 800549e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	637b      	str	r3, [r7, #52]	; 0x34
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	633b      	str	r3, [r7, #48]	; 0x30
 80054ac:	e00b      	b.n	80054c6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b4:	1c59      	adds	r1, r3, #1
 80054b6:	6379      	str	r1, [r7, #52]	; 0x34
 80054b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	09db      	lsrs	r3, r3, #7
 80054c4:	633b      	str	r3, [r7, #48]	; 0x30
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	2b7f      	cmp	r3, #127	; 0x7f
 80054ca:	d8f0      	bhi.n	80054ae <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	637a      	str	r2, [r7, #52]	; 0x34
 80054d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e4:	e00b      	b.n	80054fe <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	1c59      	adds	r1, r3, #1
 80054ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	09db      	lsrs	r3, r3, #7
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	2b7f      	cmp	r3, #127	; 0x7f
 8005502:	d8f0      	bhi.n	80054e6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800550a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	623b      	str	r3, [r7, #32]
 800551c:	e00b      	b.n	8005536 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	b2da      	uxtb	r2, r3
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	1c59      	adds	r1, r3, #1
 8005526:	6279      	str	r1, [r7, #36]	; 0x24
 8005528:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	09db      	lsrs	r3, r3, #7
 8005534:	623b      	str	r3, [r7, #32]
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	2b7f      	cmp	r3, #127	; 0x7f
 800553a:	d8f0      	bhi.n	800551e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	627a      	str	r2, [r7, #36]	; 0x24
 8005542:	6a3a      	ldr	r2, [r7, #32]
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	701a      	strb	r2, [r3, #0]
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	6979      	ldr	r1, [r7, #20]
 8005550:	69b8      	ldr	r0, [r7, #24]
 8005552:	f7ff fd1d 	bl	8004f90 <_SendPacket>
  RECORD_END();
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f383 8811 	msr	BASEPRI, r3
}
 800555c:	bf00      	nop
 800555e:	3738      	adds	r7, #56	; 0x38
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	200138ac 	.word	0x200138ac

08005568 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005568:	b580      	push	{r7, lr}
 800556a:	b090      	sub	sp, #64	; 0x40
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005576:	f3ef 8311 	mrs	r3, BASEPRI
 800557a:	f04f 0120 	mov.w	r1, #32
 800557e:	f381 8811 	msr	BASEPRI, r1
 8005582:	61fb      	str	r3, [r7, #28]
 8005584:	4840      	ldr	r0, [pc, #256]	; (8005688 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005586:	f7ff fc17 	bl	8004db8 <_PreparePacket>
 800558a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	63bb      	str	r3, [r7, #56]	; 0x38
 8005598:	e00b      	b.n	80055b2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	b2da      	uxtb	r2, r3
 800559e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a0:	1c59      	adds	r1, r3, #1
 80055a2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80055a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	09db      	lsrs	r3, r3, #7
 80055b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	2b7f      	cmp	r3, #127	; 0x7f
 80055b6:	d8f0      	bhi.n	800559a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80055b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	701a      	strb	r2, [r3, #0]
 80055c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	637b      	str	r3, [r7, #52]	; 0x34
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	633b      	str	r3, [r7, #48]	; 0x30
 80055d0:	e00b      	b.n	80055ea <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d8:	1c59      	adds	r1, r3, #1
 80055da:	6379      	str	r1, [r7, #52]	; 0x34
 80055dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	09db      	lsrs	r3, r3, #7
 80055e8:	633b      	str	r3, [r7, #48]	; 0x30
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	2b7f      	cmp	r3, #127	; 0x7f
 80055ee:	d8f0      	bhi.n	80055d2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80055f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	637a      	str	r2, [r7, #52]	; 0x34
 80055f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	701a      	strb	r2, [r3, #0]
 80055fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28
 8005608:	e00b      	b.n	8005622 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	b2da      	uxtb	r2, r3
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	1c59      	adds	r1, r3, #1
 8005612:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005614:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	09db      	lsrs	r3, r3, #7
 8005620:	62bb      	str	r3, [r7, #40]	; 0x28
 8005622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005624:	2b7f      	cmp	r3, #127	; 0x7f
 8005626:	d8f0      	bhi.n	800560a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800562e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005636:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
 800563c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800563e:	623b      	str	r3, [r7, #32]
 8005640:	e00b      	b.n	800565a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	1c59      	adds	r1, r3, #1
 800564a:	6279      	str	r1, [r7, #36]	; 0x24
 800564c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	09db      	lsrs	r3, r3, #7
 8005658:	623b      	str	r3, [r7, #32]
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	2b7f      	cmp	r3, #127	; 0x7f
 800565e:	d8f0      	bhi.n	8005642 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	627a      	str	r2, [r7, #36]	; 0x24
 8005666:	6a3a      	ldr	r2, [r7, #32]
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	6979      	ldr	r1, [r7, #20]
 8005674:	69b8      	ldr	r0, [r7, #24]
 8005676:	f7ff fc8b 	bl	8004f90 <_SendPacket>
  RECORD_END();
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f383 8811 	msr	BASEPRI, r3
}
 8005680:	bf00      	nop
 8005682:	3740      	adds	r7, #64	; 0x40
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	200138ac 	.word	0x200138ac

0800568c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800568c:	b580      	push	{r7, lr}
 800568e:	b08c      	sub	sp, #48	; 0x30
 8005690:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005692:	4b58      	ldr	r3, [pc, #352]	; (80057f4 <SEGGER_SYSVIEW_Start+0x168>)
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005698:	f3ef 8311 	mrs	r3, BASEPRI
 800569c:	f04f 0120 	mov.w	r1, #32
 80056a0:	f381 8811 	msr	BASEPRI, r1
 80056a4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80056a6:	4b53      	ldr	r3, [pc, #332]	; (80057f4 <SEGGER_SYSVIEW_Start+0x168>)
 80056a8:	785b      	ldrb	r3, [r3, #1]
 80056aa:	220a      	movs	r2, #10
 80056ac:	4952      	ldr	r1, [pc, #328]	; (80057f8 <SEGGER_SYSVIEW_Start+0x16c>)
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff fa00 	bl	8004ab4 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80056ba:	200a      	movs	r0, #10
 80056bc:	f7ff fe2a 	bl	8005314 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80056c0:	f3ef 8311 	mrs	r3, BASEPRI
 80056c4:	f04f 0120 	mov.w	r1, #32
 80056c8:	f381 8811 	msr	BASEPRI, r1
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	484b      	ldr	r0, [pc, #300]	; (80057fc <SEGGER_SYSVIEW_Start+0x170>)
 80056d0:	f7ff fb72 	bl	8004db8 <_PreparePacket>
 80056d4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056de:	4b45      	ldr	r3, [pc, #276]	; (80057f4 <SEGGER_SYSVIEW_Start+0x168>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e4:	e00b      	b.n	80056fe <SEGGER_SYSVIEW_Start+0x72>
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	09db      	lsrs	r3, r3, #7
 80056fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	2b7f      	cmp	r3, #127	; 0x7f
 8005702:	d8f0      	bhi.n	80056e6 <SEGGER_SYSVIEW_Start+0x5a>
 8005704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	62fa      	str	r2, [r7, #44]	; 0x2c
 800570a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
 8005718:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <SEGGER_SYSVIEW_Start+0x168>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	623b      	str	r3, [r7, #32]
 800571e:	e00b      	b.n	8005738 <SEGGER_SYSVIEW_Start+0xac>
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	b2da      	uxtb	r2, r3
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	1c59      	adds	r1, r3, #1
 8005728:	6279      	str	r1, [r7, #36]	; 0x24
 800572a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	09db      	lsrs	r3, r3, #7
 8005736:	623b      	str	r3, [r7, #32]
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	2b7f      	cmp	r3, #127	; 0x7f
 800573c:	d8f0      	bhi.n	8005720 <SEGGER_SYSVIEW_Start+0x94>
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	627a      	str	r2, [r7, #36]	; 0x24
 8005744:	6a3a      	ldr	r2, [r7, #32]
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	4b28      	ldr	r3, [pc, #160]	; (80057f4 <SEGGER_SYSVIEW_Start+0x168>)
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	e00b      	b.n	8005772 <SEGGER_SYSVIEW_Start+0xe6>
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	b2da      	uxtb	r2, r3
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	1c59      	adds	r1, r3, #1
 8005762:	61f9      	str	r1, [r7, #28]
 8005764:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	09db      	lsrs	r3, r3, #7
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b7f      	cmp	r3, #127	; 0x7f
 8005776:	d8f0      	bhi.n	800575a <SEGGER_SYSVIEW_Start+0xce>
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	61fa      	str	r2, [r7, #28]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	2300      	movs	r3, #0
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	e00b      	b.n	80057aa <SEGGER_SYSVIEW_Start+0x11e>
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	b2da      	uxtb	r2, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	1c59      	adds	r1, r3, #1
 800579a:	6179      	str	r1, [r7, #20]
 800579c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	09db      	lsrs	r3, r3, #7
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b7f      	cmp	r3, #127	; 0x7f
 80057ae:	d8f0      	bhi.n	8005792 <SEGGER_SYSVIEW_Start+0x106>
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	617a      	str	r2, [r7, #20]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80057c0:	2218      	movs	r2, #24
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff fbe3 	bl	8004f90 <_SendPacket>
      RECORD_END();
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80057d0:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <SEGGER_SYSVIEW_Start+0x168>)
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80057d8:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <SEGGER_SYSVIEW_Start+0x168>)
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80057de:	f000 f9eb 	bl	8005bb8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80057e2:	f000 f9b1 	bl	8005b48 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80057e6:	f000 fc8d 	bl	8006104 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80057ea:	bf00      	nop
 80057ec:	3730      	adds	r7, #48	; 0x30
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	2001387c 	.word	0x2001387c
 80057f8:	08007030 	.word	0x08007030
 80057fc:	200138ac 	.word	0x200138ac

08005800 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005806:	f3ef 8311 	mrs	r3, BASEPRI
 800580a:	f04f 0120 	mov.w	r1, #32
 800580e:	f381 8811 	msr	BASEPRI, r1
 8005812:	607b      	str	r3, [r7, #4]
 8005814:	480b      	ldr	r0, [pc, #44]	; (8005844 <SEGGER_SYSVIEW_Stop+0x44>)
 8005816:	f7ff facf 	bl	8004db8 <_PreparePacket>
 800581a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800581c:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <SEGGER_SYSVIEW_Stop+0x48>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005824:	220b      	movs	r2, #11
 8005826:	6839      	ldr	r1, [r7, #0]
 8005828:	6838      	ldr	r0, [r7, #0]
 800582a:	f7ff fbb1 	bl	8004f90 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800582e:	4b06      	ldr	r3, [pc, #24]	; (8005848 <SEGGER_SYSVIEW_Stop+0x48>)
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f383 8811 	msr	BASEPRI, r3
}
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	200138ac 	.word	0x200138ac
 8005848:	2001387c 	.word	0x2001387c

0800584c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800584c:	b580      	push	{r7, lr}
 800584e:	b08c      	sub	sp, #48	; 0x30
 8005850:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005852:	f3ef 8311 	mrs	r3, BASEPRI
 8005856:	f04f 0120 	mov.w	r1, #32
 800585a:	f381 8811 	msr	BASEPRI, r1
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	4845      	ldr	r0, [pc, #276]	; (8005978 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005862:	f7ff faa9 	bl	8004db8 <_PreparePacket>
 8005866:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005870:	4b42      	ldr	r3, [pc, #264]	; (800597c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
 8005876:	e00b      	b.n	8005890 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	b2da      	uxtb	r2, r3
 800587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587e:	1c59      	adds	r1, r3, #1
 8005880:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005882:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	09db      	lsrs	r3, r3, #7
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	2b7f      	cmp	r3, #127	; 0x7f
 8005894:	d8f0      	bhi.n	8005878 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800589c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	4b34      	ldr	r3, [pc, #208]	; (800597c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	623b      	str	r3, [r7, #32]
 80058b0:	e00b      	b.n	80058ca <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	1c59      	adds	r1, r3, #1
 80058ba:	6279      	str	r1, [r7, #36]	; 0x24
 80058bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	09db      	lsrs	r3, r3, #7
 80058c8:	623b      	str	r3, [r7, #32]
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	2b7f      	cmp	r3, #127	; 0x7f
 80058ce:	d8f0      	bhi.n	80058b2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	627a      	str	r2, [r7, #36]	; 0x24
 80058d6:	6a3a      	ldr	r2, [r7, #32]
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	61fb      	str	r3, [r7, #28]
 80058e4:	4b25      	ldr	r3, [pc, #148]	; (800597c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	61bb      	str	r3, [r7, #24]
 80058ea:	e00b      	b.n	8005904 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	1c59      	adds	r1, r3, #1
 80058f4:	61f9      	str	r1, [r7, #28]
 80058f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	09db      	lsrs	r3, r3, #7
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b7f      	cmp	r3, #127	; 0x7f
 8005908:	d8f0      	bhi.n	80058ec <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	61fa      	str	r2, [r7, #28]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	e00b      	b.n	800593c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	b2da      	uxtb	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	1c59      	adds	r1, r3, #1
 800592c:	6179      	str	r1, [r7, #20]
 800592e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	09db      	lsrs	r3, r3, #7
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b7f      	cmp	r3, #127	; 0x7f
 8005940:	d8f0      	bhi.n	8005924 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	617a      	str	r2, [r7, #20]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005952:	2218      	movs	r2, #24
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	68b8      	ldr	r0, [r7, #8]
 8005958:	f7ff fb1a 	bl	8004f90 <_SendPacket>
  RECORD_END();
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800596a:	4b04      	ldr	r3, [pc, #16]	; (800597c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	4798      	blx	r3
  }
}
 8005970:	bf00      	nop
 8005972:	3730      	adds	r7, #48	; 0x30
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	200138ac 	.word	0x200138ac
 800597c:	2001387c 	.word	0x2001387c

08005980 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b092      	sub	sp, #72	; 0x48
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005988:	f3ef 8311 	mrs	r3, BASEPRI
 800598c:	f04f 0120 	mov.w	r1, #32
 8005990:	f381 8811 	msr	BASEPRI, r1
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	486a      	ldr	r0, [pc, #424]	; (8005b40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005998:	f7ff fa0e 	bl	8004db8 <_PreparePacket>
 800599c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	647b      	str	r3, [r7, #68]	; 0x44
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4b66      	ldr	r3, [pc, #408]	; (8005b44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	643b      	str	r3, [r7, #64]	; 0x40
 80059b2:	e00b      	b.n	80059cc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80059b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ba:	1c59      	adds	r1, r3, #1
 80059bc:	6479      	str	r1, [r7, #68]	; 0x44
 80059be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059c8:	09db      	lsrs	r3, r3, #7
 80059ca:	643b      	str	r3, [r7, #64]	; 0x40
 80059cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ce:	2b7f      	cmp	r3, #127	; 0x7f
 80059d0:	d8f0      	bhi.n	80059b4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80059d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	647a      	str	r2, [r7, #68]	; 0x44
 80059d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ec:	e00b      	b.n	8005a06 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f4:	1c59      	adds	r1, r3, #1
 80059f6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80059f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	09db      	lsrs	r3, r3, #7
 8005a04:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	2b7f      	cmp	r3, #127	; 0x7f
 8005a0a:	d8f0      	bhi.n	80059ee <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	4619      	mov	r1, r3
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff f997 	bl	8004d58 <_EncodeStr>
 8005a2a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005a2c:	2209      	movs	r2, #9
 8005a2e:	68f9      	ldr	r1, [r7, #12]
 8005a30:	6938      	ldr	r0, [r7, #16]
 8005a32:	f7ff faad 	bl	8004f90 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b40      	ldr	r3, [pc, #256]	; (8005b44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	633b      	str	r3, [r7, #48]	; 0x30
 8005a4a:	e00b      	b.n	8005a64 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a52:	1c59      	adds	r1, r3, #1
 8005a54:	6379      	str	r1, [r7, #52]	; 0x34
 8005a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	09db      	lsrs	r3, r3, #7
 8005a62:	633b      	str	r3, [r7, #48]	; 0x30
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	2b7f      	cmp	r3, #127	; 0x7f
 8005a68:	d8f0      	bhi.n	8005a4c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	637a      	str	r2, [r7, #52]	; 0x34
 8005a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a84:	e00b      	b.n	8005a9e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	1c59      	adds	r1, r3, #1
 8005a8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	09db      	lsrs	r3, r3, #7
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa2:	d8f0      	bhi.n	8005a86 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	623b      	str	r3, [r7, #32]
 8005abe:	e00b      	b.n	8005ad8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	1c59      	adds	r1, r3, #1
 8005ac8:	6279      	str	r1, [r7, #36]	; 0x24
 8005aca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	09db      	lsrs	r3, r3, #7
 8005ad6:	623b      	str	r3, [r7, #32]
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	2b7f      	cmp	r3, #127	; 0x7f
 8005adc:	d8f0      	bhi.n	8005ac0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	627a      	str	r2, [r7, #36]	; 0x24
 8005ae4:	6a3a      	ldr	r2, [r7, #32]
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	61fb      	str	r3, [r7, #28]
 8005af2:	2300      	movs	r3, #0
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e00b      	b.n	8005b10 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	61f9      	str	r1, [r7, #28]
 8005b02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	09db      	lsrs	r3, r3, #7
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b7f      	cmp	r3, #127	; 0x7f
 8005b14:	d8f0      	bhi.n	8005af8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	61fa      	str	r2, [r7, #28]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005b26:	2215      	movs	r2, #21
 8005b28:	68f9      	ldr	r1, [r7, #12]
 8005b2a:	6938      	ldr	r0, [r7, #16]
 8005b2c:	f7ff fa30 	bl	8004f90 <_SendPacket>
  RECORD_END();
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f383 8811 	msr	BASEPRI, r3
}
 8005b36:	bf00      	nop
 8005b38:	3748      	adds	r7, #72	; 0x48
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	200138ac 	.word	0x200138ac
 8005b44:	2001387c 	.word	0x2001387c

08005b48 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005b4c:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005b5e:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	4798      	blx	r3
  }
}
 8005b66:	bf00      	nop
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	2001387c 	.word	0x2001387c

08005b70 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b78:	f3ef 8311 	mrs	r3, BASEPRI
 8005b7c:	f04f 0120 	mov.w	r1, #32
 8005b80:	f381 8811 	msr	BASEPRI, r1
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	480b      	ldr	r0, [pc, #44]	; (8005bb4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005b88:	f7ff f916 	bl	8004db8 <_PreparePacket>
 8005b8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b8e:	2280      	movs	r2, #128	; 0x80
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	6938      	ldr	r0, [r7, #16]
 8005b94:	f7ff f8e0 	bl	8004d58 <_EncodeStr>
 8005b98:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005b9a:	220e      	movs	r2, #14
 8005b9c:	68f9      	ldr	r1, [r7, #12]
 8005b9e:	6938      	ldr	r0, [r7, #16]
 8005ba0:	f7ff f9f6 	bl	8004f90 <_SendPacket>
  RECORD_END();
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f383 8811 	msr	BASEPRI, r3
}
 8005baa:	bf00      	nop
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	200138ac 	.word	0x200138ac

08005bb8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005bb8:	b590      	push	{r4, r7, lr}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005bbe:	4b15      	ldr	r3, [pc, #84]	; (8005c14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d01a      	beq.n	8005bfc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005bc6:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d015      	beq.n	8005bfc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005bd0:	4b10      	ldr	r3, [pc, #64]	; (8005c14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4798      	blx	r3
 8005bd8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005bdc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005bde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	000a      	movs	r2, r1
 8005bec:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005bee:	4613      	mov	r3, r2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	200d      	movs	r0, #13
 8005bf6:	f7ff fbe7 	bl	80053c8 <SEGGER_SYSVIEW_RecordU32x2>
 8005bfa:	e006      	b.n	8005c0a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005bfc:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4619      	mov	r1, r3
 8005c02:	200c      	movs	r0, #12
 8005c04:	f7ff fba4 	bl	8005350 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd90      	pop	{r4, r7, pc}
 8005c12:	bf00      	nop
 8005c14:	2001387c 	.word	0x2001387c
 8005c18:	e0001004 	.word	0xe0001004

08005c1c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c22:	f3ef 8311 	mrs	r3, BASEPRI
 8005c26:	f04f 0120 	mov.w	r1, #32
 8005c2a:	f381 8811 	msr	BASEPRI, r1
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	4819      	ldr	r0, [pc, #100]	; (8005c98 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005c32:	f7ff f8c1 	bl	8004db8 <_PreparePacket>
 8005c36:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005c3c:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c44:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	e00b      	b.n	8005c68 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	1c59      	adds	r1, r3, #1
 8005c58:	6179      	str	r1, [r7, #20]
 8005c5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	09db      	lsrs	r3, r3, #7
 8005c66:	613b      	str	r3, [r7, #16]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c6c:	d8f0      	bhi.n	8005c50 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	617a      	str	r2, [r7, #20]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005c7e:	2202      	movs	r2, #2
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	68b8      	ldr	r0, [r7, #8]
 8005c84:	f7ff f984 	bl	8004f90 <_SendPacket>
  RECORD_END();
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f383 8811 	msr	BASEPRI, r3
}
 8005c8e:	bf00      	nop
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	200138ac 	.word	0x200138ac
 8005c9c:	e000ed04 	.word	0xe000ed04

08005ca0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ca6:	f3ef 8311 	mrs	r3, BASEPRI
 8005caa:	f04f 0120 	mov.w	r1, #32
 8005cae:	f381 8811 	msr	BASEPRI, r1
 8005cb2:	607b      	str	r3, [r7, #4]
 8005cb4:	4807      	ldr	r0, [pc, #28]	; (8005cd4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005cb6:	f7ff f87f 	bl	8004db8 <_PreparePacket>
 8005cba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	6838      	ldr	r0, [r7, #0]
 8005cc2:	f7ff f965 	bl	8004f90 <_SendPacket>
  RECORD_END();
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f383 8811 	msr	BASEPRI, r3
}
 8005ccc:	bf00      	nop
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	200138ac 	.word	0x200138ac

08005cd8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005cde:	f3ef 8311 	mrs	r3, BASEPRI
 8005ce2:	f04f 0120 	mov.w	r1, #32
 8005ce6:	f381 8811 	msr	BASEPRI, r1
 8005cea:	607b      	str	r3, [r7, #4]
 8005cec:	4807      	ldr	r0, [pc, #28]	; (8005d0c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005cee:	f7ff f863 	bl	8004db8 <_PreparePacket>
 8005cf2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005cf4:	2212      	movs	r2, #18
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	6838      	ldr	r0, [r7, #0]
 8005cfa:	f7ff f949 	bl	8004f90 <_SendPacket>
  RECORD_END();
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f383 8811 	msr	BASEPRI, r3
}
 8005d04:	bf00      	nop
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	200138ac 	.word	0x200138ac

08005d10 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d16:	f3ef 8311 	mrs	r3, BASEPRI
 8005d1a:	f04f 0120 	mov.w	r1, #32
 8005d1e:	f381 8811 	msr	BASEPRI, r1
 8005d22:	607b      	str	r3, [r7, #4]
 8005d24:	4807      	ldr	r0, [pc, #28]	; (8005d44 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005d26:	f7ff f847 	bl	8004db8 <_PreparePacket>
 8005d2a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005d2c:	2211      	movs	r2, #17
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	6838      	ldr	r0, [r7, #0]
 8005d32:	f7ff f92d 	bl	8004f90 <_SendPacket>
  RECORD_END();
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f383 8811 	msr	BASEPRI, r3
}
 8005d3c:	bf00      	nop
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	200138ac 	.word	0x200138ac

08005d48 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d50:	f3ef 8311 	mrs	r3, BASEPRI
 8005d54:	f04f 0120 	mov.w	r1, #32
 8005d58:	f381 8811 	msr	BASEPRI, r1
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	4819      	ldr	r0, [pc, #100]	; (8005dc4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005d60:	f7ff f82a 	bl	8004db8 <_PreparePacket>
 8005d64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005d6a:	4b17      	ldr	r3, [pc, #92]	; (8005dc8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	e00b      	b.n	8005d96 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	1c59      	adds	r1, r3, #1
 8005d86:	61f9      	str	r1, [r7, #28]
 8005d88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	09db      	lsrs	r3, r3, #7
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b7f      	cmp	r3, #127	; 0x7f
 8005d9a:	d8f0      	bhi.n	8005d7e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	61fa      	str	r2, [r7, #28]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005dac:	2208      	movs	r2, #8
 8005dae:	68f9      	ldr	r1, [r7, #12]
 8005db0:	6938      	ldr	r0, [r7, #16]
 8005db2:	f7ff f8ed 	bl	8004f90 <_SendPacket>
  RECORD_END();
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f383 8811 	msr	BASEPRI, r3
}
 8005dbc:	bf00      	nop
 8005dbe:	3720      	adds	r7, #32
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	200138ac 	.word	0x200138ac
 8005dc8:	2001387c 	.word	0x2001387c

08005dcc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005dd4:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd8:	f04f 0120 	mov.w	r1, #32
 8005ddc:	f381 8811 	msr	BASEPRI, r1
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	4819      	ldr	r0, [pc, #100]	; (8005e48 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005de4:	f7fe ffe8 	bl	8004db8 <_PreparePacket>
 8005de8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005dee:	4b17      	ldr	r3, [pc, #92]	; (8005e4c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	61bb      	str	r3, [r7, #24]
 8005e00:	e00b      	b.n	8005e1a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	1c59      	adds	r1, r3, #1
 8005e0a:	61f9      	str	r1, [r7, #28]
 8005e0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	09db      	lsrs	r3, r3, #7
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e1e:	d8f0      	bhi.n	8005e02 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	61fa      	str	r2, [r7, #28]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005e30:	2204      	movs	r2, #4
 8005e32:	68f9      	ldr	r1, [r7, #12]
 8005e34:	6938      	ldr	r0, [r7, #16]
 8005e36:	f7ff f8ab 	bl	8004f90 <_SendPacket>
  RECORD_END();
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f383 8811 	msr	BASEPRI, r3
}
 8005e40:	bf00      	nop
 8005e42:	3720      	adds	r7, #32
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	200138ac 	.word	0x200138ac
 8005e4c:	2001387c 	.word	0x2001387c

08005e50 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b088      	sub	sp, #32
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e58:	f3ef 8311 	mrs	r3, BASEPRI
 8005e5c:	f04f 0120 	mov.w	r1, #32
 8005e60:	f381 8811 	msr	BASEPRI, r1
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	4819      	ldr	r0, [pc, #100]	; (8005ecc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005e68:	f7fe ffa6 	bl	8004db8 <_PreparePacket>
 8005e6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e72:	4b17      	ldr	r3, [pc, #92]	; (8005ed0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	61bb      	str	r3, [r7, #24]
 8005e84:	e00b      	b.n	8005e9e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	1c59      	adds	r1, r3, #1
 8005e8e:	61f9      	str	r1, [r7, #28]
 8005e90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	09db      	lsrs	r3, r3, #7
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ea2:	d8f0      	bhi.n	8005e86 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	61fa      	str	r2, [r7, #28]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005eb4:	2206      	movs	r2, #6
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	6938      	ldr	r0, [r7, #16]
 8005eba:	f7ff f869 	bl	8004f90 <_SendPacket>
  RECORD_END();
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f383 8811 	msr	BASEPRI, r3
}
 8005ec4:	bf00      	nop
 8005ec6:	3720      	adds	r7, #32
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	200138ac 	.word	0x200138ac
 8005ed0:	2001387c 	.word	0x2001387c

08005ed4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08a      	sub	sp, #40	; 0x28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ede:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee2:	f04f 0120 	mov.w	r1, #32
 8005ee6:	f381 8811 	msr	BASEPRI, r1
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	4827      	ldr	r0, [pc, #156]	; (8005f8c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005eee:	f7fe ff63 	bl	8004db8 <_PreparePacket>
 8005ef2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ef8:	4b25      	ldr	r3, [pc, #148]	; (8005f90 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	623b      	str	r3, [r7, #32]
 8005f0a:	e00b      	b.n	8005f24 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	1c59      	adds	r1, r3, #1
 8005f14:	6279      	str	r1, [r7, #36]	; 0x24
 8005f16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	09db      	lsrs	r3, r3, #7
 8005f22:	623b      	str	r3, [r7, #32]
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	2b7f      	cmp	r3, #127	; 0x7f
 8005f28:	d8f0      	bhi.n	8005f0c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	627a      	str	r2, [r7, #36]	; 0x24
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	e00b      	b.n	8005f5c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	1c59      	adds	r1, r3, #1
 8005f4c:	61f9      	str	r1, [r7, #28]
 8005f4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	09db      	lsrs	r3, r3, #7
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f60:	d8f0      	bhi.n	8005f44 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	61fa      	str	r2, [r7, #28]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005f72:	2207      	movs	r2, #7
 8005f74:	68f9      	ldr	r1, [r7, #12]
 8005f76:	6938      	ldr	r0, [r7, #16]
 8005f78:	f7ff f80a 	bl	8004f90 <_SendPacket>
  RECORD_END();
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f383 8811 	msr	BASEPRI, r3
}
 8005f82:	bf00      	nop
 8005f84:	3728      	adds	r7, #40	; 0x28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	200138ac 	.word	0x200138ac
 8005f90:	2001387c 	.word	0x2001387c

08005f94 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005f9c:	4b04      	ldr	r3, [pc, #16]	; (8005fb0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	1ad3      	subs	r3, r2, r3
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	2001387c 	.word	0x2001387c

08005fb4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08c      	sub	sp, #48	; 0x30
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005fbe:	4b40      	ldr	r3, [pc, #256]	; (80060c0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d077      	beq.n	80060b6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005fc6:	4b3e      	ldr	r3, [pc, #248]	; (80060c0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005fcc:	2300      	movs	r3, #0
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd0:	e008      	b.n	8005fe4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d007      	beq.n	8005fee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d3f2      	bcc.n	8005fd2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005fec:	e000      	b.n	8005ff0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005fee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d055      	beq.n	80060a2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8005ffa:	f04f 0120 	mov.w	r1, #32
 8005ffe:	f381 8811 	msr	BASEPRI, r1
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	482f      	ldr	r0, [pc, #188]	; (80060c4 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006006:	f7fe fed7 	bl	8004db8 <_PreparePacket>
 800600a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	623b      	str	r3, [r7, #32]
 8006018:	e00b      	b.n	8006032 <SEGGER_SYSVIEW_SendModule+0x7e>
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	b2da      	uxtb	r2, r3
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	1c59      	adds	r1, r3, #1
 8006022:	6279      	str	r1, [r7, #36]	; 0x24
 8006024:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	09db      	lsrs	r3, r3, #7
 8006030:	623b      	str	r3, [r7, #32]
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	2b7f      	cmp	r3, #127	; 0x7f
 8006036:	d8f0      	bhi.n	800601a <SEGGER_SYSVIEW_SendModule+0x66>
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	627a      	str	r2, [r7, #36]	; 0x24
 800603e:	6a3a      	ldr	r2, [r7, #32]
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	61fb      	str	r3, [r7, #28]
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	61bb      	str	r3, [r7, #24]
 8006052:	e00b      	b.n	800606c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	b2da      	uxtb	r2, r3
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	1c59      	adds	r1, r3, #1
 800605c:	61f9      	str	r1, [r7, #28]
 800605e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	09db      	lsrs	r3, r3, #7
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b7f      	cmp	r3, #127	; 0x7f
 8006070:	d8f0      	bhi.n	8006054 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	61fa      	str	r2, [r7, #28]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2280      	movs	r2, #128	; 0x80
 8006088:	4619      	mov	r1, r3
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f7fe fe64 	bl	8004d58 <_EncodeStr>
 8006090:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006092:	2216      	movs	r2, #22
 8006094:	68f9      	ldr	r1, [r7, #12]
 8006096:	6938      	ldr	r0, [r7, #16]
 8006098:	f7fe ff7a 	bl	8004f90 <_SendPacket>
      RECORD_END();
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80060a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d006      	beq.n	80060b6 <SEGGER_SYSVIEW_SendModule+0x102>
 80060a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	4798      	blx	r3
    }
  }
}
 80060b6:	bf00      	nop
 80060b8:	3730      	adds	r7, #48	; 0x30
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	200138a4 	.word	0x200138a4
 80060c4:	200138ac 	.word	0x200138ac

080060c8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80060ce:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00f      	beq.n	80060f6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80060d6:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f2      	bne.n	80060dc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	200138a4 	.word	0x200138a4

08006104 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800610a:	f3ef 8311 	mrs	r3, BASEPRI
 800610e:	f04f 0120 	mov.w	r1, #32
 8006112:	f381 8811 	msr	BASEPRI, r1
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	4817      	ldr	r0, [pc, #92]	; (8006178 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800611a:	f7fe fe4d 	bl	8004db8 <_PreparePacket>
 800611e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	4b14      	ldr	r3, [pc, #80]	; (800617c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	e00b      	b.n	8006148 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	b2da      	uxtb	r2, r3
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	1c59      	adds	r1, r3, #1
 8006138:	6179      	str	r1, [r7, #20]
 800613a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	09db      	lsrs	r3, r3, #7
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2b7f      	cmp	r3, #127	; 0x7f
 800614c:	d8f0      	bhi.n	8006130 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	617a      	str	r2, [r7, #20]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800615e:	221b      	movs	r2, #27
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	68b8      	ldr	r0, [r7, #8]
 8006164:	f7fe ff14 	bl	8004f90 <_SendPacket>
  RECORD_END();
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f383 8811 	msr	BASEPRI, r3
}
 800616e:	bf00      	nop
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	200138ac 	.word	0x200138ac
 800617c:	200138a8 	.word	0x200138a8

08006180 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b08a      	sub	sp, #40	; 0x28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006188:	f3ef 8311 	mrs	r3, BASEPRI
 800618c:	f04f 0120 	mov.w	r1, #32
 8006190:	f381 8811 	msr	BASEPRI, r1
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	4827      	ldr	r0, [pc, #156]	; (8006234 <SEGGER_SYSVIEW_Print+0xb4>)
 8006198:	f7fe fe0e 	bl	8004db8 <_PreparePacket>
 800619c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800619e:	2280      	movs	r2, #128	; 0x80
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	6938      	ldr	r0, [r7, #16]
 80061a4:	f7fe fdd8 	bl	8004d58 <_EncodeStr>
 80061a8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
 80061ae:	2300      	movs	r3, #0
 80061b0:	623b      	str	r3, [r7, #32]
 80061b2:	e00b      	b.n	80061cc <SEGGER_SYSVIEW_Print+0x4c>
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	1c59      	adds	r1, r3, #1
 80061bc:	6279      	str	r1, [r7, #36]	; 0x24
 80061be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	09db      	lsrs	r3, r3, #7
 80061ca:	623b      	str	r3, [r7, #32]
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	2b7f      	cmp	r3, #127	; 0x7f
 80061d0:	d8f0      	bhi.n	80061b4 <SEGGER_SYSVIEW_Print+0x34>
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	627a      	str	r2, [r7, #36]	; 0x24
 80061d8:	6a3a      	ldr	r2, [r7, #32]
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	61fb      	str	r3, [r7, #28]
 80061e6:	2300      	movs	r3, #0
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	e00b      	b.n	8006204 <SEGGER_SYSVIEW_Print+0x84>
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	1c59      	adds	r1, r3, #1
 80061f4:	61f9      	str	r1, [r7, #28]
 80061f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	09db      	lsrs	r3, r3, #7
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	2b7f      	cmp	r3, #127	; 0x7f
 8006208:	d8f0      	bhi.n	80061ec <SEGGER_SYSVIEW_Print+0x6c>
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	61fa      	str	r2, [r7, #28]
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800621a:	221a      	movs	r2, #26
 800621c:	68f9      	ldr	r1, [r7, #12]
 800621e:	6938      	ldr	r0, [r7, #16]
 8006220:	f7fe feb6 	bl	8004f90 <_SendPacket>
  RECORD_END();
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f383 8811 	msr	BASEPRI, r3
}
 800622a:	bf00      	nop
 800622c:	3728      	adds	r7, #40	; 0x28
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	200138ac 	.word	0x200138ac

08006238 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	; 0x28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006240:	f3ef 8311 	mrs	r3, BASEPRI
 8006244:	f04f 0120 	mov.w	r1, #32
 8006248:	f381 8811 	msr	BASEPRI, r1
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	4827      	ldr	r0, [pc, #156]	; (80062ec <SEGGER_SYSVIEW_Warn+0xb4>)
 8006250:	f7fe fdb2 	bl	8004db8 <_PreparePacket>
 8006254:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006256:	2280      	movs	r2, #128	; 0x80
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	6938      	ldr	r0, [r7, #16]
 800625c:	f7fe fd7c 	bl	8004d58 <_EncodeStr>
 8006260:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	627b      	str	r3, [r7, #36]	; 0x24
 8006266:	2301      	movs	r3, #1
 8006268:	623b      	str	r3, [r7, #32]
 800626a:	e00b      	b.n	8006284 <SEGGER_SYSVIEW_Warn+0x4c>
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	b2da      	uxtb	r2, r3
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	1c59      	adds	r1, r3, #1
 8006274:	6279      	str	r1, [r7, #36]	; 0x24
 8006276:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	09db      	lsrs	r3, r3, #7
 8006282:	623b      	str	r3, [r7, #32]
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	2b7f      	cmp	r3, #127	; 0x7f
 8006288:	d8f0      	bhi.n	800626c <SEGGER_SYSVIEW_Warn+0x34>
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	627a      	str	r2, [r7, #36]	; 0x24
 8006290:	6a3a      	ldr	r2, [r7, #32]
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	2300      	movs	r3, #0
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	e00b      	b.n	80062bc <SEGGER_SYSVIEW_Warn+0x84>
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	1c59      	adds	r1, r3, #1
 80062ac:	61f9      	str	r1, [r7, #28]
 80062ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	09db      	lsrs	r3, r3, #7
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	2b7f      	cmp	r3, #127	; 0x7f
 80062c0:	d8f0      	bhi.n	80062a4 <SEGGER_SYSVIEW_Warn+0x6c>
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	61fa      	str	r2, [r7, #28]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80062d2:	221a      	movs	r2, #26
 80062d4:	68f9      	ldr	r1, [r7, #12]
 80062d6:	6938      	ldr	r0, [r7, #16]
 80062d8:	f7fe fe5a 	bl	8004f90 <_SendPacket>
  RECORD_END();
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f383 8811 	msr	BASEPRI, r3
}
 80062e2:	bf00      	nop
 80062e4:	3728      	adds	r7, #40	; 0x28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	200138ac 	.word	0x200138ac

080062f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80062f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80062f6:	2300      	movs	r3, #0
 80062f8:	607b      	str	r3, [r7, #4]
 80062fa:	e033      	b.n	8006364 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80062fc:	491e      	ldr	r1, [pc, #120]	; (8006378 <_cbSendTaskList+0x88>)
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	491a      	ldr	r1, [pc, #104]	; (8006378 <_cbSendTaskList+0x88>)
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	3304      	adds	r3, #4
 800631c:	6819      	ldr	r1, [r3, #0]
 800631e:	4c16      	ldr	r4, [pc, #88]	; (8006378 <_cbSendTaskList+0x88>)
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4423      	add	r3, r4
 800632c:	3308      	adds	r3, #8
 800632e:	681c      	ldr	r4, [r3, #0]
 8006330:	4d11      	ldr	r5, [pc, #68]	; (8006378 <_cbSendTaskList+0x88>)
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	442b      	add	r3, r5
 800633e:	330c      	adds	r3, #12
 8006340:	681d      	ldr	r5, [r3, #0]
 8006342:	4e0d      	ldr	r6, [pc, #52]	; (8006378 <_cbSendTaskList+0x88>)
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4433      	add	r3, r6
 8006350:	3310      	adds	r3, #16
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	462b      	mov	r3, r5
 8006358:	4622      	mov	r2, r4
 800635a:	f000 f8bd 	bl	80064d8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3301      	adds	r3, #1
 8006362:	607b      	str	r3, [r7, #4]
 8006364:	4b05      	ldr	r3, [pc, #20]	; (800637c <_cbSendTaskList+0x8c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	429a      	cmp	r2, r3
 800636c:	d3c6      	bcc.n	80062fc <_cbSendTaskList+0xc>
  }
}
 800636e:	bf00      	nop
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006378:	20013990 	.word	0x20013990
 800637c:	20013a30 	.word	0x20013a30

08006380 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006388:	f7fc ff36 	bl	80031f8 <xTaskGetTickCountFromISR>
 800638c:	4603      	mov	r3, r0
 800638e:	2200      	movs	r2, #0
 8006390:	469a      	mov	sl, r3
 8006392:	4693      	mov	fp, r2
 8006394:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006398:	e9d7 0100 	ldrd	r0, r1, [r7]
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	f04f 0a00 	mov.w	sl, #0
 80063a4:	f04f 0b00 	mov.w	fp, #0
 80063a8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80063ac:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80063b0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80063b4:	4652      	mov	r2, sl
 80063b6:	465b      	mov	r3, fp
 80063b8:	1a14      	subs	r4, r2, r0
 80063ba:	eb63 0501 	sbc.w	r5, r3, r1
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	f04f 0300 	mov.w	r3, #0
 80063c6:	00ab      	lsls	r3, r5, #2
 80063c8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80063cc:	00a2      	lsls	r2, r4, #2
 80063ce:	4614      	mov	r4, r2
 80063d0:	461d      	mov	r5, r3
 80063d2:	eb14 0800 	adds.w	r8, r4, r0
 80063d6:	eb45 0901 	adc.w	r9, r5, r1
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ee:	4690      	mov	r8, r2
 80063f0:	4699      	mov	r9, r3
 80063f2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80063f6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80063fa:	4610      	mov	r0, r2
 80063fc:	4619      	mov	r1, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006408 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af02      	add	r7, sp, #8
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006416:	2205      	movs	r2, #5
 8006418:	492b      	ldr	r1, [pc, #172]	; (80064c8 <SYSVIEW_AddTask+0xc0>)
 800641a:	68b8      	ldr	r0, [r7, #8]
 800641c:	f000 f89e 	bl	800655c <memcmp>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d04b      	beq.n	80064be <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006426:	4b29      	ldr	r3, [pc, #164]	; (80064cc <SYSVIEW_AddTask+0xc4>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b07      	cmp	r3, #7
 800642c:	d903      	bls.n	8006436 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800642e:	4828      	ldr	r0, [pc, #160]	; (80064d0 <SYSVIEW_AddTask+0xc8>)
 8006430:	f7ff ff02 	bl	8006238 <SEGGER_SYSVIEW_Warn>
    return;
 8006434:	e044      	b.n	80064c0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006436:	4b25      	ldr	r3, [pc, #148]	; (80064cc <SYSVIEW_AddTask+0xc4>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	4926      	ldr	r1, [pc, #152]	; (80064d4 <SYSVIEW_AddTask+0xcc>)
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800644a:	4b20      	ldr	r3, [pc, #128]	; (80064cc <SYSVIEW_AddTask+0xc4>)
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	4921      	ldr	r1, [pc, #132]	; (80064d4 <SYSVIEW_AddTask+0xcc>)
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	440b      	add	r3, r1
 800645a:	3304      	adds	r3, #4
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006460:	4b1a      	ldr	r3, [pc, #104]	; (80064cc <SYSVIEW_AddTask+0xc4>)
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	491b      	ldr	r1, [pc, #108]	; (80064d4 <SYSVIEW_AddTask+0xcc>)
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	440b      	add	r3, r1
 8006470:	3308      	adds	r3, #8
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006476:	4b15      	ldr	r3, [pc, #84]	; (80064cc <SYSVIEW_AddTask+0xc4>)
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	4916      	ldr	r1, [pc, #88]	; (80064d4 <SYSVIEW_AddTask+0xcc>)
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	440b      	add	r3, r1
 8006486:	330c      	adds	r3, #12
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800648c:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <SYSVIEW_AddTask+0xc4>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	4910      	ldr	r1, [pc, #64]	; (80064d4 <SYSVIEW_AddTask+0xcc>)
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	3310      	adds	r3, #16
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80064a2:	4b0a      	ldr	r3, [pc, #40]	; (80064cc <SYSVIEW_AddTask+0xc4>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3301      	adds	r3, #1
 80064a8:	4a08      	ldr	r2, [pc, #32]	; (80064cc <SYSVIEW_AddTask+0xc4>)
 80064aa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f80e 	bl	80064d8 <SYSVIEW_SendTaskInfo>
 80064bc:	e000      	b.n	80064c0 <SYSVIEW_AddTask+0xb8>
    return;
 80064be:	bf00      	nop

}
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	08006fac 	.word	0x08006fac
 80064cc:	20013a30 	.word	0x20013a30
 80064d0:	08006fb4 	.word	0x08006fb4
 80064d4:	20013990 	.word	0x20013990

080064d8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b08a      	sub	sp, #40	; 0x28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80064e6:	f107 0314 	add.w	r3, r7, #20
 80064ea:	2214      	movs	r2, #20
 80064ec:	2100      	movs	r1, #0
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 f844 	bl	800657c <memset>
  TaskInfo.TaskID     = TaskID;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006508:	f107 0314 	add.w	r3, r7, #20
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fa37 	bl	8005980 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006512:	bf00      	nop
 8006514:	3728      	adds	r7, #40	; 0x28
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <siprintf>:
 800651c:	b40e      	push	{r1, r2, r3}
 800651e:	b500      	push	{lr}
 8006520:	b09c      	sub	sp, #112	; 0x70
 8006522:	ab1d      	add	r3, sp, #116	; 0x74
 8006524:	9002      	str	r0, [sp, #8]
 8006526:	9006      	str	r0, [sp, #24]
 8006528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800652c:	4809      	ldr	r0, [pc, #36]	; (8006554 <siprintf+0x38>)
 800652e:	9107      	str	r1, [sp, #28]
 8006530:	9104      	str	r1, [sp, #16]
 8006532:	4909      	ldr	r1, [pc, #36]	; (8006558 <siprintf+0x3c>)
 8006534:	f853 2b04 	ldr.w	r2, [r3], #4
 8006538:	9105      	str	r1, [sp, #20]
 800653a:	6800      	ldr	r0, [r0, #0]
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	a902      	add	r1, sp, #8
 8006540:	f000 f9b0 	bl	80068a4 <_svfiprintf_r>
 8006544:	9b02      	ldr	r3, [sp, #8]
 8006546:	2200      	movs	r2, #0
 8006548:	701a      	strb	r2, [r3, #0]
 800654a:	b01c      	add	sp, #112	; 0x70
 800654c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006550:	b003      	add	sp, #12
 8006552:	4770      	bx	lr
 8006554:	2000012c 	.word	0x2000012c
 8006558:	ffff0208 	.word	0xffff0208

0800655c <memcmp>:
 800655c:	b510      	push	{r4, lr}
 800655e:	3901      	subs	r1, #1
 8006560:	4402      	add	r2, r0
 8006562:	4290      	cmp	r0, r2
 8006564:	d101      	bne.n	800656a <memcmp+0xe>
 8006566:	2000      	movs	r0, #0
 8006568:	e005      	b.n	8006576 <memcmp+0x1a>
 800656a:	7803      	ldrb	r3, [r0, #0]
 800656c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006570:	42a3      	cmp	r3, r4
 8006572:	d001      	beq.n	8006578 <memcmp+0x1c>
 8006574:	1b18      	subs	r0, r3, r4
 8006576:	bd10      	pop	{r4, pc}
 8006578:	3001      	adds	r0, #1
 800657a:	e7f2      	b.n	8006562 <memcmp+0x6>

0800657c <memset>:
 800657c:	4402      	add	r2, r0
 800657e:	4603      	mov	r3, r0
 8006580:	4293      	cmp	r3, r2
 8006582:	d100      	bne.n	8006586 <memset+0xa>
 8006584:	4770      	bx	lr
 8006586:	f803 1b01 	strb.w	r1, [r3], #1
 800658a:	e7f9      	b.n	8006580 <memset+0x4>

0800658c <__errno>:
 800658c:	4b01      	ldr	r3, [pc, #4]	; (8006594 <__errno+0x8>)
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	2000012c 	.word	0x2000012c

08006598 <__libc_init_array>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	4d0d      	ldr	r5, [pc, #52]	; (80065d0 <__libc_init_array+0x38>)
 800659c:	4c0d      	ldr	r4, [pc, #52]	; (80065d4 <__libc_init_array+0x3c>)
 800659e:	1b64      	subs	r4, r4, r5
 80065a0:	10a4      	asrs	r4, r4, #2
 80065a2:	2600      	movs	r6, #0
 80065a4:	42a6      	cmp	r6, r4
 80065a6:	d109      	bne.n	80065bc <__libc_init_array+0x24>
 80065a8:	4d0b      	ldr	r5, [pc, #44]	; (80065d8 <__libc_init_array+0x40>)
 80065aa:	4c0c      	ldr	r4, [pc, #48]	; (80065dc <__libc_init_array+0x44>)
 80065ac:	f000 fc6a 	bl	8006e84 <_init>
 80065b0:	1b64      	subs	r4, r4, r5
 80065b2:	10a4      	asrs	r4, r4, #2
 80065b4:	2600      	movs	r6, #0
 80065b6:	42a6      	cmp	r6, r4
 80065b8:	d105      	bne.n	80065c6 <__libc_init_array+0x2e>
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c0:	4798      	blx	r3
 80065c2:	3601      	adds	r6, #1
 80065c4:	e7ee      	b.n	80065a4 <__libc_init_array+0xc>
 80065c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ca:	4798      	blx	r3
 80065cc:	3601      	adds	r6, #1
 80065ce:	e7f2      	b.n	80065b6 <__libc_init_array+0x1e>
 80065d0:	08007080 	.word	0x08007080
 80065d4:	08007080 	.word	0x08007080
 80065d8:	08007080 	.word	0x08007080
 80065dc:	08007084 	.word	0x08007084

080065e0 <__retarget_lock_acquire_recursive>:
 80065e0:	4770      	bx	lr

080065e2 <__retarget_lock_release_recursive>:
 80065e2:	4770      	bx	lr

080065e4 <memcpy>:
 80065e4:	440a      	add	r2, r1
 80065e6:	4291      	cmp	r1, r2
 80065e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80065ec:	d100      	bne.n	80065f0 <memcpy+0xc>
 80065ee:	4770      	bx	lr
 80065f0:	b510      	push	{r4, lr}
 80065f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065fa:	4291      	cmp	r1, r2
 80065fc:	d1f9      	bne.n	80065f2 <memcpy+0xe>
 80065fe:	bd10      	pop	{r4, pc}

08006600 <_free_r>:
 8006600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006602:	2900      	cmp	r1, #0
 8006604:	d044      	beq.n	8006690 <_free_r+0x90>
 8006606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800660a:	9001      	str	r0, [sp, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	f1a1 0404 	sub.w	r4, r1, #4
 8006612:	bfb8      	it	lt
 8006614:	18e4      	addlt	r4, r4, r3
 8006616:	f000 f8df 	bl	80067d8 <__malloc_lock>
 800661a:	4a1e      	ldr	r2, [pc, #120]	; (8006694 <_free_r+0x94>)
 800661c:	9801      	ldr	r0, [sp, #4]
 800661e:	6813      	ldr	r3, [r2, #0]
 8006620:	b933      	cbnz	r3, 8006630 <_free_r+0x30>
 8006622:	6063      	str	r3, [r4, #4]
 8006624:	6014      	str	r4, [r2, #0]
 8006626:	b003      	add	sp, #12
 8006628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800662c:	f000 b8da 	b.w	80067e4 <__malloc_unlock>
 8006630:	42a3      	cmp	r3, r4
 8006632:	d908      	bls.n	8006646 <_free_r+0x46>
 8006634:	6825      	ldr	r5, [r4, #0]
 8006636:	1961      	adds	r1, r4, r5
 8006638:	428b      	cmp	r3, r1
 800663a:	bf01      	itttt	eq
 800663c:	6819      	ldreq	r1, [r3, #0]
 800663e:	685b      	ldreq	r3, [r3, #4]
 8006640:	1949      	addeq	r1, r1, r5
 8006642:	6021      	streq	r1, [r4, #0]
 8006644:	e7ed      	b.n	8006622 <_free_r+0x22>
 8006646:	461a      	mov	r2, r3
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	b10b      	cbz	r3, 8006650 <_free_r+0x50>
 800664c:	42a3      	cmp	r3, r4
 800664e:	d9fa      	bls.n	8006646 <_free_r+0x46>
 8006650:	6811      	ldr	r1, [r2, #0]
 8006652:	1855      	adds	r5, r2, r1
 8006654:	42a5      	cmp	r5, r4
 8006656:	d10b      	bne.n	8006670 <_free_r+0x70>
 8006658:	6824      	ldr	r4, [r4, #0]
 800665a:	4421      	add	r1, r4
 800665c:	1854      	adds	r4, r2, r1
 800665e:	42a3      	cmp	r3, r4
 8006660:	6011      	str	r1, [r2, #0]
 8006662:	d1e0      	bne.n	8006626 <_free_r+0x26>
 8006664:	681c      	ldr	r4, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	6053      	str	r3, [r2, #4]
 800666a:	440c      	add	r4, r1
 800666c:	6014      	str	r4, [r2, #0]
 800666e:	e7da      	b.n	8006626 <_free_r+0x26>
 8006670:	d902      	bls.n	8006678 <_free_r+0x78>
 8006672:	230c      	movs	r3, #12
 8006674:	6003      	str	r3, [r0, #0]
 8006676:	e7d6      	b.n	8006626 <_free_r+0x26>
 8006678:	6825      	ldr	r5, [r4, #0]
 800667a:	1961      	adds	r1, r4, r5
 800667c:	428b      	cmp	r3, r1
 800667e:	bf04      	itt	eq
 8006680:	6819      	ldreq	r1, [r3, #0]
 8006682:	685b      	ldreq	r3, [r3, #4]
 8006684:	6063      	str	r3, [r4, #4]
 8006686:	bf04      	itt	eq
 8006688:	1949      	addeq	r1, r1, r5
 800668a:	6021      	streq	r1, [r4, #0]
 800668c:	6054      	str	r4, [r2, #4]
 800668e:	e7ca      	b.n	8006626 <_free_r+0x26>
 8006690:	b003      	add	sp, #12
 8006692:	bd30      	pop	{r4, r5, pc}
 8006694:	20013b74 	.word	0x20013b74

08006698 <sbrk_aligned>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	4e0e      	ldr	r6, [pc, #56]	; (80066d4 <sbrk_aligned+0x3c>)
 800669c:	460c      	mov	r4, r1
 800669e:	6831      	ldr	r1, [r6, #0]
 80066a0:	4605      	mov	r5, r0
 80066a2:	b911      	cbnz	r1, 80066aa <sbrk_aligned+0x12>
 80066a4:	f000 fba6 	bl	8006df4 <_sbrk_r>
 80066a8:	6030      	str	r0, [r6, #0]
 80066aa:	4621      	mov	r1, r4
 80066ac:	4628      	mov	r0, r5
 80066ae:	f000 fba1 	bl	8006df4 <_sbrk_r>
 80066b2:	1c43      	adds	r3, r0, #1
 80066b4:	d00a      	beq.n	80066cc <sbrk_aligned+0x34>
 80066b6:	1cc4      	adds	r4, r0, #3
 80066b8:	f024 0403 	bic.w	r4, r4, #3
 80066bc:	42a0      	cmp	r0, r4
 80066be:	d007      	beq.n	80066d0 <sbrk_aligned+0x38>
 80066c0:	1a21      	subs	r1, r4, r0
 80066c2:	4628      	mov	r0, r5
 80066c4:	f000 fb96 	bl	8006df4 <_sbrk_r>
 80066c8:	3001      	adds	r0, #1
 80066ca:	d101      	bne.n	80066d0 <sbrk_aligned+0x38>
 80066cc:	f04f 34ff 	mov.w	r4, #4294967295
 80066d0:	4620      	mov	r0, r4
 80066d2:	bd70      	pop	{r4, r5, r6, pc}
 80066d4:	20013b78 	.word	0x20013b78

080066d8 <_malloc_r>:
 80066d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066dc:	1ccd      	adds	r5, r1, #3
 80066de:	f025 0503 	bic.w	r5, r5, #3
 80066e2:	3508      	adds	r5, #8
 80066e4:	2d0c      	cmp	r5, #12
 80066e6:	bf38      	it	cc
 80066e8:	250c      	movcc	r5, #12
 80066ea:	2d00      	cmp	r5, #0
 80066ec:	4607      	mov	r7, r0
 80066ee:	db01      	blt.n	80066f4 <_malloc_r+0x1c>
 80066f0:	42a9      	cmp	r1, r5
 80066f2:	d905      	bls.n	8006700 <_malloc_r+0x28>
 80066f4:	230c      	movs	r3, #12
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	2600      	movs	r6, #0
 80066fa:	4630      	mov	r0, r6
 80066fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006700:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067d4 <_malloc_r+0xfc>
 8006704:	f000 f868 	bl	80067d8 <__malloc_lock>
 8006708:	f8d8 3000 	ldr.w	r3, [r8]
 800670c:	461c      	mov	r4, r3
 800670e:	bb5c      	cbnz	r4, 8006768 <_malloc_r+0x90>
 8006710:	4629      	mov	r1, r5
 8006712:	4638      	mov	r0, r7
 8006714:	f7ff ffc0 	bl	8006698 <sbrk_aligned>
 8006718:	1c43      	adds	r3, r0, #1
 800671a:	4604      	mov	r4, r0
 800671c:	d155      	bne.n	80067ca <_malloc_r+0xf2>
 800671e:	f8d8 4000 	ldr.w	r4, [r8]
 8006722:	4626      	mov	r6, r4
 8006724:	2e00      	cmp	r6, #0
 8006726:	d145      	bne.n	80067b4 <_malloc_r+0xdc>
 8006728:	2c00      	cmp	r4, #0
 800672a:	d048      	beq.n	80067be <_malloc_r+0xe6>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	4631      	mov	r1, r6
 8006730:	4638      	mov	r0, r7
 8006732:	eb04 0903 	add.w	r9, r4, r3
 8006736:	f000 fb5d 	bl	8006df4 <_sbrk_r>
 800673a:	4581      	cmp	r9, r0
 800673c:	d13f      	bne.n	80067be <_malloc_r+0xe6>
 800673e:	6821      	ldr	r1, [r4, #0]
 8006740:	1a6d      	subs	r5, r5, r1
 8006742:	4629      	mov	r1, r5
 8006744:	4638      	mov	r0, r7
 8006746:	f7ff ffa7 	bl	8006698 <sbrk_aligned>
 800674a:	3001      	adds	r0, #1
 800674c:	d037      	beq.n	80067be <_malloc_r+0xe6>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	442b      	add	r3, r5
 8006752:	6023      	str	r3, [r4, #0]
 8006754:	f8d8 3000 	ldr.w	r3, [r8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d038      	beq.n	80067ce <_malloc_r+0xf6>
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	42a2      	cmp	r2, r4
 8006760:	d12b      	bne.n	80067ba <_malloc_r+0xe2>
 8006762:	2200      	movs	r2, #0
 8006764:	605a      	str	r2, [r3, #4]
 8006766:	e00f      	b.n	8006788 <_malloc_r+0xb0>
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	1b52      	subs	r2, r2, r5
 800676c:	d41f      	bmi.n	80067ae <_malloc_r+0xd6>
 800676e:	2a0b      	cmp	r2, #11
 8006770:	d917      	bls.n	80067a2 <_malloc_r+0xca>
 8006772:	1961      	adds	r1, r4, r5
 8006774:	42a3      	cmp	r3, r4
 8006776:	6025      	str	r5, [r4, #0]
 8006778:	bf18      	it	ne
 800677a:	6059      	strne	r1, [r3, #4]
 800677c:	6863      	ldr	r3, [r4, #4]
 800677e:	bf08      	it	eq
 8006780:	f8c8 1000 	streq.w	r1, [r8]
 8006784:	5162      	str	r2, [r4, r5]
 8006786:	604b      	str	r3, [r1, #4]
 8006788:	4638      	mov	r0, r7
 800678a:	f104 060b 	add.w	r6, r4, #11
 800678e:	f000 f829 	bl	80067e4 <__malloc_unlock>
 8006792:	f026 0607 	bic.w	r6, r6, #7
 8006796:	1d23      	adds	r3, r4, #4
 8006798:	1af2      	subs	r2, r6, r3
 800679a:	d0ae      	beq.n	80066fa <_malloc_r+0x22>
 800679c:	1b9b      	subs	r3, r3, r6
 800679e:	50a3      	str	r3, [r4, r2]
 80067a0:	e7ab      	b.n	80066fa <_malloc_r+0x22>
 80067a2:	42a3      	cmp	r3, r4
 80067a4:	6862      	ldr	r2, [r4, #4]
 80067a6:	d1dd      	bne.n	8006764 <_malloc_r+0x8c>
 80067a8:	f8c8 2000 	str.w	r2, [r8]
 80067ac:	e7ec      	b.n	8006788 <_malloc_r+0xb0>
 80067ae:	4623      	mov	r3, r4
 80067b0:	6864      	ldr	r4, [r4, #4]
 80067b2:	e7ac      	b.n	800670e <_malloc_r+0x36>
 80067b4:	4634      	mov	r4, r6
 80067b6:	6876      	ldr	r6, [r6, #4]
 80067b8:	e7b4      	b.n	8006724 <_malloc_r+0x4c>
 80067ba:	4613      	mov	r3, r2
 80067bc:	e7cc      	b.n	8006758 <_malloc_r+0x80>
 80067be:	230c      	movs	r3, #12
 80067c0:	603b      	str	r3, [r7, #0]
 80067c2:	4638      	mov	r0, r7
 80067c4:	f000 f80e 	bl	80067e4 <__malloc_unlock>
 80067c8:	e797      	b.n	80066fa <_malloc_r+0x22>
 80067ca:	6025      	str	r5, [r4, #0]
 80067cc:	e7dc      	b.n	8006788 <_malloc_r+0xb0>
 80067ce:	605b      	str	r3, [r3, #4]
 80067d0:	deff      	udf	#255	; 0xff
 80067d2:	bf00      	nop
 80067d4:	20013b74 	.word	0x20013b74

080067d8 <__malloc_lock>:
 80067d8:	4801      	ldr	r0, [pc, #4]	; (80067e0 <__malloc_lock+0x8>)
 80067da:	f7ff bf01 	b.w	80065e0 <__retarget_lock_acquire_recursive>
 80067de:	bf00      	nop
 80067e0:	20013b70 	.word	0x20013b70

080067e4 <__malloc_unlock>:
 80067e4:	4801      	ldr	r0, [pc, #4]	; (80067ec <__malloc_unlock+0x8>)
 80067e6:	f7ff befc 	b.w	80065e2 <__retarget_lock_release_recursive>
 80067ea:	bf00      	nop
 80067ec:	20013b70 	.word	0x20013b70

080067f0 <__ssputs_r>:
 80067f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f4:	688e      	ldr	r6, [r1, #8]
 80067f6:	461f      	mov	r7, r3
 80067f8:	42be      	cmp	r6, r7
 80067fa:	680b      	ldr	r3, [r1, #0]
 80067fc:	4682      	mov	sl, r0
 80067fe:	460c      	mov	r4, r1
 8006800:	4690      	mov	r8, r2
 8006802:	d82c      	bhi.n	800685e <__ssputs_r+0x6e>
 8006804:	898a      	ldrh	r2, [r1, #12]
 8006806:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800680a:	d026      	beq.n	800685a <__ssputs_r+0x6a>
 800680c:	6965      	ldr	r5, [r4, #20]
 800680e:	6909      	ldr	r1, [r1, #16]
 8006810:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006814:	eba3 0901 	sub.w	r9, r3, r1
 8006818:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800681c:	1c7b      	adds	r3, r7, #1
 800681e:	444b      	add	r3, r9
 8006820:	106d      	asrs	r5, r5, #1
 8006822:	429d      	cmp	r5, r3
 8006824:	bf38      	it	cc
 8006826:	461d      	movcc	r5, r3
 8006828:	0553      	lsls	r3, r2, #21
 800682a:	d527      	bpl.n	800687c <__ssputs_r+0x8c>
 800682c:	4629      	mov	r1, r5
 800682e:	f7ff ff53 	bl	80066d8 <_malloc_r>
 8006832:	4606      	mov	r6, r0
 8006834:	b360      	cbz	r0, 8006890 <__ssputs_r+0xa0>
 8006836:	6921      	ldr	r1, [r4, #16]
 8006838:	464a      	mov	r2, r9
 800683a:	f7ff fed3 	bl	80065e4 <memcpy>
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006848:	81a3      	strh	r3, [r4, #12]
 800684a:	6126      	str	r6, [r4, #16]
 800684c:	6165      	str	r5, [r4, #20]
 800684e:	444e      	add	r6, r9
 8006850:	eba5 0509 	sub.w	r5, r5, r9
 8006854:	6026      	str	r6, [r4, #0]
 8006856:	60a5      	str	r5, [r4, #8]
 8006858:	463e      	mov	r6, r7
 800685a:	42be      	cmp	r6, r7
 800685c:	d900      	bls.n	8006860 <__ssputs_r+0x70>
 800685e:	463e      	mov	r6, r7
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	4632      	mov	r2, r6
 8006864:	4641      	mov	r1, r8
 8006866:	f000 faab 	bl	8006dc0 <memmove>
 800686a:	68a3      	ldr	r3, [r4, #8]
 800686c:	1b9b      	subs	r3, r3, r6
 800686e:	60a3      	str	r3, [r4, #8]
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	4433      	add	r3, r6
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	2000      	movs	r0, #0
 8006878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687c:	462a      	mov	r2, r5
 800687e:	f000 fac9 	bl	8006e14 <_realloc_r>
 8006882:	4606      	mov	r6, r0
 8006884:	2800      	cmp	r0, #0
 8006886:	d1e0      	bne.n	800684a <__ssputs_r+0x5a>
 8006888:	6921      	ldr	r1, [r4, #16]
 800688a:	4650      	mov	r0, sl
 800688c:	f7ff feb8 	bl	8006600 <_free_r>
 8006890:	230c      	movs	r3, #12
 8006892:	f8ca 3000 	str.w	r3, [sl]
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800689c:	81a3      	strh	r3, [r4, #12]
 800689e:	f04f 30ff 	mov.w	r0, #4294967295
 80068a2:	e7e9      	b.n	8006878 <__ssputs_r+0x88>

080068a4 <_svfiprintf_r>:
 80068a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a8:	4698      	mov	r8, r3
 80068aa:	898b      	ldrh	r3, [r1, #12]
 80068ac:	061b      	lsls	r3, r3, #24
 80068ae:	b09d      	sub	sp, #116	; 0x74
 80068b0:	4607      	mov	r7, r0
 80068b2:	460d      	mov	r5, r1
 80068b4:	4614      	mov	r4, r2
 80068b6:	d50e      	bpl.n	80068d6 <_svfiprintf_r+0x32>
 80068b8:	690b      	ldr	r3, [r1, #16]
 80068ba:	b963      	cbnz	r3, 80068d6 <_svfiprintf_r+0x32>
 80068bc:	2140      	movs	r1, #64	; 0x40
 80068be:	f7ff ff0b 	bl	80066d8 <_malloc_r>
 80068c2:	6028      	str	r0, [r5, #0]
 80068c4:	6128      	str	r0, [r5, #16]
 80068c6:	b920      	cbnz	r0, 80068d2 <_svfiprintf_r+0x2e>
 80068c8:	230c      	movs	r3, #12
 80068ca:	603b      	str	r3, [r7, #0]
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295
 80068d0:	e0d0      	b.n	8006a74 <_svfiprintf_r+0x1d0>
 80068d2:	2340      	movs	r3, #64	; 0x40
 80068d4:	616b      	str	r3, [r5, #20]
 80068d6:	2300      	movs	r3, #0
 80068d8:	9309      	str	r3, [sp, #36]	; 0x24
 80068da:	2320      	movs	r3, #32
 80068dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80068e4:	2330      	movs	r3, #48	; 0x30
 80068e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a8c <_svfiprintf_r+0x1e8>
 80068ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068ee:	f04f 0901 	mov.w	r9, #1
 80068f2:	4623      	mov	r3, r4
 80068f4:	469a      	mov	sl, r3
 80068f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068fa:	b10a      	cbz	r2, 8006900 <_svfiprintf_r+0x5c>
 80068fc:	2a25      	cmp	r2, #37	; 0x25
 80068fe:	d1f9      	bne.n	80068f4 <_svfiprintf_r+0x50>
 8006900:	ebba 0b04 	subs.w	fp, sl, r4
 8006904:	d00b      	beq.n	800691e <_svfiprintf_r+0x7a>
 8006906:	465b      	mov	r3, fp
 8006908:	4622      	mov	r2, r4
 800690a:	4629      	mov	r1, r5
 800690c:	4638      	mov	r0, r7
 800690e:	f7ff ff6f 	bl	80067f0 <__ssputs_r>
 8006912:	3001      	adds	r0, #1
 8006914:	f000 80a9 	beq.w	8006a6a <_svfiprintf_r+0x1c6>
 8006918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800691a:	445a      	add	r2, fp
 800691c:	9209      	str	r2, [sp, #36]	; 0x24
 800691e:	f89a 3000 	ldrb.w	r3, [sl]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80a1 	beq.w	8006a6a <_svfiprintf_r+0x1c6>
 8006928:	2300      	movs	r3, #0
 800692a:	f04f 32ff 	mov.w	r2, #4294967295
 800692e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006932:	f10a 0a01 	add.w	sl, sl, #1
 8006936:	9304      	str	r3, [sp, #16]
 8006938:	9307      	str	r3, [sp, #28]
 800693a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800693e:	931a      	str	r3, [sp, #104]	; 0x68
 8006940:	4654      	mov	r4, sl
 8006942:	2205      	movs	r2, #5
 8006944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006948:	4850      	ldr	r0, [pc, #320]	; (8006a8c <_svfiprintf_r+0x1e8>)
 800694a:	f7f9 fc51 	bl	80001f0 <memchr>
 800694e:	9a04      	ldr	r2, [sp, #16]
 8006950:	b9d8      	cbnz	r0, 800698a <_svfiprintf_r+0xe6>
 8006952:	06d0      	lsls	r0, r2, #27
 8006954:	bf44      	itt	mi
 8006956:	2320      	movmi	r3, #32
 8006958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800695c:	0711      	lsls	r1, r2, #28
 800695e:	bf44      	itt	mi
 8006960:	232b      	movmi	r3, #43	; 0x2b
 8006962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006966:	f89a 3000 	ldrb.w	r3, [sl]
 800696a:	2b2a      	cmp	r3, #42	; 0x2a
 800696c:	d015      	beq.n	800699a <_svfiprintf_r+0xf6>
 800696e:	9a07      	ldr	r2, [sp, #28]
 8006970:	4654      	mov	r4, sl
 8006972:	2000      	movs	r0, #0
 8006974:	f04f 0c0a 	mov.w	ip, #10
 8006978:	4621      	mov	r1, r4
 800697a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800697e:	3b30      	subs	r3, #48	; 0x30
 8006980:	2b09      	cmp	r3, #9
 8006982:	d94d      	bls.n	8006a20 <_svfiprintf_r+0x17c>
 8006984:	b1b0      	cbz	r0, 80069b4 <_svfiprintf_r+0x110>
 8006986:	9207      	str	r2, [sp, #28]
 8006988:	e014      	b.n	80069b4 <_svfiprintf_r+0x110>
 800698a:	eba0 0308 	sub.w	r3, r0, r8
 800698e:	fa09 f303 	lsl.w	r3, r9, r3
 8006992:	4313      	orrs	r3, r2
 8006994:	9304      	str	r3, [sp, #16]
 8006996:	46a2      	mov	sl, r4
 8006998:	e7d2      	b.n	8006940 <_svfiprintf_r+0x9c>
 800699a:	9b03      	ldr	r3, [sp, #12]
 800699c:	1d19      	adds	r1, r3, #4
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	9103      	str	r1, [sp, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bfbb      	ittet	lt
 80069a6:	425b      	neglt	r3, r3
 80069a8:	f042 0202 	orrlt.w	r2, r2, #2
 80069ac:	9307      	strge	r3, [sp, #28]
 80069ae:	9307      	strlt	r3, [sp, #28]
 80069b0:	bfb8      	it	lt
 80069b2:	9204      	strlt	r2, [sp, #16]
 80069b4:	7823      	ldrb	r3, [r4, #0]
 80069b6:	2b2e      	cmp	r3, #46	; 0x2e
 80069b8:	d10c      	bne.n	80069d4 <_svfiprintf_r+0x130>
 80069ba:	7863      	ldrb	r3, [r4, #1]
 80069bc:	2b2a      	cmp	r3, #42	; 0x2a
 80069be:	d134      	bne.n	8006a2a <_svfiprintf_r+0x186>
 80069c0:	9b03      	ldr	r3, [sp, #12]
 80069c2:	1d1a      	adds	r2, r3, #4
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	9203      	str	r2, [sp, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	bfb8      	it	lt
 80069cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80069d0:	3402      	adds	r4, #2
 80069d2:	9305      	str	r3, [sp, #20]
 80069d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006a9c <_svfiprintf_r+0x1f8>
 80069d8:	7821      	ldrb	r1, [r4, #0]
 80069da:	2203      	movs	r2, #3
 80069dc:	4650      	mov	r0, sl
 80069de:	f7f9 fc07 	bl	80001f0 <memchr>
 80069e2:	b138      	cbz	r0, 80069f4 <_svfiprintf_r+0x150>
 80069e4:	9b04      	ldr	r3, [sp, #16]
 80069e6:	eba0 000a 	sub.w	r0, r0, sl
 80069ea:	2240      	movs	r2, #64	; 0x40
 80069ec:	4082      	lsls	r2, r0
 80069ee:	4313      	orrs	r3, r2
 80069f0:	3401      	adds	r4, #1
 80069f2:	9304      	str	r3, [sp, #16]
 80069f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f8:	4825      	ldr	r0, [pc, #148]	; (8006a90 <_svfiprintf_r+0x1ec>)
 80069fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069fe:	2206      	movs	r2, #6
 8006a00:	f7f9 fbf6 	bl	80001f0 <memchr>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d038      	beq.n	8006a7a <_svfiprintf_r+0x1d6>
 8006a08:	4b22      	ldr	r3, [pc, #136]	; (8006a94 <_svfiprintf_r+0x1f0>)
 8006a0a:	bb1b      	cbnz	r3, 8006a54 <_svfiprintf_r+0x1b0>
 8006a0c:	9b03      	ldr	r3, [sp, #12]
 8006a0e:	3307      	adds	r3, #7
 8006a10:	f023 0307 	bic.w	r3, r3, #7
 8006a14:	3308      	adds	r3, #8
 8006a16:	9303      	str	r3, [sp, #12]
 8006a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1a:	4433      	add	r3, r6
 8006a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a1e:	e768      	b.n	80068f2 <_svfiprintf_r+0x4e>
 8006a20:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a24:	460c      	mov	r4, r1
 8006a26:	2001      	movs	r0, #1
 8006a28:	e7a6      	b.n	8006978 <_svfiprintf_r+0xd4>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	3401      	adds	r4, #1
 8006a2e:	9305      	str	r3, [sp, #20]
 8006a30:	4619      	mov	r1, r3
 8006a32:	f04f 0c0a 	mov.w	ip, #10
 8006a36:	4620      	mov	r0, r4
 8006a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a3c:	3a30      	subs	r2, #48	; 0x30
 8006a3e:	2a09      	cmp	r2, #9
 8006a40:	d903      	bls.n	8006a4a <_svfiprintf_r+0x1a6>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0c6      	beq.n	80069d4 <_svfiprintf_r+0x130>
 8006a46:	9105      	str	r1, [sp, #20]
 8006a48:	e7c4      	b.n	80069d4 <_svfiprintf_r+0x130>
 8006a4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a4e:	4604      	mov	r4, r0
 8006a50:	2301      	movs	r3, #1
 8006a52:	e7f0      	b.n	8006a36 <_svfiprintf_r+0x192>
 8006a54:	ab03      	add	r3, sp, #12
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	462a      	mov	r2, r5
 8006a5a:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <_svfiprintf_r+0x1f4>)
 8006a5c:	a904      	add	r1, sp, #16
 8006a5e:	4638      	mov	r0, r7
 8006a60:	f3af 8000 	nop.w
 8006a64:	1c42      	adds	r2, r0, #1
 8006a66:	4606      	mov	r6, r0
 8006a68:	d1d6      	bne.n	8006a18 <_svfiprintf_r+0x174>
 8006a6a:	89ab      	ldrh	r3, [r5, #12]
 8006a6c:	065b      	lsls	r3, r3, #25
 8006a6e:	f53f af2d 	bmi.w	80068cc <_svfiprintf_r+0x28>
 8006a72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a74:	b01d      	add	sp, #116	; 0x74
 8006a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7a:	ab03      	add	r3, sp, #12
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	462a      	mov	r2, r5
 8006a80:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <_svfiprintf_r+0x1f4>)
 8006a82:	a904      	add	r1, sp, #16
 8006a84:	4638      	mov	r0, r7
 8006a86:	f000 f879 	bl	8006b7c <_printf_i>
 8006a8a:	e7eb      	b.n	8006a64 <_svfiprintf_r+0x1c0>
 8006a8c:	08007044 	.word	0x08007044
 8006a90:	0800704e 	.word	0x0800704e
 8006a94:	00000000 	.word	0x00000000
 8006a98:	080067f1 	.word	0x080067f1
 8006a9c:	0800704a 	.word	0x0800704a

08006aa0 <_printf_common>:
 8006aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa4:	4616      	mov	r6, r2
 8006aa6:	4699      	mov	r9, r3
 8006aa8:	688a      	ldr	r2, [r1, #8]
 8006aaa:	690b      	ldr	r3, [r1, #16]
 8006aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	bfb8      	it	lt
 8006ab4:	4613      	movlt	r3, r2
 8006ab6:	6033      	str	r3, [r6, #0]
 8006ab8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006abc:	4607      	mov	r7, r0
 8006abe:	460c      	mov	r4, r1
 8006ac0:	b10a      	cbz	r2, 8006ac6 <_printf_common+0x26>
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	6033      	str	r3, [r6, #0]
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	0699      	lsls	r1, r3, #26
 8006aca:	bf42      	ittt	mi
 8006acc:	6833      	ldrmi	r3, [r6, #0]
 8006ace:	3302      	addmi	r3, #2
 8006ad0:	6033      	strmi	r3, [r6, #0]
 8006ad2:	6825      	ldr	r5, [r4, #0]
 8006ad4:	f015 0506 	ands.w	r5, r5, #6
 8006ad8:	d106      	bne.n	8006ae8 <_printf_common+0x48>
 8006ada:	f104 0a19 	add.w	sl, r4, #25
 8006ade:	68e3      	ldr	r3, [r4, #12]
 8006ae0:	6832      	ldr	r2, [r6, #0]
 8006ae2:	1a9b      	subs	r3, r3, r2
 8006ae4:	42ab      	cmp	r3, r5
 8006ae6:	dc26      	bgt.n	8006b36 <_printf_common+0x96>
 8006ae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006aec:	1e13      	subs	r3, r2, #0
 8006aee:	6822      	ldr	r2, [r4, #0]
 8006af0:	bf18      	it	ne
 8006af2:	2301      	movne	r3, #1
 8006af4:	0692      	lsls	r2, r2, #26
 8006af6:	d42b      	bmi.n	8006b50 <_printf_common+0xb0>
 8006af8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006afc:	4649      	mov	r1, r9
 8006afe:	4638      	mov	r0, r7
 8006b00:	47c0      	blx	r8
 8006b02:	3001      	adds	r0, #1
 8006b04:	d01e      	beq.n	8006b44 <_printf_common+0xa4>
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	6922      	ldr	r2, [r4, #16]
 8006b0a:	f003 0306 	and.w	r3, r3, #6
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	bf02      	ittt	eq
 8006b12:	68e5      	ldreq	r5, [r4, #12]
 8006b14:	6833      	ldreq	r3, [r6, #0]
 8006b16:	1aed      	subeq	r5, r5, r3
 8006b18:	68a3      	ldr	r3, [r4, #8]
 8006b1a:	bf0c      	ite	eq
 8006b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b20:	2500      	movne	r5, #0
 8006b22:	4293      	cmp	r3, r2
 8006b24:	bfc4      	itt	gt
 8006b26:	1a9b      	subgt	r3, r3, r2
 8006b28:	18ed      	addgt	r5, r5, r3
 8006b2a:	2600      	movs	r6, #0
 8006b2c:	341a      	adds	r4, #26
 8006b2e:	42b5      	cmp	r5, r6
 8006b30:	d11a      	bne.n	8006b68 <_printf_common+0xc8>
 8006b32:	2000      	movs	r0, #0
 8006b34:	e008      	b.n	8006b48 <_printf_common+0xa8>
 8006b36:	2301      	movs	r3, #1
 8006b38:	4652      	mov	r2, sl
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	47c0      	blx	r8
 8006b40:	3001      	adds	r0, #1
 8006b42:	d103      	bne.n	8006b4c <_printf_common+0xac>
 8006b44:	f04f 30ff 	mov.w	r0, #4294967295
 8006b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4c:	3501      	adds	r5, #1
 8006b4e:	e7c6      	b.n	8006ade <_printf_common+0x3e>
 8006b50:	18e1      	adds	r1, r4, r3
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	2030      	movs	r0, #48	; 0x30
 8006b56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b5a:	4422      	add	r2, r4
 8006b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b64:	3302      	adds	r3, #2
 8006b66:	e7c7      	b.n	8006af8 <_printf_common+0x58>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	4622      	mov	r2, r4
 8006b6c:	4649      	mov	r1, r9
 8006b6e:	4638      	mov	r0, r7
 8006b70:	47c0      	blx	r8
 8006b72:	3001      	adds	r0, #1
 8006b74:	d0e6      	beq.n	8006b44 <_printf_common+0xa4>
 8006b76:	3601      	adds	r6, #1
 8006b78:	e7d9      	b.n	8006b2e <_printf_common+0x8e>
	...

08006b7c <_printf_i>:
 8006b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b80:	7e0f      	ldrb	r7, [r1, #24]
 8006b82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b84:	2f78      	cmp	r7, #120	; 0x78
 8006b86:	4691      	mov	r9, r2
 8006b88:	4680      	mov	r8, r0
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	469a      	mov	sl, r3
 8006b8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b92:	d807      	bhi.n	8006ba4 <_printf_i+0x28>
 8006b94:	2f62      	cmp	r7, #98	; 0x62
 8006b96:	d80a      	bhi.n	8006bae <_printf_i+0x32>
 8006b98:	2f00      	cmp	r7, #0
 8006b9a:	f000 80d4 	beq.w	8006d46 <_printf_i+0x1ca>
 8006b9e:	2f58      	cmp	r7, #88	; 0x58
 8006ba0:	f000 80c0 	beq.w	8006d24 <_printf_i+0x1a8>
 8006ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bac:	e03a      	b.n	8006c24 <_printf_i+0xa8>
 8006bae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bb2:	2b15      	cmp	r3, #21
 8006bb4:	d8f6      	bhi.n	8006ba4 <_printf_i+0x28>
 8006bb6:	a101      	add	r1, pc, #4	; (adr r1, 8006bbc <_printf_i+0x40>)
 8006bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bbc:	08006c15 	.word	0x08006c15
 8006bc0:	08006c29 	.word	0x08006c29
 8006bc4:	08006ba5 	.word	0x08006ba5
 8006bc8:	08006ba5 	.word	0x08006ba5
 8006bcc:	08006ba5 	.word	0x08006ba5
 8006bd0:	08006ba5 	.word	0x08006ba5
 8006bd4:	08006c29 	.word	0x08006c29
 8006bd8:	08006ba5 	.word	0x08006ba5
 8006bdc:	08006ba5 	.word	0x08006ba5
 8006be0:	08006ba5 	.word	0x08006ba5
 8006be4:	08006ba5 	.word	0x08006ba5
 8006be8:	08006d2d 	.word	0x08006d2d
 8006bec:	08006c55 	.word	0x08006c55
 8006bf0:	08006ce7 	.word	0x08006ce7
 8006bf4:	08006ba5 	.word	0x08006ba5
 8006bf8:	08006ba5 	.word	0x08006ba5
 8006bfc:	08006d4f 	.word	0x08006d4f
 8006c00:	08006ba5 	.word	0x08006ba5
 8006c04:	08006c55 	.word	0x08006c55
 8006c08:	08006ba5 	.word	0x08006ba5
 8006c0c:	08006ba5 	.word	0x08006ba5
 8006c10:	08006cef 	.word	0x08006cef
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	1d1a      	adds	r2, r3, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	602a      	str	r2, [r5, #0]
 8006c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c24:	2301      	movs	r3, #1
 8006c26:	e09f      	b.n	8006d68 <_printf_i+0x1ec>
 8006c28:	6820      	ldr	r0, [r4, #0]
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	0607      	lsls	r7, r0, #24
 8006c2e:	f103 0104 	add.w	r1, r3, #4
 8006c32:	6029      	str	r1, [r5, #0]
 8006c34:	d501      	bpl.n	8006c3a <_printf_i+0xbe>
 8006c36:	681e      	ldr	r6, [r3, #0]
 8006c38:	e003      	b.n	8006c42 <_printf_i+0xc6>
 8006c3a:	0646      	lsls	r6, r0, #25
 8006c3c:	d5fb      	bpl.n	8006c36 <_printf_i+0xba>
 8006c3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	da03      	bge.n	8006c4e <_printf_i+0xd2>
 8006c46:	232d      	movs	r3, #45	; 0x2d
 8006c48:	4276      	negs	r6, r6
 8006c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c4e:	485a      	ldr	r0, [pc, #360]	; (8006db8 <_printf_i+0x23c>)
 8006c50:	230a      	movs	r3, #10
 8006c52:	e012      	b.n	8006c7a <_printf_i+0xfe>
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	6820      	ldr	r0, [r4, #0]
 8006c58:	1d19      	adds	r1, r3, #4
 8006c5a:	6029      	str	r1, [r5, #0]
 8006c5c:	0605      	lsls	r5, r0, #24
 8006c5e:	d501      	bpl.n	8006c64 <_printf_i+0xe8>
 8006c60:	681e      	ldr	r6, [r3, #0]
 8006c62:	e002      	b.n	8006c6a <_printf_i+0xee>
 8006c64:	0641      	lsls	r1, r0, #25
 8006c66:	d5fb      	bpl.n	8006c60 <_printf_i+0xe4>
 8006c68:	881e      	ldrh	r6, [r3, #0]
 8006c6a:	4853      	ldr	r0, [pc, #332]	; (8006db8 <_printf_i+0x23c>)
 8006c6c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c6e:	bf0c      	ite	eq
 8006c70:	2308      	moveq	r3, #8
 8006c72:	230a      	movne	r3, #10
 8006c74:	2100      	movs	r1, #0
 8006c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c7a:	6865      	ldr	r5, [r4, #4]
 8006c7c:	60a5      	str	r5, [r4, #8]
 8006c7e:	2d00      	cmp	r5, #0
 8006c80:	bfa2      	ittt	ge
 8006c82:	6821      	ldrge	r1, [r4, #0]
 8006c84:	f021 0104 	bicge.w	r1, r1, #4
 8006c88:	6021      	strge	r1, [r4, #0]
 8006c8a:	b90e      	cbnz	r6, 8006c90 <_printf_i+0x114>
 8006c8c:	2d00      	cmp	r5, #0
 8006c8e:	d04b      	beq.n	8006d28 <_printf_i+0x1ac>
 8006c90:	4615      	mov	r5, r2
 8006c92:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c96:	fb03 6711 	mls	r7, r3, r1, r6
 8006c9a:	5dc7      	ldrb	r7, [r0, r7]
 8006c9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ca0:	4637      	mov	r7, r6
 8006ca2:	42bb      	cmp	r3, r7
 8006ca4:	460e      	mov	r6, r1
 8006ca6:	d9f4      	bls.n	8006c92 <_printf_i+0x116>
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d10b      	bne.n	8006cc4 <_printf_i+0x148>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	07de      	lsls	r6, r3, #31
 8006cb0:	d508      	bpl.n	8006cc4 <_printf_i+0x148>
 8006cb2:	6923      	ldr	r3, [r4, #16]
 8006cb4:	6861      	ldr	r1, [r4, #4]
 8006cb6:	4299      	cmp	r1, r3
 8006cb8:	bfde      	ittt	le
 8006cba:	2330      	movle	r3, #48	; 0x30
 8006cbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cc4:	1b52      	subs	r2, r2, r5
 8006cc6:	6122      	str	r2, [r4, #16]
 8006cc8:	f8cd a000 	str.w	sl, [sp]
 8006ccc:	464b      	mov	r3, r9
 8006cce:	aa03      	add	r2, sp, #12
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	f7ff fee4 	bl	8006aa0 <_printf_common>
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d14a      	bne.n	8006d72 <_printf_i+0x1f6>
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce0:	b004      	add	sp, #16
 8006ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	f043 0320 	orr.w	r3, r3, #32
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	4833      	ldr	r0, [pc, #204]	; (8006dbc <_printf_i+0x240>)
 8006cf0:	2778      	movs	r7, #120	; 0x78
 8006cf2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	6829      	ldr	r1, [r5, #0]
 8006cfa:	061f      	lsls	r7, r3, #24
 8006cfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d00:	d402      	bmi.n	8006d08 <_printf_i+0x18c>
 8006d02:	065f      	lsls	r7, r3, #25
 8006d04:	bf48      	it	mi
 8006d06:	b2b6      	uxthmi	r6, r6
 8006d08:	07df      	lsls	r7, r3, #31
 8006d0a:	bf48      	it	mi
 8006d0c:	f043 0320 	orrmi.w	r3, r3, #32
 8006d10:	6029      	str	r1, [r5, #0]
 8006d12:	bf48      	it	mi
 8006d14:	6023      	strmi	r3, [r4, #0]
 8006d16:	b91e      	cbnz	r6, 8006d20 <_printf_i+0x1a4>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	f023 0320 	bic.w	r3, r3, #32
 8006d1e:	6023      	str	r3, [r4, #0]
 8006d20:	2310      	movs	r3, #16
 8006d22:	e7a7      	b.n	8006c74 <_printf_i+0xf8>
 8006d24:	4824      	ldr	r0, [pc, #144]	; (8006db8 <_printf_i+0x23c>)
 8006d26:	e7e4      	b.n	8006cf2 <_printf_i+0x176>
 8006d28:	4615      	mov	r5, r2
 8006d2a:	e7bd      	b.n	8006ca8 <_printf_i+0x12c>
 8006d2c:	682b      	ldr	r3, [r5, #0]
 8006d2e:	6826      	ldr	r6, [r4, #0]
 8006d30:	6961      	ldr	r1, [r4, #20]
 8006d32:	1d18      	adds	r0, r3, #4
 8006d34:	6028      	str	r0, [r5, #0]
 8006d36:	0635      	lsls	r5, r6, #24
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	d501      	bpl.n	8006d40 <_printf_i+0x1c4>
 8006d3c:	6019      	str	r1, [r3, #0]
 8006d3e:	e002      	b.n	8006d46 <_printf_i+0x1ca>
 8006d40:	0670      	lsls	r0, r6, #25
 8006d42:	d5fb      	bpl.n	8006d3c <_printf_i+0x1c0>
 8006d44:	8019      	strh	r1, [r3, #0]
 8006d46:	2300      	movs	r3, #0
 8006d48:	6123      	str	r3, [r4, #16]
 8006d4a:	4615      	mov	r5, r2
 8006d4c:	e7bc      	b.n	8006cc8 <_printf_i+0x14c>
 8006d4e:	682b      	ldr	r3, [r5, #0]
 8006d50:	1d1a      	adds	r2, r3, #4
 8006d52:	602a      	str	r2, [r5, #0]
 8006d54:	681d      	ldr	r5, [r3, #0]
 8006d56:	6862      	ldr	r2, [r4, #4]
 8006d58:	2100      	movs	r1, #0
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f7f9 fa48 	bl	80001f0 <memchr>
 8006d60:	b108      	cbz	r0, 8006d66 <_printf_i+0x1ea>
 8006d62:	1b40      	subs	r0, r0, r5
 8006d64:	6060      	str	r0, [r4, #4]
 8006d66:	6863      	ldr	r3, [r4, #4]
 8006d68:	6123      	str	r3, [r4, #16]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d70:	e7aa      	b.n	8006cc8 <_printf_i+0x14c>
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	462a      	mov	r2, r5
 8006d76:	4649      	mov	r1, r9
 8006d78:	4640      	mov	r0, r8
 8006d7a:	47d0      	blx	sl
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	d0ad      	beq.n	8006cdc <_printf_i+0x160>
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	079b      	lsls	r3, r3, #30
 8006d84:	d413      	bmi.n	8006dae <_printf_i+0x232>
 8006d86:	68e0      	ldr	r0, [r4, #12]
 8006d88:	9b03      	ldr	r3, [sp, #12]
 8006d8a:	4298      	cmp	r0, r3
 8006d8c:	bfb8      	it	lt
 8006d8e:	4618      	movlt	r0, r3
 8006d90:	e7a6      	b.n	8006ce0 <_printf_i+0x164>
 8006d92:	2301      	movs	r3, #1
 8006d94:	4632      	mov	r2, r6
 8006d96:	4649      	mov	r1, r9
 8006d98:	4640      	mov	r0, r8
 8006d9a:	47d0      	blx	sl
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	d09d      	beq.n	8006cdc <_printf_i+0x160>
 8006da0:	3501      	adds	r5, #1
 8006da2:	68e3      	ldr	r3, [r4, #12]
 8006da4:	9903      	ldr	r1, [sp, #12]
 8006da6:	1a5b      	subs	r3, r3, r1
 8006da8:	42ab      	cmp	r3, r5
 8006daa:	dcf2      	bgt.n	8006d92 <_printf_i+0x216>
 8006dac:	e7eb      	b.n	8006d86 <_printf_i+0x20a>
 8006dae:	2500      	movs	r5, #0
 8006db0:	f104 0619 	add.w	r6, r4, #25
 8006db4:	e7f5      	b.n	8006da2 <_printf_i+0x226>
 8006db6:	bf00      	nop
 8006db8:	08007055 	.word	0x08007055
 8006dbc:	08007066 	.word	0x08007066

08006dc0 <memmove>:
 8006dc0:	4288      	cmp	r0, r1
 8006dc2:	b510      	push	{r4, lr}
 8006dc4:	eb01 0402 	add.w	r4, r1, r2
 8006dc8:	d902      	bls.n	8006dd0 <memmove+0x10>
 8006dca:	4284      	cmp	r4, r0
 8006dcc:	4623      	mov	r3, r4
 8006dce:	d807      	bhi.n	8006de0 <memmove+0x20>
 8006dd0:	1e43      	subs	r3, r0, #1
 8006dd2:	42a1      	cmp	r1, r4
 8006dd4:	d008      	beq.n	8006de8 <memmove+0x28>
 8006dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dde:	e7f8      	b.n	8006dd2 <memmove+0x12>
 8006de0:	4402      	add	r2, r0
 8006de2:	4601      	mov	r1, r0
 8006de4:	428a      	cmp	r2, r1
 8006de6:	d100      	bne.n	8006dea <memmove+0x2a>
 8006de8:	bd10      	pop	{r4, pc}
 8006dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006df2:	e7f7      	b.n	8006de4 <memmove+0x24>

08006df4 <_sbrk_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4d06      	ldr	r5, [pc, #24]	; (8006e10 <_sbrk_r+0x1c>)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	602b      	str	r3, [r5, #0]
 8006e00:	f7f9 fdfa 	bl	80009f8 <_sbrk>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d102      	bne.n	8006e0e <_sbrk_r+0x1a>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	b103      	cbz	r3, 8006e0e <_sbrk_r+0x1a>
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	bd38      	pop	{r3, r4, r5, pc}
 8006e10:	20013b6c 	.word	0x20013b6c

08006e14 <_realloc_r>:
 8006e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e18:	4680      	mov	r8, r0
 8006e1a:	4614      	mov	r4, r2
 8006e1c:	460e      	mov	r6, r1
 8006e1e:	b921      	cbnz	r1, 8006e2a <_realloc_r+0x16>
 8006e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e24:	4611      	mov	r1, r2
 8006e26:	f7ff bc57 	b.w	80066d8 <_malloc_r>
 8006e2a:	b92a      	cbnz	r2, 8006e38 <_realloc_r+0x24>
 8006e2c:	f7ff fbe8 	bl	8006600 <_free_r>
 8006e30:	4625      	mov	r5, r4
 8006e32:	4628      	mov	r0, r5
 8006e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e38:	f000 f81b 	bl	8006e72 <_malloc_usable_size_r>
 8006e3c:	4284      	cmp	r4, r0
 8006e3e:	4607      	mov	r7, r0
 8006e40:	d802      	bhi.n	8006e48 <_realloc_r+0x34>
 8006e42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e46:	d812      	bhi.n	8006e6e <_realloc_r+0x5a>
 8006e48:	4621      	mov	r1, r4
 8006e4a:	4640      	mov	r0, r8
 8006e4c:	f7ff fc44 	bl	80066d8 <_malloc_r>
 8006e50:	4605      	mov	r5, r0
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d0ed      	beq.n	8006e32 <_realloc_r+0x1e>
 8006e56:	42bc      	cmp	r4, r7
 8006e58:	4622      	mov	r2, r4
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	bf28      	it	cs
 8006e5e:	463a      	movcs	r2, r7
 8006e60:	f7ff fbc0 	bl	80065e4 <memcpy>
 8006e64:	4631      	mov	r1, r6
 8006e66:	4640      	mov	r0, r8
 8006e68:	f7ff fbca 	bl	8006600 <_free_r>
 8006e6c:	e7e1      	b.n	8006e32 <_realloc_r+0x1e>
 8006e6e:	4635      	mov	r5, r6
 8006e70:	e7df      	b.n	8006e32 <_realloc_r+0x1e>

08006e72 <_malloc_usable_size_r>:
 8006e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e76:	1f18      	subs	r0, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bfbc      	itt	lt
 8006e7c:	580b      	ldrlt	r3, [r1, r0]
 8006e7e:	18c0      	addlt	r0, r0, r3
 8006e80:	4770      	bx	lr
	...

08006e84 <_init>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	bf00      	nop
 8006e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8a:	bc08      	pop	{r3}
 8006e8c:	469e      	mov	lr, r3
 8006e8e:	4770      	bx	lr

08006e90 <_fini>:
 8006e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e92:	bf00      	nop
 8006e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e96:	bc08      	pop	{r3}
 8006e98:	469e      	mov	lr, r3
 8006e9a:	4770      	bx	lr
